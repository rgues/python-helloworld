{"version":3,"sources":["./src/app/dashboard/my-wallet/withdrawal/withdrawal.page.scss","./src/app/dashboard/my-wallet/update-bank-profil/update-bank-profil.component.ts","./src/app/dashboard/my-wallet/add-bank-profil/add-bank-profil.component.scss","./src/app/dashboard/my-wallet/update-bank-profil/update-bank-profil.component.scss","./src/app/dashboard/my-wallet/add-bank-profil/add-bank-profil.component.html","./src/app/dashboard/my-wallet/withdrawal/withdrawal.module.ts","./src/app/dashboard/my-wallet/update-bank-profil/update-bank-profil.component.html","./src/app/dashboard/my-wallet/withdrawal/withdrawal.page.ts","./src/app/dashboard/my-wallet/withdrawal/withdrawal.page.html","./src/app/dashboard/my-wallet/add-bank-profil/add-bank-profil.component.ts"],"names":[],"mappings":"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","file":"my-wallet-withdrawal-withdrawal-module.js","sourcesContent":["export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ3aXRoZHJhd2FsLnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ModalController, AlertController, NavParams } from '@ionic/angular';\r\nimport { WalletService } from '../service/wallet.service';\r\nimport { ErrorService } from 'src/app/shared/service/error.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { WalletErrorService } from 'src/app/dashboard/my-wallet/service/wallet-error.service';\r\nimport { UiService } from 'src/app/shared/service/ui.service';\r\n\r\n@Component({\r\n  selector: 'app-update-bank-profil',\r\n  templateUrl: './update-bank-profil.component.html',\r\n  styleUrls: ['./update-bank-profil.component.scss'],\r\n})\r\nexport class UpdateBankProfilComponent implements OnInit {\r\n\r\n  addBankForm: FormGroup;\r\n  loading: boolean;\r\n  data: any;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private translate: TranslateService,\r\n    private alertController: AlertController,\r\n    private error: ErrorService,\r\n    private ui: UiService,\r\n    private wallet: WalletService,\r\n    private modatCtrl: ModalController,\r\n    private params: NavParams,\r\n    private walletError: WalletErrorService\r\n  ) {\r\n      this.loading = false;\r\n      this.data = this.params.get('data'); \r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initBankAccount();\r\n  }\r\n\r\n  \r\n  closeAddBank(result: string) {\r\n    this.modatCtrl.dismiss(null, result);\r\n  }\r\n\r\n  initBankAccount() {\r\n    const data = this.data; \r\n    this.addBankForm = this.fb.group({\r\n      user_bank_profile_id: [data.user_bank_profile_id ? data.user_bank_profile_id : '', Validators.required],\r\n      bank_name: [data.bank_name ? data.bank_name : '', Validators.required],\r\n      branch_name: [data.branch_name ? data.branch_name : ''],\r\n      branch_code: [data.branch_code ? data.branch_code : ''],\r\n      nom_proprietaire: [data.nom_proprietaire ? data.nom_proprietaire : '', Validators.required],\r\n      account_number: [data.account_number ? data.account_number : '', Validators.required],\r\n      address: [data.address ? data.address : '', Validators.required]\r\n    });\r\n  }\r\n\r\n\r\n  get bank() {\r\n    return this.addBankForm.get('bank_name');\r\n  }\r\n\r\n  get branchName() {\r\n    return this.addBankForm.get('branch_name');\r\n  }\r\n\r\n  get branchCode() {\r\n    return this.addBankForm.get('branch_code');\r\n  }\r\n\r\n  get accountName() {\r\n    return this.addBankForm.get('nom_proprietaire');\r\n  }\r\n\r\n  get accountNber() {\r\n    return this.addBankForm.get('account_number');\r\n  }\r\n\r\n  get address() {\r\n    return this.addBankForm.get('address');\r\n  }\r\n\r\n  confirmUpdateAccount() {\r\n    const translations = [];\r\n    this.translate.get(['UPDATE_BANK_INFO', 'UPDATE_ACCOUNT_CONFIRMATION', 'CANCEL_TEXT', 'YES_TEXT']).subscribe(trans => {\r\n      translations.push(trans.UPDATE_BANK_INFO);\r\n      translations.push(trans.UPDATE_ACCOUNT_CONFIRMATION);\r\n      translations.push(trans.CANCEL_TEXT);\r\n      translations.push(trans.YES_TEXT);\r\n      this.confirnMessage(translations);\r\n    });\r\n\r\n  }\r\n\r\n\r\n  // confirm th update \r\n async confirnMessage(translations: any) {\r\n    const alert = await this.alertController.create({\r\n      header: `${translations[0]}`,\r\n      message : `${translations[1]}`,\r\n      buttons: [\r\n        {\r\n          text: `${translations[2]}`,\r\n          role: 'cancel',\r\n          cssClass: 'secondary',\r\n          handler: () => {\r\n          }\r\n        }, {\r\n          text: `${translations[3]}`,\r\n          handler: () => {\r\n            this.updateAccount();\r\n          }\r\n        }\r\n      ]\r\n    });\r\n    await alert.present();\r\n  }\r\n\r\n  // Update a new account\r\n  updateAccount() {\r\n    this.loading = true;\r\n    this.wallet.updateBankProfile(this.addBankForm.value)\r\n    .subscribe((reponse: any) => {\r\n        this.loading = false;\r\n        if (reponse && reponse.message === 'success') {\r\n            this.translate.get('BANK_UPDATE_SUCCESS_MESSAGE').subscribe(trans => {\r\n              this.ui.presentToast(trans);\r\n            });\r\n            this.initBankAccount();\r\n            this.closeAddBank('success');\r\n        } else {\r\n          this.closeAddBank('cancel');\r\n        }\r\n    }, error => {\r\n        this.loading = false;\r\n        if (error && error.error && error.error.message === 'error') {\r\n          if (error.error.user_not_found) {\r\n            this.loading = true;\r\n            this.error.renewSession().then((data: any) => {\r\n              if (data && data.result === \"OK\") {\r\n                  this.updateAccount();\r\n              } else {\r\n                this.closeAddBank('cancel');\r\n                this.loading = false;\r\n              }\r\n            });\r\n          } else {\r\n            this.closeAddBank('cancel');\r\n            this.walletError.manageWalletError(error);\r\n          }\r\n        } else {\r\n          this.closeAddBank('cancel');\r\n          this.error.manageError(error);\r\n        }\r\n        \r\n    });\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhZGQtYmFuay1wcm9maWwuY29tcG9uZW50LnNjc3MifQ== */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ1cGRhdGUtYmFuay1wcm9maWwuY29tcG9uZW50LnNjc3MifQ== */\";","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title class=\\\"ion-text-center\\\">{{ 'ADD_BANK_PROFIL_TEXT' | translate }}</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n  <form [formGroup]=\\\"addBankForm\\\">\\n    <ion-grid>\\n      <ion-row>\\n        <ion-col>\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\"> {{ 'WITHDRAWAL_TEXT7' | translate }}</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"bank_name\\\" required></ion-input>\\n          </ion-item> \\n          <div class=\\\"validation-errors\\\">\\n            <div class=\\\"error-message\\\" *ngIf=\\\"bank.invalid && (bank.dirty || bank.touched)\\\">\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n              {{ 'BANK_NAME_REQUIRED' | translate }}\\n            </div>\\n          </div>       \\n        </ion-col>\\n      </ion-row>\\n      <ion-row>\\n        <ion-col>\\n          <ion-item >\\n            <ion-label position=\\\"floating\\\">{{ 'BRANCH_NAME' | translate }}</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"branch_name\\\"></ion-input>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <div class=\\\"error-message\\\" *ngIf=\\\"branchName.invalid && (branchName.dirty || branchName.touched)\\\">\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n              {{ 'BRANCH_NAME_REQUIRED' | translate }}\\n            </div>\\n          </div>  \\n        </ion-col>\\n      </ion-row>\\n      <ion-row>\\n        <ion-col>\\n          <ion-item >\\n            <ion-label position=\\\"floating\\\">{{ 'BRANCH_CODE' | translate }}</ion-label>\\n            <ion-input type=\\\"number\\\" formControlName=\\\"branch_code\\\"></ion-input>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <div class=\\\"error-message\\\" *ngIf=\\\"branchCode.invalid && (branchCode.dirty || branchCode.touched)\\\">\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n              {{ 'BRANCH_CODE_REQUIRED' | translate }}\\n            </div>\\n          </div>  \\n        </ion-col>\\n      </ion-row>\\n      <ion-row>\\n        <ion-col>\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\"> {{ 'WALLET_ACCOUNT_HOLDER_NAME' | translate }}</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"nom_proprietaire\\\" required></ion-input>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <div class=\\\"error-message\\\" *ngIf=\\\"accountName.invalid && (accountName.dirty || accountName.touched)\\\">\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n              {{ 'ACCOUNT_HOLDER_REQUIRED' | translate }}\\n            </div>\\n          </div>        \\n        </ion-col>\\n      </ion-row>\\n      <ion-row>\\n        <ion-col>\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">{{'WALLET_ACCOUNT_NUMBER' | translate}}</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"account_number\\\" required></ion-input>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <div class=\\\"error-message\\\" *ngIf=\\\"accountNber.invalid && (accountNber.dirty || accountNber.touched)\\\">\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n              {{ 'ACCOUNT_NUMBER_REQUIRED' | translate }}\\n            </div>\\n          </div>        \\n        </ion-col>\\n      </ion-row>\\n      <ion-row>\\n        <ion-col>\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\"> {{'ADDRESS_TEXT' | translate}}</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"address\\\" required></ion-input>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <div class=\\\"error-message\\\" *ngIf=\\\"address.invalid && (address.dirty || address.touched)\\\">\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n              {{ 'ADDRESS_REQUIRED' | translate }}\\n            </div>\\n          </div>        \\n        </ion-col>\\n      </ion-row>      \\n    </ion-grid>\\n  </form>\\n</ion-content>\\n\\n<ion-footer class=\\\"ion-padding ion-text-center\\\">\\n    <ion-grid>\\n      <ion-row>   \\n        <ion-col>\\n            <ion-button expand=\\\"full\\\" \\n                  color=\\\"warning\\\" [disabled]=\\\"addBankForm.invalid || loading\\\"\\n                  class=\\\"ion-text-uppercase\\\"\\n                  shape=\\\"round\\\" (click)=\\\"addAccount()\\\">\\n                  {{'SAVE_TEXT' | translate }}\\n            </ion-button>\\n        </ion-col>   \\n        <ion-col>\\n            <ion-button expand=\\\"full\\\" \\n                  fill=\\\"outline\\\"\\n                  color=\\\"warning\\\" \\n                  class=\\\"ion-text-uppercase\\\"\\n                  shape=\\\"round\\\" (click)=\\\"closeAddBank('cancel')\\\">\\n              {{'CANCEL_TEXT' | translate }}\\n            </ion-button>\\n        </ion-col>\\n      </ion-row>\\n      <p class=\\\"ion-text-center\\\" *ngIf=\\\"loading\\\"> \\n        <ion-spinner  name=\\\"circles\\\"></ion-spinner>\\n      </p>\\n    </ion-grid>\\n  </ion-footer>\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { WithdrawalPage } from './withdrawal.page';\nimport { AddBankProfilComponent } from '../add-bank-profil/add-bank-profil.component';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { UpdateBankProfilComponent } from '../update-bank-profil/update-bank-profil.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: WithdrawalPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [\n    WithdrawalPage,\n    AddBankProfilComponent,\n    UpdateBankProfilComponent\n  ],\n  entryComponents: [\n    AddBankProfilComponent,\n    UpdateBankProfilComponent\n  ]\n})\nexport class WithdrawalPageModule {}\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title class=\\\"ion-text-center\\\">{{ 'ADD_BANK_PROFIL_TEXT' | translate }}</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n  <form [formGroup]=\\\"addBankForm\\\">\\n    <ion-grid>\\n      <ion-row>\\n        <ion-col>\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\"> {{ 'WITHDRAWAL_TEXT7' | translate }}</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"bank_name\\\" required></ion-input>\\n          </ion-item> \\n          <div class=\\\"validation-errors\\\">\\n            <div class=\\\"error-message\\\" *ngIf=\\\"bank.invalid && (bank.dirty || bank.touched)\\\">\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n              {{ 'BANK_NAME_REQUIRED' | translate }}\\n            </div>\\n          </div>       \\n        </ion-col>\\n      </ion-row>\\n      <ion-row>\\n        <ion-col>\\n          <ion-item >\\n            <ion-label position=\\\"floating\\\">{{ 'BRANCH_NAME' | translate }}</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"branch_name\\\"></ion-input>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <div class=\\\"error-message\\\" *ngIf=\\\"branchName.invalid && (branchName.dirty || branchName.touched)\\\">\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n              {{ 'BRANCH_NAME_REQUIRED' | translate }}\\n            </div>\\n          </div>  \\n        </ion-col>\\n      </ion-row>\\n      <ion-row>\\n        <ion-col>\\n          <ion-item >\\n            <ion-label position=\\\"floating\\\">{{ 'BRANCH_CODE' | translate }}</ion-label>\\n            <ion-input type=\\\"number\\\" formControlName=\\\"branch_code\\\"></ion-input>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <div class=\\\"error-message\\\" *ngIf=\\\"branchCode.invalid && (branchCode.dirty || branchCode.touched)\\\">\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n              {{ 'BRANCH_CODE_REQUIRED' | translate }}\\n            </div>\\n          </div>  \\n        </ion-col>\\n      </ion-row>\\n      <ion-row>\\n        <ion-col>\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\"> {{ 'WALLET_ACCOUNT_HOLDER_NAME' | translate }}</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"nom_proprietaire\\\" required></ion-input>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <div class=\\\"error-message\\\" *ngIf=\\\"accountName.invalid && (accountName.dirty || accountName.touched)\\\">\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n              {{ 'ACCOUNT_HOLDER_REQUIRED' | translate }}\\n            </div>\\n          </div>        \\n        </ion-col>\\n      </ion-row>\\n      <ion-row>\\n        <ion-col>\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">{{'WALLET_ACCOUNT_NUMBER' | translate}}</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"account_number\\\" required></ion-input>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <div class=\\\"error-message\\\" *ngIf=\\\"accountNber.invalid && (accountNber.dirty || accountNber.touched)\\\">\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n              {{ 'ACCOUNT_NUMBER_REQUIRED' | translate }}\\n            </div>\\n          </div>        \\n        </ion-col>\\n      </ion-row>\\n      <ion-row>\\n        <ion-col>\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\"> {{'ADDRESS_TEXT' | translate}}</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"address\\\" required></ion-input>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <div class=\\\"error-message\\\" *ngIf=\\\"address.invalid && (address.dirty || address.touched)\\\">\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n              {{ 'ADDRESS_REQUIRED' | translate }}\\n            </div>\\n          </div>        \\n        </ion-col>\\n      </ion-row>      \\n    </ion-grid>\\n  </form>\\n</ion-content>\\n\\n<ion-footer class=\\\"ion-padding ion-text-center\\\">\\n    <ion-grid>\\n      <ion-row>   \\n        <ion-col>\\n            <ion-button expand=\\\"full\\\" \\n                  color=\\\"warning\\\" [disabled]=\\\"addBankForm.invalid || loading\\\"\\n                  class=\\\"ion-text-uppercase\\\"\\n                  shape=\\\"round\\\" (click)=\\\"confirmUpdateAccount()\\\">\\n                  {{'M_UPDATE' | translate }}\\n            </ion-button>\\n        </ion-col>   \\n        <ion-col>\\n            <ion-button expand=\\\"full\\\" \\n                  fill=\\\"outline\\\"\\n                  color=\\\"warning\\\" \\n                  class=\\\"ion-text-uppercase\\\"\\n                  shape=\\\"round\\\" (click)=\\\"closeAddBank('cancel')\\\">\\n              {{'CANCEL_TEXT' | translate }}\\n            </ion-button>\\n        </ion-col>\\n      </ion-row>\\n      <p class=\\\"ion-text-center\\\" *ngIf=\\\"loading\\\"> \\n        <ion-spinner  name=\\\"circles\\\"></ion-spinner>\\n      </p>\\n    </ion-grid>\\n  </ion-footer>\";","import { Component, NgZone, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ModalController, AlertController } from '@ionic/angular';\r\nimport { AddBankProfilComponent } from '../add-bank-profil/add-bank-profil.component';\r\nimport { ContributionService } from '../../my-tontines/services/contribution.service';\r\nimport { ErrorService } from 'src/app/shared/service/error.service';\r\nimport { States } from 'src/app/shared/models/countries';\r\nimport { WalletService } from '../service/wallet.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { LocationService } from 'src/app/shared/service/location.service';\r\nimport { Router } from '@angular/router';\r\nimport { UpdateBankProfilComponent } from '../update-bank-profil/update-bank-profil.component';\r\nimport { FormUtilsService } from 'src/app/shared/service/form-utils.service';\r\nimport { WalletErrorService } from 'src/app/dashboard/my-wallet/service/wallet-error.service';\r\nimport { PaymentGlobalDataService } from 'src/app/shared/service/payment-global-data.service';\r\nimport { UiService } from 'src/app/shared/service/ui.service';\r\nimport { StorageData } from 'src/app/shared/service/storage.service';\r\nimport { UserService } from '../../user/service/user.service';\r\n\r\n@Component({\r\n  selector: 'app-withdrawal',\r\n  templateUrl: './withdrawal.page.html',\r\n  styleUrls: ['./withdrawal.page.scss'],\r\n})\r\nexport class WithdrawalPage implements OnInit {\r\n  currentBalance: any;\r\n  bankList: any[];\r\n  paymentMethods: any[];\r\n  withdrawal: FormGroup;\r\n  loading: boolean;\r\n  currencyList: any;\r\n  amounValid: boolean;\r\n  maxAmount: number;\r\n  amountErrorMessage: string;\r\n  currentIndex: number;\r\n  states: States[] = [];\r\n  errorEmail: boolean;\r\n  defautCountry: any;\r\n  listOfcountries: any;\r\n  validationMessages: any;\r\n  errorPhone: boolean;\r\n\r\n  constructor(\r\n    private contribution: ContributionService,\r\n    private wallet: WalletService,\r\n    private modatCtrl: ModalController,\r\n    private paymentData: PaymentGlobalDataService,\r\n    private ui: UiService,\r\n    private zone: NgZone,\r\n    private translate: TranslateService,\r\n    private storage: StorageData,\r\n    private fb: FormBuilder,\r\n    private router: Router,\r\n    private error: ErrorService,\r\n    private userService: UserService,\r\n    private location: LocationService,\r\n    private formUtil: FormUtilsService,\r\n    private alertController: AlertController,\r\n    private walletError: WalletErrorService\r\n  ) {\r\n    this.bankList = [];\r\n    this.currentIndex = 0;\r\n    this.maxAmount = 0;\r\n    this.currencyList = [];\r\n    this.loading = false;\r\n    this.amountErrorMessage = '';\r\n    this.amounValid = true;\r\n    this.paymentMethods = [];\r\n    this.errorEmail = false;\r\n    this.errorPhone = false;\r\n    this.listOfcountries = [];\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initForm();\r\n    this.getBankList();\r\n    this.getCurrentBalance();\r\n  }\r\n\r\n\r\n  // Form getters\r\n  get phoneId() {\r\n    return this.withdrawal.get('phoneid');\r\n  }\r\n\r\n  get countryId() {\r\n    return this.withdrawal.get('country_id');\r\n  }\r\n\r\n  get beneficiary() {\r\n    return this.withdrawal.get('nom_beneficiaire');\r\n  }\r\n\r\n  get operatortype() {\r\n    return this.withdrawal.get('method_payment_id');\r\n  }\r\n\r\n  get devise() {\r\n    return this.withdrawal.get('device_name');\r\n  }\r\n\r\n  get amount() {\r\n    return this.withdrawal.get('amount');\r\n  }\r\n\r\n  get bank() {\r\n    return this.withdrawal.get('bank_name');\r\n  }\r\n\r\n  get branchCode() {\r\n    return this.withdrawal.get('branch_code');\r\n  }\r\n\r\n  get branchName() {\r\n    return this.withdrawal.get('branch_name');\r\n  }\r\n\r\n  get accountName() {\r\n    return this.withdrawal.get('nom_proprietaire');\r\n  }\r\n\r\n  get accountNber() {\r\n    return this.withdrawal.get('account_number');\r\n  }\r\n\r\n  get address() {\r\n    return this.withdrawal.get('address');\r\n  }\r\n\r\n  get phone() {\r\n    return this.withdrawal.get('phoneNumber');\r\n  }\r\n\r\n  get email() {\r\n    return this.withdrawal.get('email');\r\n  }\r\n\r\n  // Init the form\r\n  initForm() {\r\n    const currentUser = this.userService.getUserData();\r\n    this.withdrawal = this.fb.group({\r\n      method_payment_id: ['', Validators.required],\r\n      device_name: [''],\r\n      direct_transfert_to_bank_account: [''],\r\n      user_bank_profile_id: [''],\r\n      nom_beneficiaire: ['', Validators.compose([Validators.maxLength(100)])],\r\n      amount: ['', Validators.compose([Validators.required, Validators.min(1), Validators.pattern('^[0-9]+$')])],\r\n      bank_name: [''],\r\n      nom_proprietaire: [''],\r\n      account_number: [''],\r\n      branch_code: [''],\r\n      branch_name: [''],\r\n      address: [''],\r\n      phone_number: [''],\r\n      email: [currentUser && currentUser.email && this.formUtil.validateEmail(currentUser.email) ? currentUser.email : ''],\r\n      phoneNumber: ['', Validators.compose([Validators.pattern('^[0-9]{6,13}$')])],\r\n      phoneid: [''],\r\n      country_id: ['']\r\n    });\r\n\r\n    this.checkEmail(this.withdrawal.value.email);\r\n  }\r\n\r\n  // Refresh the list\r\n  refreSher(event) {\r\n    this.getBankList();\r\n    this.getCurrentBalance();\r\n    setTimeout(() => {\r\n      event.target.complete();\r\n    }, 2000);\r\n  }\r\n\r\n\r\n  // check Email address\r\n  checkEmail(email) {\r\n    this.errorEmail = !this.formUtil.validateEmail(email);\r\n  }\r\n\r\n  // check phone\r\n  checkPhone(phone) {\r\n    this.errorPhone = !this.formUtil.validatePhone(phone);\r\n  }\r\n\r\n  // Remove space\r\n  removeSpace() {\r\n    this.withdrawal.get('amount').setValue(this.paymentData.removeInputSpace(this.withdrawal.value.amount));\r\n  }\r\n\r\n  // Remove space\r\n  removeSpace1() {\r\n    this.withdrawal.get('phoneNumber').setValue(this.paymentData.removeInputSpace(this.withdrawal.value.phoneNumber));\r\n  }\r\n\r\n  // check if is operator\r\n  isOperator() {\r\n    return this.paymentMethods && this.paymentMethods[this.currentIndex] &&(this.paymentMethods[this.currentIndex].name === 'MTN MOBILE MONEY' || this.paymentMethods[this.currentIndex].name === 'ORANGE MONEY');\r\n  }\r\n\r\n  // check if is paypal\r\n  isPaypal() {\r\n    return this.paymentMethods && this.paymentMethods[this.currentIndex] &&this.paymentMethods[this.currentIndex].name === 'PAYPAL';\r\n  }\r\n\r\n  // can make disable the withdrawal\r\n  canDisabledWithdrawal() {\r\n    return !this.amounValid \r\n    || (this.withdrawal.value.method_payment_id !== 0 && this.paymentMethods && this.paymentMethods[this.currentIndex] &&this.paymentMethods[this.currentIndex].name !== 'PAYPAL' && !this.withdrawal.value.phoneNumber) \r\n    || this.loading || this.withdrawal.invalid ||\r\n    (this.errorEmail && this.paymentMethods && this.paymentMethods[this.currentIndex] && this.paymentMethods[this.currentIndex].name === 'PAYPAL') \r\n    || (this.errorPhone && this.paymentMethods && this.paymentMethods[this.currentIndex] && (this.paymentMethods[this.currentIndex].name === 'MTN MOBILE MONEY' || this.paymentMethods[this.currentIndex].name === 'ORANGE MONEY' ));\r\n  }\r\n\r\n  // Get the list of the bank\r\n  getBankList() {\r\n    this.wallet.getAllBank().subscribe((reponse: any) => {\r\n      if (reponse && reponse.message === 'success') {\r\n        this.bankList = [];\r\n        reponse.bank.forEach(bank => {\r\n          if (bank && bank.active === 1) {\r\n            this.bankList.push(bank);\r\n          }\r\n        });\r\n        if (this.bankList && this.bankList.length > 0) {\r\n          this.getBankdetail(this.bankList[0].id);\r\n        }\r\n      }\r\n    }, error => {\r\n      if (error && error.error && error.error.message === 'error') {\r\n        if (error.error.user_not_found) {\r\n          this.error.renewSession().then((data: any) => {\r\n            if (data && data.result === 'OK') {\r\n              this.getBankList();\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        this.error.manageError(error);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  // get the current balamce of the user\r\n  getCurrentBalance() {\r\n    this.contribution.getUserWallet().subscribe((reponse: any) => {\r\n      if (reponse && reponse.message === 'success') {\r\n        this.currentBalance = reponse.PorteMonnaieUser;\r\n        this.storage.set('current-balance', reponse.PorteMonnaieUser);\r\n        this.getAllMethodPaymentType();\r\n      }\r\n    }, error => {\r\n\r\n      if (error && error.error && error.error.user_not_found) {\r\n        this.error.renewSession().then((data: any) => {\r\n          if (data && data.result === 'OK') {\r\n            this.getCurrentBalance();\r\n          } else {\r\n            this.storage.get('current-balance').then(data => {\r\n              this.currentBalance = data ? data : [];\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        this.storage.get('current-balance').then(data => {\r\n          this.currentBalance = data ? data : [];\r\n        });\r\n        this.error.manageError(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Check the amount\r\n  checkAmount(amount: any) {\r\n    this.removeSpace();\r\n    this.amounValid = true;\r\n    this.loading = false;\r\n    if (amount) {\r\n      this.currentBalance.forEach(wallet => {\r\n        if (wallet && wallet.device_name === this.withdrawal.value.device_name) {\r\n          this.maxAmount = parseFloat(wallet.solde_device);\r\n          parseFloat(amount) <= parseFloat(wallet.solde_device) ? this.amounValid = true : this.amounValid = false;\r\n          this.translate.get('MAX_AMOUNT_MESSAGE').subscribe(trans => {\r\n            this.amountErrorMessage = `${trans} ${this.maxAmount} ${wallet.device_name}`;\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Get the list of countries\r\n  getCountries(refresher: boolean) {\r\n    this.location.getAllCountries(refresher).then((countries: any) => {\r\n      countries.forEach(country => {\r\n        if (country && country.active === 1) {\r\n          this.listOfcountries.push(country.country_id);\r\n          if (country.default_country === 'yes') {\r\n            this.defautCountry = country.country_id;\r\n          }\r\n        }\r\n      });\r\n      this.states = this.paymentData.formatCountriesData(countries);\r\n      this.getCurrentCountry(false);\r\n    });\r\n  }\r\n\r\n  // Set defaulft country parameter\r\n  setDefaultCountry(prefix?: string, phone?: string) {\r\n    // Get the list of country\r\n    let countryExist = false;\r\n    this.listOfcountries.forEach(countryId => {\r\n      if (countryId === this.withdrawal.value.country_id) {\r\n        this.updateCountryPrefix(this.withdrawal.value.country_id, prefix, phone);\r\n        countryExist = true;\r\n      }\r\n    });\r\n\r\n    // We set the default country\r\n    if (!countryExist) {\r\n      this.updateCountryPrefix(this.defautCountry, prefix, phone);\r\n    }\r\n  }\r\n\r\n  // Set the default country\r\n  getCurrentCountry(refresher: boolean) {\r\n    const userCountry = this.location.getCurrentUserCountry();\r\n    const credentials = this.userService.getUserSecret();\r\n    const prefix = credentials ? credentials.phone_prefix : '';\r\n    const phone = credentials ? credentials.email_or_phone : '';\r\n\r\n    if (userCountry) {\r\n      if (userCountry.active === 1) {\r\n        this.updateCountryPrefix(userCountry.country_id, prefix, phone);\r\n      } else {\r\n        this.setDefaultCountry(prefix, phone);\r\n      }\r\n    } else {\r\n      this.location.getCurrentCountryInfo(refresher).then((country: any) => {\r\n        if (country) {\r\n          if (country.settings.active === 1) {\r\n            this.updateCountryPrefix(country.settings.country_id, prefix, phone);\r\n          } else {\r\n            this.setDefaultCountry(prefix, phone);\r\n          }\r\n        } else {\r\n          this.setDefaultCountry(prefix, phone);\r\n        }\r\n      }).catch(error => {\r\n      });\r\n    }\r\n  }\r\n\r\n  // Update the country\r\n  updateCountryPrefix(currentCountry: any, prefix?: string, phone?: string) {\r\n    this.states.forEach(state => {\r\n      if (state.country_id === currentCountry) {\r\n        this.withdrawal.get('phoneid').setValue(state.country_prefixe);\r\n        this.withdrawal.get('country_id').setValue(state.country_id);\r\n\r\n        // set the default phone number\r\n        if (state.country_prefixe === prefix && phone) {\r\n          this.withdrawal.get('phoneNumber').setValue(phone);\r\n          this.checkPhone(this.withdrawal.value.phoneNumber);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // update the payment device\r\n  updatePayment(paymentId: number) {\r\n    let index = 0;\r\n    this.paymentMethods.forEach(payment => {\r\n      if (payment.id === paymentId && paymentId !== 0) {\r\n        this.currentIndex = index;\r\n        this.withdrawal.get('device_name').setValue(payment.currency);\r\n        if (payment.name === 'PAYPAL') {\r\n          this.errorPhone = false;\r\n          this.checkEmail(this.withdrawal.value.email);\r\n        } else {\r\n          this.errorEmail = false;\r\n          this.checkPhone(this.withdrawal.value.phoneNumber);\r\n        }\r\n\r\n      } else if (paymentId === 0) {\r\n        this.currentIndex = index;\r\n        this.errorEmail = false;\r\n        this.errorPhone = false;\r\n      }\r\n      index++;\r\n    });\r\n  }\r\n\r\n  // Get a bank detail informations\r\n  getBankdetail(bankId: number) {\r\n    this.withdrawal.get('user_bank_profile_id').setValue(bankId);\r\n    this.bankList.forEach(bank => {\r\n      if (bank.id === bankId) {\r\n        this.withdrawal.get('bank_name').setValue(bank.bank_name);\r\n        this.withdrawal.get('branch_name').setValue(bank.branch_name ? bank.branch_name : '');\r\n        this.withdrawal.get('branch_code').setValue(bank.branch_code ? bank.branch_code : '');\r\n        this.withdrawal.get('address').setValue(bank.address);\r\n        this.withdrawal.get('nom_proprietaire').setValue(bank.name_proprietaire);\r\n        this.withdrawal.get('account_number').setValue(bank.account_number);\r\n      }\r\n    });\r\n  }\r\n\r\n  // get all payment method\r\n  getAllMethodPaymentType() {\r\n    this.userService.getAllMethodPaymentType().subscribe((reponse: any) => {\r\n\r\n      this.paymentMethods = [];\r\n      const paymentList = this.paymentData.filterPaymentMethodByCurrency(reponse.typePayment, this.currentBalance);\r\n      if (paymentList && paymentList.length > 0) {\r\n        this.paymentMethods = this.paymentData.formatWithdrawData(paymentList);\r\n      }\r\n      this.translate.get('BANK_TRANSFER').subscribe(trans => {\r\n        this.paymentMethods.push({\r\n          id: 0, country_id: 0,\r\n          logo: 'assets/wallet-icon.svg', name: trans, label: trans, currency: ''\r\n        });\r\n      });\r\n\r\n      this.zone.run(() => {\r\n        this.paymentMethods = this.paymentMethods;\r\n      });\r\n\r\n      // By default Select the fisrt element\r\n      this.currentIndex = 0;\r\n      setTimeout(() => {\r\n        this.withdrawal.get('method_payment_id').setValue(0);\r\n      }, 200);\r\n\r\n      this.updatePayment(0);\r\n      this.getCountries(false);\r\n    }, error => {\r\n      if (error && error.error && error.error.user_not_found) {\r\n        this.error.renewSession().then((data: any) => {\r\n          if (data && data.result === 'OK') {\r\n            this.getAllMethodPaymentType();\r\n          }\r\n        });\r\n      } else {\r\n        this.error.manageError(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Open add bank profile Modal\r\n  openAddBank() {\r\n    this.modatCtrl\r\n      .create({\r\n        component: AddBankProfilComponent\r\n      })\r\n      .then(modalEl => {\r\n        modalEl.present();\r\n        modalEl.onDidDismiss().then(() => {\r\n          this.getBankList();\r\n        });\r\n      });\r\n  }\r\n\r\n  // Open update bank profile Modal\r\n  openUpdateBank(param: any) {\r\n    this.modatCtrl\r\n      .create({\r\n        component: UpdateBankProfilComponent,\r\n        componentProps: {\r\n          data: param\r\n        }\r\n      })\r\n      .then(modalEl => {\r\n        modalEl.present();\r\n        modalEl.onDidDismiss().then(() => {\r\n          this.getBankList();\r\n        });\r\n      });\r\n  }\r\n\r\n  // Confirm the delete message\r\n  confirmDeleteAccount(data: any) {\r\n    const translations = [];\r\n    this.translate.get(['DELETE_BANK_INFO', 'DELETE_ACCOUNT_CONFIRMATION', 'CANCEL_TEXT', 'YES_TEXT']).subscribe(trans => {\r\n      translations.push(trans.DELETE_BANK_INFO);\r\n      translations.push(trans.DELETE_ACCOUNT_CONFIRMATION);\r\n      translations.push(trans.CANCEL_TEXT);\r\n      translations.push(trans.YES_TEXT);\r\n      this.confirmMessage(translations, data);\r\n    });\r\n  }\r\n\r\n  // Delete message\r\n  async confirmMessage(translations: any, data: any) {\r\n    const alert = await this.alertController.create({\r\n      header: `${translations[0]}`,\r\n      message: `${translations[1]}`,\r\n      buttons: [\r\n        {\r\n          text: `${translations[2]}`,\r\n          role: 'cancel',\r\n          cssClass: 'secondary',\r\n          handler: () => {\r\n          }\r\n        }, {\r\n          text: `${translations[3]}`,\r\n          handler: () => {\r\n            this.deleteAccount(data);\r\n          }\r\n        }\r\n      ]\r\n    });\r\n    await alert.present();\r\n  }\r\n\r\n  // Delete a new account\r\n  deleteAccount(data: any) {\r\n    this.loading = true;\r\n    this.wallet.DeleteBankProfile({ user_bank_profile_id: data })\r\n      .subscribe((reponse: any) => {\r\n        this.loading = false;\r\n        if (reponse && reponse.message === 'success') {\r\n          this.translate.get('BANK_DELETE_SUCCESS_MESSAGE').subscribe(trans => {\r\n            this.ui.presentToast(trans);\r\n          });\r\n          this.getBankList();\r\n        }\r\n      }, error => {\r\n        this.loading = false;\r\n        if (error && error.error && error.error.message === 'error') {\r\n\r\n          if (error.error.user_bank_profile_id_not_exist) {\r\n            this.translate.get('BANK_NAME_NOT_EXIST').subscribe(trans => {\r\n              this.ui.presentToast(trans);\r\n            });\r\n          }\r\n          if (error.error.user_not_found) {\r\n            this.loading = true;\r\n            this.error.renewSession().then((ans: any) => {\r\n              if (ans && ans.result === \"OK\") {\r\n                this.deleteAccount(data);\r\n              } else {\r\n                this.loading = false;\r\n              }\r\n            });\r\n          } else {\r\n            this.walletError.manageWalletError(error);\r\n          }\r\n        } else {\r\n          this.error.manageError(error);\r\n        }\r\n      });\r\n  }\r\n\r\n    // check the number \r\n    checkNumberAndPin() {\r\n      const user = this.userService.getUserSecret();\r\n      if (this.withdrawal.value.phoneNumber === user.email_or_phone) {\r\n        this.sendBankRequest();\r\n      } else {\r\n          this.ui.confirmPin(this.sendBankRequest);\r\n      }\r\n    }\r\n\r\n  // Add a new account\r\n  sendBankRequest() {\r\n\r\n  this.loading = true;\r\n    if (this.withdrawal.value.method_payment_id === 0) {\r\n      this.withdrawal.get('direct_transfert_to_bank_account').setValue(1);\r\n    } else {\r\n      this.withdrawal.get('direct_transfert_to_bank_account').setValue(0);\r\n      this.withdrawal.get('phone_number').setValue(this.withdrawal.value.phoneid + this.withdrawal.value.phoneNumber);\r\n    }\r\n\r\n    this.wallet.submitRequest(this.withdrawal.value)\r\n      .subscribe((reponse: any) => {\r\n        this.loading = false;\r\n        if (reponse && reponse.message === 'success') {\r\n          this.translate.get(['BANK_REQUEST_SUBMIT', 'WITHDRAWAL_TEXT0', 'WITHDRAWAL_DEBIT_ORDER']).subscribe(trans => {\r\n            this.ui.presentAlert(trans.WITHDRAWAL_TEXT0, `${trans.BANK_REQUEST_SUBMIT} ${trans.WITHDRAWAL_DEBIT_ORDER} ${this.withdrawal.value.amount} ${this.withdrawal.value.device_name}`);\r\n          });\r\n          this.getBankList();\r\n          this.getCurrentBalance();\r\n          this.initForm();\r\n          this.getCountries(false);\r\n          this.router.navigate(['dashboard/my-wallet/history']);\r\n        }\r\n      }, error => {\r\n        this.loading = false;\r\n        if (error && error.error && error.error.message === 'error') {\r\n          if (error.error.user_not_found) {\r\n            this.loading = true;\r\n            this.error.renewSession().then((data: any) => {\r\n              if (data && data.result === \"OK\") {\r\n                this.sendBankRequest();\r\n              } else {\r\n                this.loading = false;\r\n              }\r\n            });\r\n          } else {\r\n            this.walletError.manageWalletError(error);\r\n          }\r\n        } else {\r\n          this.error.manageError(error);\r\n        }\r\n      }); \r\n  }\r\n\r\n}\r\n","export default \"<ion-header>\\r\\n  <ion-toolbar class=\\\"with-logo2\\\">\\r\\n      <ion-buttons slot=\\\"start\\\">\\r\\n        <ion-back-button color=\\\"primary\\\" defaultHref=\\\"/dashboard/my-wallet\\\" slot=\\\"text-only\\\"></ion-back-button>\\r\\n      </ion-buttons>\\r\\n    <ion-title class=\\\"ion-text-center title-md-right\\\">\\r\\n      <ion-img class=\\\"logo\\\" [src]=\\\"'assets/logo-toupesu.svg'\\\"></ion-img>\\r\\n    </ion-title>\\r\\n  </ion-toolbar>\\r\\n  <ion-toolbar class=\\\"ion-text-center subtitle\\\">\\r\\n    <ion-title>{{ 'WALLET_TEXT1' | translate }}: <ion-text color=\\\"primary\\\" class=\\\"ion-text-capitalize\\\">{{ 'WITHDRAWAL_TEXT0' | translate }}</ion-text></ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content id=\\\"withdrawal\\\">\\r\\n  <ion-refresher slot=\\\"fixed\\\" (ionRefresh)=\\\"refreSher($event)\\\">\\r\\n    <ion-refresher-content\\r\\n      pullingIcon=\\\"reload-outline\\\"\\r\\n      refreshingSpinner=\\\"circles\\\"\\r\\n      refreshingText=\\\"{{ 'M_REFRESHING_TEXT' | translate }}\\\">\\r\\n    </ion-refresher-content>\\r\\n  </ion-refresher>\\r\\n  <ion-grid>\\r\\n    <ion-row>\\r\\n      <ion-col>\\r\\n        <ion-col class=\\\"ion-no-padding\\\">\\r\\n          <ion-card class=\\\"block-1\\\">\\r\\n            <ion-card-content class=\\\"ion-text-center\\\">\\r\\n              <ion-row>\\r\\n                <ion-col size=\\\"auto\\\" class=\\\"align-self-center\\\">\\r\\n                  <span class=\\\"desc\\\">{{ 'WALLET_TEXT2' | translate }} </span>\\r\\n                </ion-col>\\r\\n                <ion-col class=\\\"col-button\\\">\\r\\n                  <div class=\\\"menu-amount\\\">\\r\\n                    <span *ngFor=\\\"let balance of currentBalance; let i = index\\\"> {{(balance.solde_device | commadumper)}}\\r\\n                      {{balance.device_name}} <span *ngIf=\\\"currentBalance[i+1]\\\"> | </span></span>\\r\\n                  </div>\\r\\n                </ion-col>\\r\\n              </ion-row>\\r\\n            </ion-card-content>\\r\\n          </ion-card>\\r\\n        </ion-col>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n    <ion-row>\\r\\n      <ion-col>\\r\\n        <form [formGroup]=\\\"withdrawal\\\">\\r\\n          <ion-card>\\r\\n            <ion-card-header>\\r\\n              <ion-card-subtitle>\\r\\n                {{ 'M_WALLET_SELECT_TEXT' | translate }}\\r\\n                <ion-item>\\r\\n                  <ion-label>{{ 'M_PAY_BY' | translate }}</ion-label>\\r\\n                  <ion-select (ionChange)=\\\"updatePayment(withdrawal.value.method_payment_id)\\\"\\r\\n                    formControlName=\\\"method_payment_id\\\">\\r\\n                    <ion-select-option *ngFor=\\\"let operator of paymentMethods; let m=index\\\" [selected]=\\\"m===0\\\" [value]=\\\"operator.id\\\">{{ operator.label }}\\r\\n                    </ion-select-option>\\r\\n                  </ion-select>\\r\\n                </ion-item>\\r\\n              </ion-card-subtitle>\\r\\n              <ion-card-content>\\r\\n                <div *ngIf=\\\"withdrawal.value.method_payment_id === 0; then bankTransfer else mobilTransfer\\\"></div>\\r\\n                <ng-template #bankTransfer>\\r\\n                  <ion-row>\\r\\n                    <ion-col>\\r\\n                      <ion-text color=\\\"warning\\\">\\r\\n                        {{ 'WITHDRAWAL_TEXT10' | translate }}\\r\\n                      </ion-text>\\r\\n                    </ion-col>\\r\\n                  </ion-row>\\r\\n                  <ion-row>\\r\\n                    <ion-col>\\r\\n                      <ion-item *ngIf=\\\"bankList && bankList.length > 0\\\">\\r\\n                        <ion-label>{{ 'TONTINE_DETAIL_TEXT2' | translate }}</ion-label>\\r\\n                        <ion-select (ionChange)=\\\"checkAmount(withdrawal.value.amount)\\\" formControlName=\\\"device_name\\\">\\r\\n                          <ion-select-option *ngFor=\\\"let currency of currentBalance\\\" [value]=\\\"currency.device_name\\\">\\r\\n                            {{ currency.device_name }}</ion-select-option>\\r\\n                        </ion-select>\\r\\n                      </ion-item>\\r\\n                      <div class=\\\"validation-errors\\\">\\r\\n                        <div class=\\\"error-message\\\" *ngIf=\\\"devise.invalid && (devise.dirty || devise.touched)\\\">\\r\\n                          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\r\\n                          {{ 'CURRENCY_REQUIRED' | translate }}\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </ion-col>\\r\\n                  </ion-row>\\r\\n                  <ion-row>\\r\\n                    <ion-col *ngIf=\\\"bankList && bankList.length > 0\\\">\\r\\n                      <ion-item>\\r\\n                        <ion-label position=\\\"floating\\\">{{'WALLET_AMOUNT_WITHDRAWAL' | translate}} \\r\\n                          <span *ngIf=\\\"withdrawal.value.device_name\\\">({{withdrawal.value.device_name}})</span></ion-label>\\r\\n                        <ion-input (ionChange)=\\\"checkAmount(withdrawal.value.amount)\\\" type=\\\"number\\\"\\r\\n                          formControlName=\\\"amount\\\"></ion-input>\\r\\n                      </ion-item>\\r\\n                      <div class=\\\"validation-errors\\\">\\r\\n                        <div class=\\\"error-message\\\" *ngIf=\\\"amount.invalid && (amount.dirty || amount.touched)\\\">\\r\\n                          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\r\\n                          {{'AMOUNT_REQUIRED' | translate }}\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"!amounValid\\\">\\r\\n                        <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\r\\n                        {{amountErrorMessage}}\\r\\n                      </div>\\r\\n                    </ion-col>\\r\\n                  </ion-row>\\r\\n                  <ion-row>\\r\\n                    <ion-col>\\r\\n                      <ion-item *ngIf=\\\"bankList && bankList.length > 0\\\">\\r\\n                        <ion-label>{{ 'WITHDRAWAL_TEXT7' | translate }}</ion-label>\\r\\n                        <ion-select (ionChange)=\\\"getBankdetail(withdrawal.value.user_bank_profile_id)\\\"\\r\\n                          formControlName=\\\"user_bank_profile_id\\\">\\r\\n                          <ion-select-option *ngFor=\\\"let bank of bankList\\\" [value]=\\\"bank.id\\\">{{ bank.bank_name }}\\r\\n                          </ion-select-option>\\r\\n                        </ion-select>\\r\\n                      </ion-item>\\r\\n                      <div class=\\\"validation-errors\\\"  *ngIf=\\\"bankList && bankList.length > 0\\\">\\r\\n                        <div class=\\\"error-message\\\" *ngIf=\\\"bank.invalid && (bank.dirty || bank.touched)\\\">\\r\\n                          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\r\\n                          {{ 'BANK_NAME_REQUIRED' | translate }}\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      <ion-text class=\\\"ion-float-right\\\"><a\\r\\n                          (click)=\\\"openAddBank($event)\\\">{{ 'WITHDRAWAL_TEXT9' | translate }}</a></ion-text>\\r\\n                    </ion-col>\\r\\n                  </ion-row>\\r\\n                  <ion-row>\\r\\n                    <ion-col>\\r\\n                      <ion-item *ngIf=\\\"bankList && bankList.length > 0 && withdrawal.value.nom_proprietaire\\\">\\r\\n                        <ion-label position=\\\"floating\\\">{{ 'WALLET_ACCOUNT_HOLDER_NAME' | translate }}</ion-label>\\r\\n                        <ion-input type=\\\"text\\\" formControlName=\\\"nom_proprietaire\\\"></ion-input>\\r\\n                      </ion-item>\\r\\n                      <div class=\\\"validation-errors\\\">\\r\\n                        <div class=\\\"error-message\\\"\\r\\n                          *ngIf=\\\"accountName.invalid && (accountName.dirty || accountName.touched)\\\">\\r\\n                          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\r\\n                          {{'ACCOUNT_HOLDER_REQUIRED' | translate }}\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </ion-col>\\r\\n                  </ion-row>\\r\\n                  <ion-row>\\r\\n                    <ion-col>\\r\\n                      <ion-item *ngIf=\\\"bankList && bankList.length > 0 && withdrawal.value.branch_name\\\">\\r\\n                        <ion-label position=\\\"floating\\\">{{ 'BRANCH_NAME' | translate }}</ion-label>\\r\\n                        <ion-input type=\\\"text\\\" formControlName=\\\"branch_name\\\"></ion-input>\\r\\n                      </ion-item>\\r\\n                    </ion-col>\\r\\n                  </ion-row>\\r\\n                  <ion-row>\\r\\n                    <ion-col>\\r\\n                      <ion-item *ngIf=\\\"bankList && bankList.length > 0 && withdrawal.value.branch_code\\\">\\r\\n                        <ion-label position=\\\"floating\\\">{{ 'BRANCH_CODE' | translate }}</ion-label>\\r\\n                        <ion-input type=\\\"text\\\" formControlName=\\\"branch_code\\\"></ion-input>\\r\\n                      </ion-item>\\r\\n                    </ion-col>\\r\\n                  </ion-row>\\r\\n                  <ion-row>\\r\\n                    <ion-col>\\r\\n                      <ion-item *ngIf=\\\"bankList && bankList.length > 0 && withdrawal.value.account_number\\\">\\r\\n                        <ion-label position=\\\"floating\\\">{{ 'WALLET_ACCOUNT_NUMBER' | translate }}</ion-label>\\r\\n                        <ion-input type=\\\"tel\\\" formControlName=\\\"account_number\\\"></ion-input>\\r\\n                      </ion-item>\\r\\n                      <div class=\\\"validation-errors\\\">\\r\\n                        <div class=\\\"error-message\\\"\\r\\n                          *ngIf=\\\"accountNber.invalid && (accountNber.dirty || accountNber.touched)\\\">\\r\\n                          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\r\\n                          {{'ACCOUNT_NUMBER_REQUIRED' | translate }}\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </ion-col>\\r\\n                  </ion-row>\\r\\n                  <ion-row>\\r\\n                    <ion-col>\\r\\n                      <ion-item *ngIf=\\\"bankList && bankList.length > 0 && withdrawal.value.address\\\">\\r\\n                        <ion-label position=\\\"floating\\\">{{ 'ADDRESS_TEXT' | translate }}</ion-label>\\r\\n                        <ion-input type=\\\"text\\\" formControlName=\\\"address\\\"></ion-input>\\r\\n                      </ion-item>\\r\\n                      <div class=\\\"validation-errors\\\">\\r\\n                        <div class=\\\"error-message\\\" *ngIf=\\\"address.invalid && (address.dirty || address.touched)\\\">\\r\\n                          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\r\\n                          {{'ACCOUNT_NUMBER_REQUIRED' | translate }}\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </ion-col>\\r\\n                  </ion-row>\\r\\n                  <ion-row *ngIf=\\\"bankList && bankList.length > 0\\\">   \\r\\n                    <ion-col size=\\\"6\\\" >\\r\\n                        <ion-button \\r\\n                              color=\\\"warning\\\" [disabled]=\\\"!withdrawal.value\\\"\\r\\n                              shape=\\\"round\\\" size=\\\"small\\\" (click)=\\\"openUpdateBank(withdrawal.value)\\\">\\r\\n                              {{'M_UPDATE' | translate }}\\r\\n                        </ion-button>\\r\\n                    </ion-col>  \\r\\n                    <ion-col  size=\\\"6\\\" >\\r\\n                        <ion-button   [disabled]=\\\"!withdrawal.value.user_bank_profile_id\\\"\\r\\n                              fill=\\\"outline\\\"\\r\\n                              color=\\\"warning\\\" \\r\\n                              shape=\\\"round\\\" size=\\\"small\\\" (click)=\\\"confirmDeleteAccount(withdrawal.value.user_bank_profile_id)\\\">\\r\\n                          {{'TEXT_DELETE' | translate }}\\r\\n                        </ion-button>\\r\\n                    </ion-col>\\r\\n                  </ion-row>\\r\\n                </ng-template>\\r\\n                <ng-template #mobilTransfer>\\r\\n                  <ion-row>\\r\\n                    <ion-col>\\r\\n                      <ion-item>\\r\\n                        <ion-label>{{ 'TONTINE_DETAIL_TEXT1' | translate }}</ion-label>\\r\\n                        <ion-select (ionChange)=\\\"updateCountryPrefix(withdrawal.value.country_id)\\\"\\r\\n                          formControlName=\\\"country_id\\\">\\r\\n                          <ion-select-option *ngFor=\\\"let state of states\\\" [value]=\\\"state.country_id\\\">\\r\\n                            {{ state.country_label }}</ion-select-option>\\r\\n                        </ion-select>\\r\\n                      </ion-item>\\r\\n                      <div class=\\\"validation-errors\\\">\\r\\n                        <div class=\\\"error-message\\\" *ngIf=\\\"countryId.invalid && (countryId.dirty || countryId.touched)\\\">\\r\\n                          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\r\\n                          <span [innerHTML]=\\\"'REQUIRED_FIELD_TEXT' | translate\\\"></span>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </ion-col>\\r\\n                  </ion-row>\\r\\n                  <ion-row>\\r\\n                    <ion-col>\\r\\n                      <ion-row class=\\\"ion-justify-content-end\\\">\\r\\n                        <ion-col size=\\\"4\\\">\\r\\n                          <ion-img\\r\\n                            [src]=\\\"paymentMethods&&paymentMethods[currentIndex] ? paymentMethods[currentIndex].logo : ' '\\\"\\r\\n                            class=\\\"logooperator\\\"></ion-img>\\r\\n                        </ion-col>\\r\\n                      </ion-row>\\r\\n                    </ion-col>\\r\\n                  </ion-row>\\r\\n                  <ion-row   *ngIf=\\\"!isPaypal()\\\">\\r\\n                    <ion-col size=\\\"4\\\">\\r\\n                      <ion-item>\\r\\n                        <ion-label position=\\\"floating\\\">+</ion-label>\\r\\n                        <ion-input type=\\\"text\\\" placeholder=\\\"{{withdrawal.value.phoneid}}\\\"></ion-input>\\r\\n                      </ion-item>\\r\\n                    </ion-col>\\r\\n                    <ion-col size=\\\"8\\\">\\r\\n                      <ion-item>\\r\\n                        <ion-label position=\\\"floating\\\">{{ 'PHONE_TEXT' | translate }}</ion-label>\\r\\n                        <ion-input type=\\\"tel\\\" (ionChange)=\\\"removeSpace1();checkPhone(withdrawal.value.phoneNumber)\\\" formControlName=\\\"phoneNumber\\\"></ion-input>\\r\\n                      </ion-item>\\r\\n                    </ion-col>\\r\\n                    <ion-col size=\\\"12\\\" *ngIf=\\\"phone.invalid && (phone.dirty || phone.touched) || errorPhone\\\">\\r\\n                      <div class=\\\"validation-errors\\\">\\r\\n                          <div class=\\\"error-message\\\">\\r\\n                            <ion-icon name=\\\"information-circle-outline\\\" ></ion-icon>\\r\\n                           <span  [innerHTML]=\\\"'REGISTER_PHONE_INVALID' | translate\\\"></span>\\r\\n                          </div>\\r\\n                      </div>    \\r\\n                    </ion-col>\\r\\n                  </ion-row>\\r\\n                  <ion-row *ngIf=\\\"isOperator()\\\">\\r\\n                    <ion-col size=\\\"12\\\">\\r\\n                      <ion-item>\\r\\n                        <ion-label position=\\\"floating\\\">{{ 'BENEFICIARY_ACCOUNT_NAME_TEXT' | translate }}</ion-label>\\r\\n                        <ion-input type=\\\"text\\\"  formControlName=\\\"nom_beneficiaire\\\"></ion-input>\\r\\n                      </ion-item>\\r\\n                      <div class=\\\"validation-errors\\\">\\r\\n                        <div class=\\\"error-message\\\" *ngIf=\\\"beneficiary.invalid && (beneficiary.dirty || beneficiary.touched)\\\">\\r\\n                          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\r\\n                          <span [innerHTML]=\\\"'BENEFICARY_NAME_ERROR_TEXT' | translate: {maxLength: 100}\\\"></span>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </ion-col>\\r\\n                  </ion-row>\\r\\n                  <ion-row *ngIf=\\\"isPaypal()\\\">\\r\\n                    <ion-col size=\\\"12\\\">\\r\\n                      <ion-item>\\r\\n                        <ion-label position=\\\"floating\\\">{{ 'EMAIL_TEXT' | translate }}</ion-label>\\r\\n                        <ion-input type=\\\"email\\\" (ionChange)=\\\"checkEmail(withdrawal.value.email)\\\" formControlName=\\\"email\\\"></ion-input>\\r\\n                      </ion-item>\\r\\n                      <div class=\\\"validation-errors\\\">\\r\\n                        <div class=\\\"error-message\\\" *ngIf=\\\"email.invalid && (email.dirty || email.touched) || errorEmail\\\">\\r\\n                          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\r\\n                          <span [innerHTML]=\\\"'TONTINE_NEW_TEXT23' | translate\\\"></span>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </ion-col>\\r\\n                  </ion-row>\\r\\n                  <ion-row>\\r\\n                    <ion-col>\\r\\n                      <ion-item>\\r\\n                        <ion-label position=\\\"floating\\\">{{ 'AMOUNT_TEXT' | translate }}</ion-label>\\r\\n                        <ion-input (ionChange)=\\\"checkAmount(withdrawal.value.amount)\\\" type=\\\"number\\\"\\r\\n                          formControlName=\\\"amount\\\">\\r\\n                        </ion-input>\\r\\n                        <span slot=\\\"end\\\" class=\\\"slot-prefix ion-no-margin\\\"> {{ withdrawal.value.device_name}} </span>\\r\\n                      </ion-item>\\r\\n                      <div class=\\\"validation-errors\\\">\\r\\n                        <div class=\\\"error-message\\\" *ngIf=\\\"amount.invalid && (amount.dirty || amount.touched)\\\">\\r\\n                          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\r\\n                          <span [innerHTML]=\\\"'AMOUNT_REQUIRED' | translate\\\"></span>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      <div class=\\\"error-message\\\" style=\\\"color: red;\\\" *ngIf=\\\"!amounValid\\\">\\r\\n                        <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\r\\n                        {{amountErrorMessage}}\\r\\n                      </div>\\r\\n                    </ion-col>\\r\\n                  </ion-row>\\r\\n                </ng-template>\\r\\n\\r\\n              </ion-card-content>\\r\\n            </ion-card-header>\\r\\n          </ion-card>\\r\\n        </form>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n    <ion-row>\\r\\n      <ion-col>\\r\\n\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n  </ion-grid>\\r\\n</ion-content>\\r\\n\\r\\n<ion-footer class=\\\"ion-padding ion-text-center\\\">\\r\\n  <ion-button expand=\\\"full\\\"\\r\\n    [disabled]=\\\"canDisabledWithdrawal()\\\"\\r\\n    color=\\\"warning\\\" class=\\\"ion-text-uppercase\\\" (click)=\\\"checkNumberAndPin()\\\" shape=\\\"round\\\">\\r\\n    {{ 'WITHDRAWAL_TEXT8' | translate }}\\r\\n  </ion-button>\\r\\n  <ion-spinner *ngIf=\\\"loading\\\" name=\\\"circles\\\"></ion-spinner>\\r\\n</ion-footer>\";","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ModalController } from '@ionic/angular';\r\nimport { WalletService } from '../service/wallet.service';\r\nimport { ErrorService } from 'src/app/shared/service/error.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { WalletErrorService } from 'src/app/dashboard/my-wallet/service/wallet-error.service';\r\nimport { UiService } from 'src/app/shared/service/ui.service';\r\n\r\n@Component({\r\n  selector: 'app-add-bank-profil',\r\n  templateUrl: './add-bank-profil.component.html',\r\n  styleUrls: ['./add-bank-profil.component.scss'],\r\n})\r\nexport class AddBankProfilComponent implements OnInit {\r\n\r\n  addBankForm: FormGroup;\r\n  loading: boolean;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private translate: TranslateService,\r\n    private error: ErrorService,\r\n    private ui: UiService,\r\n    private wallet: WalletService,\r\n    private modatCtrl: ModalController,\r\n    private walletError: WalletErrorService\r\n  ) {\r\n    this.loading = false;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initBankAccount();\r\n  }\r\n\r\n\r\n  closeAddBank(result: string) {\r\n    this.modatCtrl.dismiss(null, result);\r\n  }\r\n\r\n  initBankAccount() {\r\n    this.addBankForm = this.fb.group({\r\n      bank_name: ['', Validators.required],\r\n      branch_name: [''],\r\n      branch_code: [''],\r\n      nom_proprietaire: ['', Validators.required],\r\n      account_number: ['', Validators.required],\r\n      address: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n\r\n  get bank() {\r\n    return this.addBankForm.get('bank_name');\r\n  }\r\n\r\n  get branchName() {\r\n    return this.addBankForm.get('branch_name');\r\n  }\r\n\r\n  get branchCode() {\r\n    return this.addBankForm.get('branch_code');\r\n  }\r\n\r\n  get accountName() {\r\n    return this.addBankForm.get('nom_proprietaire');\r\n  }\r\n\r\n  get accountNber() {\r\n    return this.addBankForm.get('account_number');\r\n  }\r\n\r\n  get address() {\r\n    return this.addBankForm.get('address');\r\n  }\r\n\r\n  // Add a new account\r\n  addAccount() {\r\n    this.loading = true;\r\n    this.wallet.saveBankProfile(this.addBankForm.value)\r\n      .subscribe((reponse: any) => {\r\n        this.loading = false;\r\n        if (reponse && reponse.message === 'success') {\r\n          this.translate.get('BANK_PROFIL_SUCCESS_MESSAGE').subscribe(trans => {\r\n            this.ui.presentToast(trans);\r\n          });\r\n          this.initBankAccount();\r\n          this.closeAddBank('success');\r\n        }\r\n      }, error => {\r\n        this.loading = false;\r\n        if (error && error.error && error.error.message === 'error') {\r\n          if (error.error.user_not_found) {\r\n            this.loading = true;\r\n            this.error.renewSession().then((data: any) => {\r\n              if (data && data.result === \"OK\") {\r\n                  this.addAccount();\r\n              } else {\r\n                this.closeAddBank('cancel');\r\n                this.loading = false;\r\n              }\r\n            });\r\n          } else {\r\n            this.closeAddBank('cancel');\r\n            this.walletError.manageWalletError(error);\r\n          }\r\n        } else {\r\n          this.closeAddBank('cancel');\r\n          this.error.manageError(error);\r\n        }\r\n       \r\n      });\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}