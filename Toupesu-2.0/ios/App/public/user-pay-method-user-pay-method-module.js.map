{"version":3,"sources":["./src/app/dashboard/user/user-pay-method/user-pay-method.page.scss","./src/app/dashboard/user/user-pay-method/user-pay-method.page.html","./src/app/dashboard/user/user-pay-method/user-pay-method.page.ts","./src/app/dashboard/user/user-pay-method/user-pay-method.module.ts"],"names":[],"mappings":"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","file":"user-pay-method-user-pay-method-module.js","sourcesContent":["export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ1c2VyLXBheS1tZXRob2QucGFnZS5zY3NzIn0= */\";","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button color=\\\"primary\\\" defaultHref=\\\"/dashboard/user\\\" slot=\\\"text-only\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-avatar slot=\\\"start\\\">\\n      <img src=\\\"{{userPicture ? userPicture : 'assets/post-img.svg'}}\\\" class=\\\"thumb-img\\\">\\n    </ion-avatar>\\n    <ion-title class=\\\"no-padding ion-margin-start\\\">\\n      {{ 'USER_PROFILE_TEXT4' | translate }}\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\n  <ion-refresher slot=\\\"fixed\\\" (ionRefresh)=\\\"refreSher($event)\\\">\\n    <ion-refresher-content\\n      pullingIcon=\\\"reload-outline\\\"\\n      refreshingSpinner=\\\"circles\\\"\\n      refreshingText=\\\"{{ 'M_REFRESHING_TEXT' | translate }}\\\">\\n    </ion-refresher-content>\\n  </ion-refresher>\\n  \\n  <p class=\\\"ion-text-center\\\"  *ngIf=\\\"loadingPayment\\\">\\n    <ion-spinner  name=\\\"circles\\\"></ion-spinner>\\n  </p>\\n  <form [formGroup]=\\\"userPayMethodForm\\\" *ngIf=\\\"paymentMethods && paymentMethods.length > 0\\\">\\n    <ion-grid>\\n      <ion-row class=\\\"ion-justify-content-end\\\">\\n        <ion-col size=\\\"4\\\">\\n          <ion-img [src]=\\\"paymentMethods ? paymentMethods[userPayMethodForm.value.typePaymentIndex].logo : ''\\\" class=\\\"logooperator\\\"></ion-img>\\n        </ion-col>\\n      </ion-row>  \\n      <ion-row>\\n        <ion-col>\\n          <ion-item>\\n            <ion-label>{{'USER_PROFILE_TEXT4' | translate}}</ion-label>\\n            <ion-select  (ionChange)=\\\"updatePaymentMethod(userPayMethodForm.value.typePaymentIndex)\\\" formControlName=\\\"typePaymentIndex\\\">\\n              <ion-select-option *ngFor=\\\"let operator of paymentMethods; let operatorId = index\\\" [selected]=\\\"userPayMethodForm.value.typePaymentIndex === operatorId ? true : false\\\" [value]=\\\"operatorId\\\">{{ operator.name }}</ion-select-option>          \\n            </ion-select>\\n          </ion-item>    \\n        </ion-col>\\n      </ion-row> \\n      <ion-row>\\n        <ion-col>\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">{{paymentMethods[userPayMethodForm.value.typePaymentIndex].placeholder}}</ion-label>\\n            <ion-input (change)=\\\"checckEmailOrPhone(userPayMethodForm.value.numberAccount,userPayMethodForm.value.typePaymentIndex)\\\" type=\\\"text\\\" formControlName=\\\"numberAccount\\\"></ion-input>\\n          </ion-item> \\n          <div class=\\\"validation-errors\\\">\\n              <div class=\\\"error-message\\\" *ngIf=\\\"(numberAccount.dirty ||  numberAccount.touched) && numberAccount.invalid\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\" ></ion-icon>\\n                <span [innerHTML]=\\\"'REQUIRED_FIELD_TEXT' | translate\\\"></span>\\n              </div>\\n          </div>          \\n        </ion-col>\\n      </ion-row> \\n    </ion-grid>\\n  </form>\\n\\n  <div  *ngIf=\\\"paymentMethods && paymentMethods.length === 0 && !loadingPayment\\\">\\n    <p  class=\\\"ion-padding ion-text-center\\\"> {{ 'PAYMENT_MSG' | translate }}</p>\\n  </div>\\n\\n</ion-content>\\n\\n<ion-footer class=\\\"ion-padding ion-text-center\\\">\\n  <ion-button expand=\\\"full\\\" \\n        color=\\\"warning\\\" [disabled]=\\\"loading ||userPayMethodForm.invalid || errorEmail || errorPhone\\\"\\n        (click)=\\\"savePaymentMethod()\\\"\\n        class=\\\"ion-text-uppercase\\\"\\n        shape=\\\"round\\\">\\n    {{ 'SAVE_TEXT' | translate }}\\n  </ion-button>\\n  <ion-spinner *ngIf=\\\"loading\\\" name=\\\"circles\\\"></ion-spinner>\\n</ion-footer>\\n\";","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { ErrorService } from 'src/app/shared/service/error.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { LocationService } from 'src/app/shared/service/location.service';\r\nimport { FormUtilsService } from 'src/app/shared/service/form-utils.service';\r\nimport { PaymentGlobalDataService } from 'src/app/shared/service/payment-global-data.service';\r\nimport { UserService } from '../service/user.service';\r\nimport { UiService } from 'src/app/shared/service/ui.service';\r\nimport { EventService } from 'src/app/shared/service/events.service';\r\n\r\ninterface PaymentMethod {\r\n  id: number;\r\n  logo: string;\r\n  name: string;\r\n  placeholder: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-user-pay-method',\r\n  templateUrl: './user-pay-method.page.html',\r\n  styleUrls: ['./user-pay-method.page.scss'],\r\n})\r\nexport class UserPayMethodPage implements OnInit {\r\n\r\n  userPayMethodForm: FormGroup;\r\n  paymentMethods: PaymentMethod[];\r\n  errorPhone: boolean;\r\n  errorEmail: boolean;\r\n  errorToken: boolean;\r\n  loading: boolean;\r\n  errorAccount: boolean;\r\n  loadingPayment: boolean;\r\n  currentPaymentMethod: any;\r\n  userData: any;\r\n  defaultState: any;\r\n  userPicture: string;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private userService: UserService,\r\n    private paymentData: PaymentGlobalDataService,\r\n    private errorService: ErrorService,\r\n    private locate: LocationService,\r\n    private location: TranslateService,\r\n    private formUtil: FormUtilsService,\r\n    private event: EventService,\r\n    private ui: UiService\r\n  ) {\r\n    this.paymentMethods = [];\r\n    this.errorPhone = false;\r\n    this.errorEmail = false;\r\n    this.loading = false;\r\n    this.loadingPayment = false;\r\n    this.userData = this.userService.getUserData();\r\n    this.userPicture = this.userData && this.userData.picture ? `${this.userData.picture}` : null;\r\n    this.event.subscribe('user-data', user => {\r\n      this.userPicture = user && user.picture ? user.picture : null;\r\n    });\r\n  }\r\n\r\n  get operatorName() {\r\n    return this.userPayMethodForm.get('operatorName');\r\n  }\r\n\r\n  get phone() {\r\n    return this.userPayMethodForm.get('phone');\r\n  }\r\n\r\n  get numberAccount() {\r\n    return this.userPayMethodForm.get('numberAccount');\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getCurrentCountry(false);\r\n    this.getAllMethodPaymentType();\r\n    this.initPaymentForm();\r\n  }\r\n\r\n\r\n\r\n  // check if emial or phone is valid\r\n  checckEmailOrPhone(inputValue: string, index: number) {\r\n    this.errorPhone = false;\r\n    this.errorEmail = false;\r\n    switch (this.paymentMethods[index].name) {\r\n      case 'ORANGE MONEY':\r\n        this.errorPhone = !this.formUtil.validatePhone(inputValue);\r\n        break;\r\n\r\n      case 'MTN MOBILE MONEY':\r\n        this.errorPhone = !this.formUtil.validatePhone(inputValue);\r\n        break;\r\n\r\n      case 'PAYPAL':\r\n        this.errorEmail = !this.formUtil.validateEmail(inputValue);\r\n        break;\r\n\r\n      case 'OZOW':\r\n        this.errorEmail = !this.formUtil.validateEmail(inputValue);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  initPaymentForm() {\r\n    const currentPayment = this.paymentData.getDefaultPaymentMethod();\r\n    this.currentPaymentMethod = currentPayment;\r\n    this.userPayMethodForm = this.fb.group({\r\n      modepaiement_id: [currentPayment ? currentPayment.modepaiement_id : ''],\r\n      typePayment: [currentPayment ? currentPayment.typepaiement_id : ''],\r\n      typePaymentIndex: [0],\r\n      numberAccount: [currentPayment ? currentPayment.numero_compte : '', Validators.required],\r\n      nameAccount: [currentPayment ? currentPayment.nametypepaiement : '']\r\n    });\r\n  }\r\n\r\n  // Set the default country\r\n  getCurrentCountry(refresher: boolean) {\r\n    this.locate.getCurrentCountryInfo(refresher).then((country: any) => {\r\n      if (country) {\r\n        this.defaultState = country.settings;\r\n      }\r\n    }).catch(error => {\r\n    });\r\n  }\r\n\r\n  // Refresh the list\r\n  refreSher(event) {\r\n    this.getCurrentCountry(false);\r\n    this.getAllMethodPaymentType();\r\n    setTimeout(() => {\r\n      event.target.complete();\r\n    }, 2000);\r\n  }\r\n\r\n  // initialize the payment method\r\n  initPaymentMethod(payment: any,index: number){\r\n    if (this.currentPaymentMethod && this.currentPaymentMethod.nametypepaiement === payment.name) {\r\n      this.userPayMethodForm.get('typePaymentIndex').setValue(index);\r\n      this.updatePaymentMethod(index);\r\n    }\r\n  }\r\n\r\n  // can set payment method\r\n  canSetPaymentMethod(payment: any){\r\n     return payment.active === 1 && (String(this.userData.pays) === String(payment.country_name)\r\n     || (this.defaultState && this.defaultState.country_id === payment.country_id && !this.userData.pays))\r\n  }\r\n\r\n  // get all payment method\r\n  getAllMethodPaymentType() {\r\n    this.loadingPayment = true;\r\n    this.paymentMethods = [];\r\n    this.userService.getAllMethodPaymentType().subscribe((reponse: any) => {\r\n      this.loadingPayment = false;\r\n      if (reponse && reponse.typePayment && reponse.typePayment.length > 0) {\r\n        let index = 0;\r\n        reponse.typePayment.forEach(payment => {\r\n          // Get payment method for current user's country or default country\r\n          if (this.canSetPaymentMethod(payment)) {\r\n            switch (payment.name) {\r\n              case 'ORANGE MONEY':\r\n                this.location.get('REGISTER_MPHONE').subscribe(value => {\r\n                  this.paymentMethods.push({\r\n                    id: payment.id, logo: 'assets/orange.jpg', name: payment.name,\r\n                    placeholder: value\r\n                  });\r\n                });\r\n                this.initPaymentMethod(payment,index);\r\n                index++;\r\n                break;\r\n\r\n              case 'MTN MOBILE MONEY':\r\n                this.location.get('REGISTER_MPHONE').subscribe(value => {\r\n                  this.paymentMethods.push({\r\n                    id: payment.id, logo: 'assets/mtn.jpg', name: payment.name,\r\n                    placeholder: value\r\n                  });\r\n                });\r\n                this.initPaymentMethod(payment,index);\r\n                index++;\r\n                break;\r\n\r\n              case 'PAYPAL':\r\n                this.location.get('EMAIL_TEXT').subscribe(value => {\r\n                  this.paymentMethods.push({\r\n                    id: payment.id, logo: 'assets/paypal.jpg', name: payment.name,\r\n                    placeholder: value\r\n                  });\r\n                });\r\n                this.initPaymentMethod(payment,index);\r\n                index++;\r\n                break;\r\n\r\n              case 'OZOW':\r\n                this.location.get('EMAIL_TEXT').subscribe(value => {\r\n                  this.paymentMethods.push({\r\n                    id: payment.id, logo: 'assets/ozow.png', name: payment.name,\r\n                    placeholder: value\r\n                  });\r\n                });\r\n                this.initPaymentMethod(payment,index);\r\n                index++;\r\n                break;\r\n\r\n              default:\r\n                this.updatePaymentMethod(0);\r\n                index++;\r\n                break;\r\n            }\r\n          }\r\n        });\r\n        // Check if one the user method has been selected\r\n        if (this.userPayMethodForm.value.nameAccount === '') {\r\n          this.updatePaymentMethod(0);\r\n        }\r\n      }\r\n    }, error => {\r\n      this.loadingPayment = false;\r\n      if (error && error.error && error.error.user_not_found) {\r\n        this.errorService.renewSession();\r\n      } else {\r\n        this.errorService.manageError(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Update the payment method\r\n  updatePaymentMethod(index) {\r\n    if (this.paymentMethods && this.paymentMethods.length > 0) {\r\n      this.userPayMethodForm.get('typePayment').setValue(this.paymentMethods[index].id);\r\n      this.userPayMethodForm.get('nameAccount').setValue(this.paymentMethods[index].name);\r\n    }\r\n  }\r\n\r\n  // create the payment method\r\n  createUserPaymentMethod() {\r\n    this.loading = true;\r\n    this.userService.addMethodPaymentUser(this.userPayMethodForm.value).subscribe(\r\n      (user: any) => {\r\n        this.loading = false;\r\n        if (user && user.message === 'success') {\r\n          this.userService.setUserPaymentMethod(user.modePayment);\r\n          this.location.get('USER_PAYMENT_MSG1').subscribe(value => {\r\n            this.ui.presentToast(value);\r\n          });\r\n          this.userService.setUserToken(user.token);\r\n        }\r\n      }, error => {\r\n        this.loading = false;\r\n        if (error && error.error) {\r\n\r\n          if (error.error.numberAccount_already_exist) {\r\n            this.location.get('USER_PAYMENT_MSG3').subscribe(value => {\r\n              this.ui.presentToast(value);\r\n            });\r\n          }\r\n\r\n          if (error.error.token) {\r\n            this.loading = true;\r\n            this.errorService.renewSession().then((data: any) => {\r\n              if (data && data.result === \"OK\") {\r\n                  this.createUserPaymentMethod();\r\n              } else {\r\n                this.loading = false;\r\n              }\r\n            });\r\n          }\r\n      \r\n        } else {\r\n          this.errorService.manageError(error);\r\n        }\r\n      });\r\n  }\r\n\r\n  // update the payment method\r\n  updateUserPaymentMethod() {\r\n    this.loading = true;\r\n    this.userService.updateMethodPaymentUser(this.userPayMethodForm.value).subscribe(\r\n      (user: any) => {\r\n        this.loading = false;\r\n        if (user && user.message === 'success') {\r\n          this.userService.setUserPaymentMethod(user.modePayment);\r\n          this.location.get('USER_PAYMENT_MSG4').subscribe(value => {\r\n            this.ui.presentToast(value);\r\n          });\r\n          this.userService.setUserToken(user.token);\r\n        }\r\n      }, error => {\r\n        this.loading = false;\r\n        if (error && error.error) {\r\n          if (error.error.numberAccount_already_exist) {\r\n            this.location.get('USER_PAYMENT_TEXT1').subscribe(value => {\r\n              this.ui.presentToast(value);\r\n            });\r\n          }\r\n          if (error.error.token) {\r\n            this.loading = true;\r\n            this.errorService.renewSession().then((data: any) => {\r\n                  if (data && data.result === \"OK\") {\r\n                      this.updateUserPaymentMethod();\r\n                  } else {\r\n                    this.loading = false;\r\n                  }\r\n            });\r\n          }\r\n        } else {\r\n          this.errorService.manageError(error);\r\n        }\r\n      });\r\n  }\r\n\r\n  // Save the payment mode\r\n  savePaymentMethod() {\r\n    if (this.userPayMethodForm.value.modepaiement_id) {\r\n      this.updateUserPaymentMethod();\r\n    } else {\r\n      this.createUserPaymentMethod();\r\n    }\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { UserPayMethodPage } from './user-pay-method.page';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: UserPayMethodPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    SharedModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [UserPayMethodPage]\n})\nexport class UserPayMethodPageModule {}\n"],"sourceRoot":"webpack:///"}