{"version":3,"sources":["./src/app/dashboard/user/auto-pay-tontine/auto-pay-tontine.page.ts","./src/app/dashboard/user/auto-pay-tontine/auto-pay-tontine.page.scss","./src/app/dashboard/user/auto-pay-tontine/auto-pay-tontine.module.ts","./src/app/dashboard/user/auto-pay-tontine/auto-pay-tontine.page.html"],"names":[],"mappings":"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","file":"auto-pay-tontine-auto-pay-tontine-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { TontineService } from '../../my-tontines/services/tontine.service';\r\nimport { ErrorService } from 'src/app/shared/service/error.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../service/user.service';\r\nimport { EventService } from 'src/app/shared/service/events.service';\r\nimport { UiService } from 'src/app/shared/service/ui.service';\r\nimport { UserErrorService } from '../service/user-error.service';\r\n\r\ninterface TontineList {\r\n  name: string;\r\n  tontine_id: number;\r\n  automatic_payment_from_wallet: number;\r\n  choice:boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-auto-pay-tontine',\r\n  templateUrl: './auto-pay-tontine.page.html',\r\n  styleUrls: ['./auto-pay-tontine.page.scss'],\r\n})\r\nexport class AutoPayTontinePage implements OnInit {\r\n  tontineCtrl = new FormControl();\r\n  filteredTontines: Observable<string[]>;\r\n  tontines: string[] = [];\r\n  allTontines: string[];\r\n  tontineSelected: TontineList[];\r\n  loading: boolean;\r\n  loadingList: boolean;\r\n  userData: any;\r\n  userPicture: string;\r\n\r\n  constructor(\r\n    private tontineService: TontineService,\r\n    private userService: UserService,\r\n    private router: Router,\r\n    private userError: UserErrorService,\r\n    private ui: UiService,\r\n    private event: EventService,\r\n    private error: ErrorService,\r\n    private translate: TranslateService\r\n  ) {\r\n      this.allTontines = [];\r\n      this.tontineSelected = [];\r\n      this.loading = false;\r\n      this.userData = this.userService.getUserData();\r\n      this.userPicture = this.userData && this.userData.picture ? `${this.userData.picture}` : null;\r\n      this.event.subscribe('user-data', user => {\r\n        this.userPicture = user && user.picture ? user.picture : null;\r\n      });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadingList = true;\r\n    this.getUserTontines(null);\r\n  }\r\n\r\n  // check if a tontine is selected\r\n  checkTontine(tontineList: any[]) {\r\n    let isTontineIn = false;\r\n    tontineList.forEach(tontine => {\r\n        if (tontine.choice) {\r\n          isTontineIn = true;\r\n        }\r\n    });\r\n    return isTontineIn;\r\n  }\r\n\r\n  // save the auto pay method\r\n  saveAutoPay() {\r\n    let i = 0;\r\n    while (i < this.tontineSelected.length) {\r\n        if (this.tontineSelected[i].choice) {\r\n          this.tontineSelected[i].automatic_payment_from_wallet = 1;\r\n        } else {\r\n          this.tontineSelected[i].automatic_payment_from_wallet = 0;\r\n        }\r\n        i++;\r\n    }\r\n    this.loading = true;\r\n    this.userService.payTontineAutomatically({liste_tontine : this.tontineSelected}).subscribe((reponse: any) => {\r\n        this.loading = false;\r\n        if (reponse && reponse.message === 'success') {\r\n            this.translate.get('TONTINE_PAY_AUTO_SUCCESS').subscribe(data => {\r\n              this.ui.presentToast(data);\r\n            });\r\n            this.getUserTontines(null);\r\n            this.router.navigate(['dashboard/user']);\r\n        }\r\n    }, error => {\r\n        this.loading = false;\r\n        if (error && error.error && error.error.message === 'error') {\r\n          if (error && error.error.user_not_found) {\r\n            this.loading = true;\r\n            this.error.renewSession().then((data: any) => {\r\n                  if (data && data.result === \"OK\") {\r\n                      this.saveAutoPay();\r\n                  } else {\r\n                    this.loading = false;\r\n                  }\r\n            });\r\n          } else {\r\n            this.userError.manageUserError(error);\r\n          }  \r\n        } else {\r\n            this.error.manageError(error);\r\n        }\r\n    });\r\n  }\r\n\r\n    // Refresh the list\r\n    refreSher(event) {\r\n      this.getUserTontines(event);\r\n    }\r\n\r\n  // Get the list user tontines\r\n  getUserTontines(event) {\r\n    this.tontineService.getMyTontine().subscribe((reponse: any) => {\r\n      this.loadingList = false;\r\n      if (reponse && reponse.message === 'success') {\r\n        this.tontineSelected = [];\r\n        reponse.liste_tontine.forEach(data => {\r\n          this.tontineSelected.push({\r\n            name: data.tontine.name,\r\n            tontine_id: data.tontine.tontine_id,\r\n            automatic_payment_from_wallet: data.tontine.automatic_payment_from_wallet,\r\n            choice: data.tontine.automatic_payment_from_wallet === 1 ? true : false\r\n          });\r\n        });\r\n      }\r\n      if (event) {\r\n        setTimeout(() => {\r\n          event.target.complete();\r\n        }, 200);\r\n      }\r\n    }, error => {\r\n      if (event) {\r\n          event.target.complete();\r\n      }\r\n      \r\n      if (error && error.error && error.error.user_not_found) {\r\n        this.error.renewSession().then((data: any) => {\r\n          if (data && data.result === 'OK') {\r\n            this.getUserTontines(event);\r\n          } else {\r\n            this.loadingList = false;\r\n          }\r\n         });\r\n      } else {\r\n        this.loadingList = false;\r\n        this.error.manageError(error);\r\n      }\r\n    });\r\n  }\r\n  \r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhdXRvLXBheS10b250aW5lLnBhZ2Uuc2NzcyJ9 */\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AutoPayTontinePage } from './auto-pay-tontine.page';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AutoPayTontinePage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [\n    AutoPayTontinePage\n  ]\n})\nexport class AutoPayTontinePageModule {}\n","export default \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-back-button color=\\\"primary\\\" defaultHref=\\\"/dashboard/user\\\" slot=\\\"text-only\\\"></ion-back-button>\\r\\n    </ion-buttons>\\r\\n    <ion-avatar slot=\\\"start\\\">\\r\\n      <img src=\\\"{{userPicture ? userPicture : 'assets/post-img.svg'}}\\\" class=\\\"thumb-img\\\">\\r\\n    </ion-avatar>\\r\\n    <ion-title class=\\\"no-padding ion-margin-start\\\">\\r\\n      {{'TONTINE_AUTOMATIC_PAY' | translate | stringTruncate : 15 }} \\r\\n    </ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n\\r\\n  <ion-refresher slot=\\\"fixed\\\" (ionRefresh)=\\\"refreSher($event)\\\">\\r\\n    <ion-refresher-content\\r\\n      pullingIcon=\\\"reload-outline\\\"\\r\\n      refreshingSpinner=\\\"circles\\\"\\r\\n      refreshingText=\\\"{{ 'M_REFRESHING_TEXT' | translate }}\\\">\\r\\n    </ion-refresher-content>\\r\\n  </ion-refresher>\\r\\n  \\r\\n  <p class=\\\"ion-text-center\\\"  *ngIf=\\\"loadingList\\\">\\r\\n    <ion-spinner  name=\\\"circles\\\"></ion-spinner>\\r\\n  </p>\\r\\n\\r\\n  <ion-grid>\\r\\n    <ion-row  *ngIf=\\\"!loadingList\\\">\\r\\n      <ion-col>\\r\\n        <ion-text>\\r\\n        {{ 'TONTINE_MESSAGE_AUTOMATIC_PAY' | translate }}\\r\\n        </ion-text>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n    <ion-row>\\r\\n      <ion-col>\\r\\n        <ion-list *ngIf=\\\"tontineSelected && tontineSelected.length > 0\\\">\\r\\n            <ion-list-header>\\r\\n              <ion-label>\\r\\n               {{ 'MENU_MY_TONTINE' | translate }}\\r\\n              </ion-label>\\r\\n            </ion-list-header>\\r\\n            <ion-item *ngFor=\\\"let tontine of tontineSelected; let i=index\\\">\\r\\n              <ion-label>{{tontine.name}}</ion-label>\\r\\n              <ion-checkbox slot=\\\"end\\\" [(ngModel)]=\\\"tontineSelected[i].choice\\\" [checked]=\\\"tontineSelected[i].choice\\\" [value]=\\\"tontineSelected[i].choice\\\"></ion-checkbox>\\r\\n            </ion-item>\\r\\n        </ion-list>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n  </ion-grid>\\r\\n\\r\\n  <div  *ngIf=\\\"tontineSelected && tontineSelected.length === 0 && !loadingList\\\">\\r\\n    <p  class=\\\"ion-padding ion-text-center\\\"> {{ 'TONTINE_AUTO_LIST' | translate }}</p>\\r\\n  </div>\\r\\n</ion-content>\\r\\n\\r\\n<ion-footer class=\\\"ion-padding ion-text-center\\\">\\r\\n  <ion-button expand=\\\"full\\\" \\r\\n        color=\\\"warning\\\"  [disabled]=\\\"loading || tontineSelected && tontineSelected.length === 0\\\"\\r\\n        (click)=\\\"saveAutoPay()\\\"\\r\\n        class=\\\"ion-text-uppercase\\\"\\r\\n        shape=\\\"round\\\">\\r\\n        {{ 'SAVE_TEXT' | translate }}\\r\\n  </ion-button>\\r\\n  <ion-spinner *ngIf=\\\"loading\\\" name=\\\"circles\\\"></ion-spinner>\\r\\n</ion-footer>\\r\\n\";"],"sourceRoot":"webpack:///"}