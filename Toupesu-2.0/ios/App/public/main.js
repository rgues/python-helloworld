(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"],{

/***/ "/OOw":
/*!****************************************************************************!*\
  !*** ./src/app/dashboard/invitations/service/inivitation-error.service.ts ***!
  \****************************************************************************/
/*! exports provided: InivitationErrorService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InivitationErrorService", function() { return InivitationErrorService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var src_app_shared_service_ui_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/service/ui.service */ "QB/Y");




let InivitationErrorService = class InivitationErrorService {
    constructor(translate, ui) {
        this.translate = translate;
        this.ui = ui;
    }
    // check the invitation error action
    manageInvitationError(error) {
        if (error.error.tontine_event_admin_not_found) {
            this.translate.get('ADMIN_EVENT_NOT_FOUND').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.tontine_admin_not_found) {
            this.translate.get('INVITATIONS_UNAUTHORIZED').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.tontine_event_not_found) {
            this.translate.get('TONTINE_EVENT_DELETE_ERROR1').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.tontine_not_found) {
            this.translate.get('TONTINE_EVENT_DELETE_ERROR1').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.invitation_not_found) {
            this.translate.get('TONTINE_INVITE_TEXT12').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.invitation_state) {
            this.translate.get('INVITATION_STATE_CHANGE').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.code_not_found) {
            this.translate.get('USER_SECURITY_MSG6').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.code_already_used) {
            this.translate.get('USER_SECURITY_MSG9').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.code_expired) {
            this.translate.get('USER_SECURITY_MSG8').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.tontine_not_found) {
            this.translate.get('TONTINE_INVITE_TEXT10').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.invitation_code_invalid) {
            this.translate.get('TONTINE_INVITE_TEXT13').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.invitation_code_expired) {
            this.translate.get('TONTINE_INVITE_TEXT15').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.invitation_id_not_exist) {
            this.translate.get('TONTINE_INVITE_TEXT12').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.tontine_admin_not_found) {
            this.translate.get('TONTINE_INVITE_TEXT9').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.user_exist_tontine) {
            this.translate.get('USER_ALREADY_MEMBER_MSG8').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.phone_is_invalid) {
            this.translate.get('USER_DETAIL_TEXT11').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
    }
    // check the invitation error
    manageInviteError(error) {
        this.manageInvitationError(error);
        if (error && error.error && error.error.resultat && error.error.resultat.length > 0) {
            let i = 0;
            while (i < error.error.resultat.length) {
                if (error.error.resultat[i].tontine_admin_not_found) {
                    this.translate.get('TONTINE_INVITED_TEXT6').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
                if (error.error.resultat[i].tontine_not_found) {
                    this.translate.get('TONTINE_INVITED_TEXT7').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
                if (error.error.resultat[i].user_exist_tontine) {
                    this.translate.get('TONTINE_INVITED_TEXT8').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
                if (error.error.resultat[i].user_unauthorized) {
                    this.translate.get('TONTINE_INVITED_TEXT10').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
                if (error.error.resultat[i].invitation_exist) {
                    this.translate.get('TONTINE_INVITED_TEXT11').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
                if (error.error.resultat[i].phone_is_invalid) {
                    this.translate.get('USER_DETAIL_TEXT11').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
                i++;
            }
        }
    }
};
InivitationErrorService.ctorParameters = () => [
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_2__["TranslateService"] },
    { type: src_app_shared_service_ui_service__WEBPACK_IMPORTED_MODULE_3__["UiService"] }
];
InivitationErrorService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], InivitationErrorService);



/***/ }),

/***/ "/WEl":
/*!*******************************************************************!*\
  !*** ./src/app/dashboard/my-tontines/services/tontine.service.ts ***!
  \*******************************************************************/
/*! exports provided: TontineService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TontineService", function() { return TontineService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var src_app_shared_service_location_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/shared/service/location.service */ "e009");
/* harmony import */ var src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/service/api.service */ "6rCG");
/* harmony import */ var _user_service_user_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../user/service/user.service */ "6Hie");
/* harmony import */ var src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/shared/service/events.service */ "r5fM");
/* harmony import */ var src_app_shared_service_storage_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/shared/service/storage.service */ "2+UW");
/* harmony import */ var src_app_shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/shared/service/local-storage.service */ "y7ii");








let TontineService = class TontineService {
    constructor(location, storage, api, userService, event, localStorage) {
        this.location = location;
        this.storage = storage;
        this.api = api;
        this.userService = userService;
        this.event = event;
        this.localStorage = localStorage;
        this.typeTontineName = '';
        this.token = this.userService.getUserToken();
        this.event.subscribe('new-token', token => {
            this.token = token;
        });
    }
    // Get the current user
    getCurrentTontineData() {
        const tontineData = this.localStorage.getItem('tontine-data');
        return tontineData ? tontineData : null;
    }
    // Get the current user
    setCurrentTontineData(tontineData) {
        this.localStorage.setItem('tontine-data', tontineData);
    }
    // Remove the user data
    removeCurrentTontineData() {
        this.localStorage.removeItem('tontine-data');
    }
    // Get the current seance data
    getCurrentSeanceData() {
        return this.storage.get('seance-data');
    }
    // set the current seance data
    setCurrentSeanceData(seanceData) {
        this.storage.remove('seance-data');
        this.storage.set('seance-data', seanceData);
    }
    // Get the type of tontine
    getTypeTontine() {
        return this.api.get('tontine/type/v1/type_tontine');
    }
    // Get the type of payment
    getTypePayment() {
        return this.api.get('tontine/type/v2/payment');
    }
    // Get the type name
    getTypeName(typeId, listTypes) {
        listTypes.forEach(type => {
            if (type.id === typeId) {
                this.location.getTranslationData(`TYPE_TONTINE_ID${type.id}`).subscribe(value => {
                    this.typeTontineName = value[`TYPE_TONTINE_ID${type.id}`];
                });
            }
        });
        return this.typeTontineName;
    }
    // Create the tontine
    createTontine(tontine) {
        return this.api.post('tontine/create/v1/tontine_create', tontine);
    }
    // Get the general informations of the tontines
    getInfoGeneraleTontine(tontineId) {
        this.token = this.userService.getUserToken();
        return this.api.get('tontine/create/v1/get/tontine_section/' + tontineId +
            '/information_generale/' + this.token);
    }
    // Get the tontines contribution setting
    getParametreTontine(tontineId) {
        this.token = this.userService.getUserToken();
        return this.api.get('tontine/create/v1/get/tontine_section/' + tontineId
            + '/parametre_cotisation/' + this.token);
    }
    // Get all penality of tontine
    getPenaliteTontine(tontineId) {
        this.token = this.userService.getUserToken();
        return this.api.get('tontine/create/v1/get/tontine_section/' + tontineId
            + '/penalites/' + this.token);
    }
    // Get tontines documentation
    getDocumentationTontine(tontineId) {
        this.token = this.userService.getUserToken();
        return this.api.get('tontine/create/v1/get/tontine_section/' + tontineId
            + '/documentation/' + this.token);
    }
    // Get tontines duration
    getDateTontine(tontineId) {
        this.token = this.userService.getUserToken();
        return this.api.get('tontine/create/v1/get/tontine_section/' + tontineId +
            '/cycle_et_cotisation/' + this.token);
    }
    // Update the tontine
    updateTontine(tontine) {
        this.token = this.userService.getUserToken();
        return this.api.put('tontine/create/v1/tontine_update_info_generale/' + this.token, tontine);
    }
    // Create and update the tontine setting
    createAndUpdateParametreTontine(tontine) {
        this.token = this.userService.getUserToken();
        return this.api.put('tontine/create/v1/tontine_update_parametre_cotisation/'
            + this.token, tontine);
    }
    // Create and update the tontine penality
    createAndUpdatePenaliteTontine(tontine) {
        this.token = this.userService.getUserToken();
        return this.api.put('tontine/create/v1/tontine_update_penalite/' + this.token, tontine);
    }
    // Create and update the tontine date
    createAndUpdateDateTontine(tontine) {
        this.token = this.userService.getUserToken();
        return this.api.put('tontine/create/v1/tontine_update_cycle/' + this.token, tontine);
    }
    // Create and update the tontine documentation
    createAndUpdateDocumentationTontine(tontine) {
        this.token = this.userService.getUserToken();
        return this.api.put('tontine/create/v1/tontine_update_documentation/' + this.token, tontine);
    }
    // Get the user tontine
    getMyTontine() {
        this.token = this.userService.getUserToken();
        if (this.token) {
            return this.api.get('tontine/user/v1/tontine_user/' + this.token);
        }
    }
    // Get the  tontine information
    getTontineDetail(tontineId) {
        this.token = this.userService.getUserToken();
        if (this.token) {
            return this.api.get('tontine/visualiser/v1/visualiser_tontine/' + tontineId + '/' + this.token);
        }
    }
    // Get the quality of the tontine
    getQualityTontine() {
        return this.api.get('tontine/quality/v1/quality_tontine');
    }
    // Add or remove the user role
    addOrRemoveUserRole(tontine) {
        this.token = this.userService.getUserToken();
        return this.api.post('tontine/attribute/v1/role/tomember/' + this.token, tontine);
    }
    // The list of tontime members
    getTontinesMembers(tontineId) {
        this.token = this.userService.getUserToken();
        return this.api.get('tontine/invitation/v1/member_confirmed/' + tontineId + '/' + this.token);
    }
    /** ============ Parts services start ============= */
    // Add a member part
    addPartMembreTontine(demandePart) {
        this.token = this.userService.getUserToken();
        return this.api.post('part/v1/addPartMember/' + this.token, demandePart);
    }
    // Remove a part from a member
    removePartMembreTontine(part) {
        this.token = this.userService.getUserToken();
        return this.api.post('part/v1/subtractPartMember/' + this.token, part);
    }
    // Get all the part of tontine member
    getPartMembreTontine(tontineId) {
        this.token = this.userService.getUserToken();
        return this.api.get('part/v1/getAllPartMember/' + tontineId + '/' + this.token);
    }
    // Get all the part of tontine member with token
    getPartMembreTontineWithToken(tontineId) {
        this.token = this.userService.getUserToken();
        return this.api.get('part/v1/getAllPartMember/' + tontineId + '/' + this.token);
    }
    // Get all the part of tontine member with userId
    getPartMembreTontineWithUserId(tontineId, userId) {
        return this.api.get('part/v1/getAllPartMember/' + tontineId + '/' + userId);
    }
    /** ============ Statistics services start ============= */
    // Get all cycles of a tontine
    getTontinesCycles(tontineId) {
        return this.api.get('statistique/v2/tontine/get/cycles/' + tontineId);
    }
    // Get all seances of a tontine's cycle
    getTontinesCyclesSeances(cycleId) {
        return this.api.get('statistique/v1/tontine/get/seance/' + cycleId);
    }
    // Get all data statistics of a tontine
    getAllStatisticsData(tontineData) {
        this.token = this.userService.getUserToken();
        return this.api.post('statistique/v1/tontine/' + this.token, tontineData);
    }
    // Get the list of members of a seance
    getMembersSeanceList(cycleId) {
        this.token = this.userService.getUserToken();
        return this.api.get('statistique/get/list/member/' + cycleId + '/' + this.token);
    }
    /** ============ Statistics services end ============= */
    // update the quota admin validator
    updateAdminValidator(data) {
        this.token = this.userService.getUserToken();
        return this.api.put('tontine/create/v1/tontine_update_role/' + this.token, data);
    }
    /* Order the member list */
    orderMembersList(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('ordering/v1/permut/order/bouffe/member/' + this.token, data);
    }
    /* Order the member list */
    designatedJackpotList(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('ordering/v1/designate/member/bouffe/' + this.token, data);
    }
    /* get all member contribution for a tontine */
    getMemberStokvelContribution(data) {
        this.token = this.userService.getUserToken();
        if (this.token) {
            return this.api.post('trace/v1/etat/member/tontine/' + this.token, data);
        }
    }
    // Disable a member of a tontine
    disableTontineMember(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('membre/tontine/v1/active/or/desative/' + this.token, data);
    }
    // Disable a tontine
    disableTontine(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('tontine/archived/' + this.token, data);
    }
    // Disable a tontine
    setNbBatches(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('numberlot/tontine/set/nombre/lot/seance/' + this.token, data);
    }
    // get members who have paid full cautions
    getMembersPaidFullCautions(cycleId) {
        this.token = this.userService.getUserToken();
        return this.api.get(`caution/get/member/withFullCaution/${cycleId}/` + this.token);
    }
    // get members who have paid partial cautions
    getMembersPaidPartialCautions(cycleId) {
        this.token = this.userService.getUserToken();
        return this.api.get(`caution/get/member/withOutFullCaution/${cycleId}/` + this.token);
    }
};
TontineService.ctorParameters = () => [
    { type: src_app_shared_service_location_service__WEBPACK_IMPORTED_MODULE_2__["LocationService"] },
    { type: src_app_shared_service_storage_service__WEBPACK_IMPORTED_MODULE_6__["StorageData"] },
    { type: src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_3__["ApiService"] },
    { type: _user_service_user_service__WEBPACK_IMPORTED_MODULE_4__["UserService"] },
    { type: src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_5__["EventService"] },
    { type: src_app_shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_7__["LocalStorageService"] }
];
TontineService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], TontineService);



/***/ }),

/***/ 0:
/*!***************************!*\
  !*** multi ./src/main.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\Users\usert\Desktop\Toupesu-2.0\src\main.ts */"zUnb");


/***/ }),

/***/ "0ZiF":
/*!***************************************************!*\
  !*** ./src/app/shared/pipes/comma-dumper.pipe.ts ***!
  \***************************************************/
/*! exports provided: CommaDumperPipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommaDumperPipe", function() { return CommaDumperPipe; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");


let CommaDumperPipe = class CommaDumperPipe {
    transform(value) {
        if (!value) {
            return '0';
        }
        return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
    }
};
CommaDumperPipe = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"])({
        name: 'commadumper'
    })
], CommaDumperPipe);



/***/ }),

/***/ "0g9v":
/*!************************************************************************************************!*\
  !*** ./src/app/dashboard/my-tontines/tontine-detail/wallet/services/wallet-tontine.service.ts ***!
  \************************************************************************************************/
/*! exports provided: WalletTontineService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WalletTontineService", function() { return WalletTontineService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/shared/service/api.service */ "6rCG");
/* harmony import */ var src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/dashboard/user/service/user.service */ "6Hie");
/* harmony import */ var src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/shared/service/events.service */ "r5fM");





let WalletTontineService = class WalletTontineService {
    constructor(userService, api, event) {
        this.userService = userService;
        this.api = api;
        this.event = event;
        this.token = this.userService.getUserToken();
        this.event.subscribe('new-token', token => {
            this.token = token;
        });
    }
    // Add a nez cashier
    addCashier(tontine) {
        this.token = this.userService.getUserToken();
        return this.api.post(`tontine/wallet/v1/tontine/${this.token}`, tontine);
    }
    // Get all types of cashiers
    getAllCashiers(tontineId) {
        return this.api.get(`tontine/wallet/v1/get/all/caisses/${tontineId}`);
    }
    // Get the tontine wallet
    getTontineWallet(tontine) {
        this.token = this.userService.getUserToken();
        if (this.token) {
            return this.api.post(`tontine/wallet/v1/see/wallet/${this.token}`, tontine);
        }
    }
    // Get all wallet transaction
    getWalletTransaction(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`tontine/wallet/v1/get/all/transaction/${this.token}`, data);
    }
    // Get traditionnnal banking wallet transaction to validate
    getTradiBankingTransactionToValidate(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`tontine/wallet/v1/get/pending/transaction/${this.token}`, data);
    }
    // get proof of wallet transactions
    getWalletTransactionsProofs(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`tontine/wallet/v1/get/proof/of/a/transaction/${this.token}`, data);
    }
    // Permit to admin to validate a transaction
    validateTransByAdmin(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`tontine/wallet/v1/validate/a/deposit/transaction/${this.token}`, data);
    }
    // Cancel a deposit by admin
    cancelTransByAdmin(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`tontine/wallet/v1/rejected/a/deposit/transaction/${this.token}`, data);
    }
    // transfert money from cashier to cashier
    transfertFromCashierToCashier(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`tontine/wallet/v1/transfert/cash/source/to/destination/fund/${this.token}`, data);
    }
    // Make a deposit with traditionnal banking
    makeDepositWithTraditionnalBanking(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`tontine/wallet/v1/save/deposit/withTraditionalBanking/${this.token}`, data);
    }
    /* Make deposit with ORANGE, MTN, PAYPAL, OZOW  with and without  conversion */
    makeDepositWithMobileMoneyWithoutConversion(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`tontine/wallet/v1/save/deposit/withOnlineWallet/without/conversion/${this.token}`, data);
    }
    makeDepositWithMobileMoneyWithConversion(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`tontine/wallet/v1/save/deposit/withOnlineWallet/with/conversion/${this.token}`, data);
    }
    /* Withdrawal route specially for this route put token on body */
    // Make a new withdrawal request 
    newWithdrawalRequest(data) {
        return this.api.post(`reqwithdrawalTontine/new`, data);
    }
    // Save tontine bank profile
    saveTontineBankProfile(data) {
        return this.api.post(`reqwithdrawalTontine/savetontinebankprofile`, data);
    }
    // update tontine bank profile 
    updateTontineBankProfile(data) {
        return this.api.post(`reqwithdrawalTontine/updatetontinebankprofile`, data);
    }
    // Delete the tontine bank profile
    deleteTontineBankProfile(data) {
        return this.api.post(`reqwithdrawalTontine/deletetontinebankprofile`, data);
    }
    // Get all the bank profile
    getAllBankProfile(data) {
        return this.api.post(`reqwithdrawalTontine/getallbankprofiles`, data);
    }
    // get the detail informations of bank profile 
    getInfoBankProfile(data) {
        return this.api.post(`reqwithdrawalTontine/getinfobank`, data);
    }
    // Get all withdrawal request from a tontine
    geAlltWithdrawallRequest(data) {
        return this.api.post(`reqwithdrawalTontine/getallwithdrawrequest`, data);
    }
    // Get all approval request from a tontine withdrawal
    getAllApprovalRequest(data) {
        return this.api.post(`reqwithdrawalTontine/getallapprovalwithdraw`, data);
    }
    // Get all refusal request from a withdrawal 
    getAllRefusalRequest(data) {
        return this.api.post(`reqwithdrawalTontine/getallrefusalwithdraw`, data);
    }
    // Approve a request for request withdrawal
    approveWithdrawalRequest(data) {
        return this.api.post(`reqwithdrawalTontine/approvalwithdraw`, data);
    }
    // Deny a withdrawal request
    denyWithdrawalRequest(data) {
        return this.api.post(`reqwithdrawalTontine/denywithdraw`, data);
    }
    /* Make deposit with cash*/
    makeDepositWithCash(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`tontine/wallet/v1/save/deposit/withCash/${this.token}`, data);
    }
};
WalletTontineService.ctorParameters = () => [
    { type: src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_3__["UserService"] },
    { type: src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_2__["ApiService"] },
    { type: src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_4__["EventService"] }
];
WalletTontineService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], WalletTontineService);



/***/ }),

/***/ "14LV":
/*!******************************************************!*\
  !*** ./src/app/shared/service/form-utils.service.ts ***!
  \******************************************************/
/*! exports provided: FormUtilsService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormUtilsService", function() { return FormUtilsService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");


let FormUtilsService = class FormUtilsService {
    constructor() { }
    // Get the troncate name
    troncateName(value, nbDigit) {
        return value && value.length < nbDigit ? value : value ? value.substring(0, nbDigit) + '...' : '';
    }
    // Remove space
    removeSpace(inputData) {
        const input = String(inputData);
        return input.replace(/\s/g, "");
    }
    validateEmail(myEmail) {
        const regex = /^[a-zA-Z0-9._-]+@[a-z0-9._-]{2,}[.][a-z]{2,4}$/;
        if (!regex.test(myEmail)) {
            return false;
        }
        else {
            return true;
        }
    }
    validatePhone(myPhone) {
        const regex = /^[0-9]{6,13}$/;
        if (!regex.test(myPhone)) {
            return false;
        }
        else {
            return true;
        }
    }
    validatePin(myPin) {
        const regex = /^[0-9]{5}$/;
        if (!regex.test(myPin)) {
            return false;
        }
        else {
            return true;
        }
    }
    validateMisaPrix(miseAprix) {
        const regex = /^[0-9]+$/;
        if (!regex.test(miseAprix)) {
            return false;
        }
        else {
            return true;
        }
    }
    // Get a random id
    getRandomId() {
        let text = 'M';
        const possible = 'ABCDEFGHJKLMPQRSTUVWXYZabcdefghjklmpqrstuvwxyz';
        const chiffre = '0123456789';
        for (let i = 0; i <= 5; i++) {
            text += chiffre.charAt(Math.floor(Math.random() * chiffre.length));
        }
        return text;
    }
    // Format phone number
    formatPhoneNumber(phoneNumberString, prefix) {
        let phone = phoneNumberString;
        if (prefix === '237') {
            phone = ('' + phoneNumberString).replace(/\B(?=(\d{2})+(?!\d))/g, " ");
        }
        else if (prefix === '27') {
            phone = ('' + phoneNumberString).replace(/\B(?=(\d{2})+(?!\d))/g, " ");
            const codePhone = phone.split(' ');
            if (codePhone && codePhone.length > 2) {
                let phonePrex = codePhone[0] + codePhone[1] + codePhone[2];
                phonePrex = phonePrex.replace(/\B(?=(\d{3})+(?!\d))/g, " ");
                codePhone.splice(0, 3);
                while (codePhone.length) {
                    phonePrex += ' ' + codePhone.splice(0, 1);
                }
                phone = phonePrex;
            }
        }
        return phone;
    }
};
FormUtilsService.ctorParameters = () => [];
FormUtilsService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], FormUtilsService);



/***/ }),

/***/ "1H77":
/*!***************************************************************!*\
  !*** ./src/app/shared/select-data/select-data.component.scss ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzZWxlY3QtZGF0YS5jb21wb25lbnQuc2NzcyJ9 */");

/***/ }),

/***/ "2+UW":
/*!***************************************************!*\
  !*** ./src/app/shared/service/storage.service.ts ***!
  \***************************************************/
/*! exports provided: StorageData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageData", function() { return StorageData; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _ionic_storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ionic/storage */ "e8h1");



let StorageData = class StorageData {
    constructor(storage) {
        this.storage = storage;
    }
    set(key, value) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            yield this.storage.set(key, value);
        });
    }
    get(key) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            return yield this.storage.get(key);
        });
    }
    remove(key) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            yield this.storage.remove(key);
        });
    }
};
StorageData.ctorParameters = () => [
    { type: _ionic_storage__WEBPACK_IMPORTED_MODULE_2__["Storage"] }
];
StorageData = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], StorageData);



/***/ }),

/***/ "3PYJ":
/*!**************************************************!*\
  !*** ./src/app/shared/pipes/filter-data.pipe.ts ***!
  \**************************************************/
/*! exports provided: FilterDataPipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FilterDataPipe", function() { return FilterDataPipe; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");


let FilterDataPipe = class FilterDataPipe {
    transform(items, value, label) {
        if (!items)
            return [];
        if (!value)
            return items;
        if (value == '' || value == null)
            return [];
        if (label == "title") {
            return items.filter((e) => e.title.toLowerCase().indexOf(value) > -1);
        }
        if (label == "NAMES") {
            return items.filter((e) => e.NAMES.toLowerCase().indexOf(value) > -1);
        }
    }
};
FilterDataPipe = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"])({
        name: 'filterdata'
    })
], FilterDataPipe);



/***/ }),

/***/ "4BT3":
/*!*******************************************************!*\
  !*** ./src/app/shared/cashmode/cashmode.component.ts ***!
  \*******************************************************/
/*! exports provided: CashmodeComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CashmodeComponent", function() { return CashmodeComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_cashmode_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./cashmode.component.html */ "5fV2");
/* harmony import */ var _cashmode_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cashmode.component.scss */ "iKfZ");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var _service_error_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../service/error.service */ "TkUd");
/* harmony import */ var src_app_dashboard_my_tontines_services_debts_manager_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/debts-manager.service */ "ijC1");
/* harmony import */ var src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/tontine.service */ "/WEl");
/* harmony import */ var _service_payment_error_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../service/payment-error.service */ "FLu1");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../service/events.service */ "r5fM");
/* harmony import */ var _service_ui_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../service/ui.service */ "QB/Y");












let CashmodeComponent = class CashmodeComponent {
    constructor(fb, translate, event, tontine, error, debt, ui, paymentError) {
        this.fb = fb;
        this.translate = translate;
        this.event = event;
        this.tontine = tontine;
        this.error = error;
        this.debt = debt;
        this.ui = ui;
        this.paymentError = paymentError;
        this.loadingPay = false;
        this.currentTontine = this.tontine.getCurrentTontineData();
    }
    ngOnInit() {
        this.initFormMessage();
        this.initCashPayment();
    }
    // Getters
    get amount() {
        return this.paymentForm.get('amount');
    }
    // Init form
    initFormMessage() {
        this.translate.get(['DEBT_AMOUNT_REQUIRED_TEXT']).subscribe(trans => {
            this.validationMessages = {
                amount: [
                    { type: 'required', message: trans.DEBT_AMOUNT_REQUIRED_TEXT }
                ]
            };
        });
    }
    // Init traditional banking payment
    initCashPayment() {
        const params = this.debt.getDebtsData();
        const items = params.items;
        const itemsParams = [];
        items.forEach(item => {
            itemsParams.push({ seance_id: item.seance_id, numero_part: item.numero_part, montant: item.montant, typecontribution_id: item.typecontribution_id });
        });
        this.paymentForm = this.fb.group({
            reference_facture: [params.facture ? params.facture.reference : ''],
            device_id: [params.facture ? params.facture.device_id : ''],
            montant_total_facture: [params.facture ? params.facture.montant : 0],
            currency: [params.facture ? params.facture.device_name : 0],
            amount: [this.balance, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].min(1)])],
            liste_item: [itemsParams, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            receipt: [''],
            liste_proof: [[]],
            tontine_id: [params.facture ? params.facture.tontine_id : '']
        });
    }
    // Make the payment
    makePayment() {
        this.paymentForm.get('liste_proof').setValue([{
                montant: this.paymentForm.value.amount,
                description: '',
                receipt: ''
            }]);
        this.loadingPay = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        this.debt.PayDueWithCash(this.paymentForm.value).subscribe((reponse) => {
            this.loadingPay = false;
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                this.translate.get('DEBT_PAYMENT_SUCCES_MSG').subscribe(trans => {
                    this.ui.presentToast(trans);
                });
                if (this.balance - this.paymentForm.value.amount === 0) {
                    this.event.publish('modal-close', { result: 'complete' });
                }
                else {
                    this.event.publish('modal-close', { result: 'partial' });
                }
            }
        }, error => {
            if (error && error.error) {
                if (error.error.user_not_found) {
                    this.error.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.makePayment();
                        }
                        else {
                            this.ui.dismissLoading();
                            this.loadingPay = false;
                        }
                    });
                }
                else {
                    this.loadingPay = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOfflineError(error);
                }
            }
            else {
                this.loadingPay = false;
                this.ui.dismissLoading();
                this.error.manageError(error);
            }
        });
    }
};
CashmodeComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_5__["TranslateService"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_10__["EventService"] },
    { type: src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_8__["TontineService"] },
    { type: _service_error_service__WEBPACK_IMPORTED_MODULE_6__["ErrorService"] },
    { type: src_app_dashboard_my_tontines_services_debts_manager_service__WEBPACK_IMPORTED_MODULE_7__["DebtsManagerService"] },
    { type: _service_ui_service__WEBPACK_IMPORTED_MODULE_11__["UiService"] },
    { type: _service_payment_error_service__WEBPACK_IMPORTED_MODULE_9__["PaymentErrorService"] }
];
CashmodeComponent.propDecorators = {
    amountPay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    balance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};
CashmodeComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-cashmode',
        template: _raw_loader_cashmode_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_cashmode_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], CashmodeComponent);



/***/ }),

/***/ "4M3e":
/*!*****************************************************!*\
  !*** ./src/app/shared/prefix/prefix.component.scss ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcmVmaXguY29tcG9uZW50LnNjc3MifQ== */");

/***/ }),

/***/ "5JTu":
/*!***************************************************!*\
  !*** ./src/app/shared/prefix/prefix.component.ts ***!
  \***************************************************/
/*! exports provided: PrefixComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrefixComponent", function() { return PrefixComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_prefix_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./prefix.component.html */ "DIQh");
/* harmony import */ var _prefix_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prefix.component.scss */ "4M3e");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var src_app_shared_service_location_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/shared/service/location.service */ "e009");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _service_util_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../service/util.service */ "6wVa");







let PrefixComponent = class PrefixComponent {
    constructor(location, util, modal) {
        this.location = location;
        this.util = util;
        this.modal = modal;
        this.filterData = [];
        this.states = [];
        this.loading = false;
        this.filter = false;
        this.allData = [];
        this.nbItems = 15;
    }
    ngOnInit() {
        this.loading = true;
        this.getWordCountries(false, null);
    }
    // Filter the list of tontines
    searchForInvitation(ev) {
        this.infiniteScroll.disabled = false;
        this.filter = true;
        const val = ev.target.value;
        if (val && val.trim() !== '') {
            this.allData = this.filterData.filter((country) => {
                return (country.country_label.toLowerCase().indexOf(val.toLowerCase()) > -1);
            });
            if (this.allData.length > this.nbItems) {
                for (let i = 0; i < this.nbItems; i++) {
                    this.states.push(this.allData[this.states.length]);
                }
            }
            else {
                this.states = this.allData;
            }
        }
        else {
            this.states = this.filterData;
        }
    }
    // Get all the word countries
    getWordCountries(refresh, event) {
        this.location.getWordCountries(refresh).then((countries) => {
            if (countries && countries.length > 0) {
                const states = this.util.orderByKey(countries, 'country_label');
                this.allData = states;
                this.filterData = states;
                if (this.allData.length > this.nbItems) {
                    for (let i = 0; i < this.nbItems; i++) {
                        this.states.push(this.allData[this.states.length]);
                    }
                }
                else {
                    this.states = this.allData;
                }
            }
            if (event) {
                setTimeout(() => {
                    event.target.complete();
                }, 200);
            }
            this.loading = false;
        });
    }
    // Refresh the list
    refreSher(event) {
        this.infiniteScroll.disabled = false;
        this.getWordCountries(true, event);
    }
    // Infinite scroll data
    infinteScrollData(event) {
        setTimeout(() => {
            for (let i = 0; i < this.nbItems; i++) {
                if (this.states.length < this.allData.length) {
                    this.states.push(this.allData[this.states.length]);
                }
                else if (this.states.length === this.allData.length) {
                    event.target.disabled = true;
                }
            }
            event.target.complete();
        }, 2000);
    }
    // select a country
    selectCountry(event) {
        this.modal.dismiss(event.detail.value, 'select');
    }
    // close modal
    closeCountries() {
        this.modal.dismiss(null, 'cancel');
    }
};
PrefixComponent.ctorParameters = () => [
    { type: src_app_shared_service_location_service__WEBPACK_IMPORTED_MODULE_4__["LocationService"] },
    { type: _service_util_service__WEBPACK_IMPORTED_MODULE_6__["UtilService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_5__["ModalController"] }
];
PrefixComponent.propDecorators = {
    infiniteScroll: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: [_ionic_angular__WEBPACK_IMPORTED_MODULE_5__["IonInfiniteScroll"], { static: false },] }]
};
PrefixComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-prefix',
        template: _raw_loader_prefix_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_prefix_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], PrefixComponent);



/***/ }),

/***/ "5fV2":
/*!***********************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/cashmode/cashmode.component.html ***!
  \***********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<form [formGroup]=\"paymentForm\">\r\n  <ion-grid>\r\n    <ion-row>\r\n      <ion-col size=\"12\">        \r\n        <ion-card class=\"paidmode\">\r\n          <ion-card-content class=\"ion-text-center\">\r\n              <ion-row class=\"ion-padding-bottom\">\r\n                <ion-col size=\"12\">\r\n                  <ion-item>\r\n                    <ion-label position=\"floating\">{{ 'AMOUNT_PAY_TEXT' | translate }}</ion-label>\r\n                    <ion-input type=\"number\" formControlName=\"amount\"></ion-input>\r\n                    <span slot=\"end\" class=\"slot-prefix ion-no-margin\"> {{ paymentForm.value.currency }} </span>\r\n                  </ion-item> \r\n                  <div class=\"validation-errors\">\r\n                    <ng-container *ngFor=\"let validation of validationMessages.amount\">\r\n                      <div class=\"error-message\" *ngIf=\"amount.hasError(validation.type) && (amount.dirty || amount.touched)\">\r\n                        <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                        {{ validation.message }}\r\n                      </div>\r\n                    </ng-container>\r\n                  </div>          \r\n                </ion-col>    \r\n              </ion-row>                            \r\n          </ion-card-content>\r\n        </ion-card>\r\n      </ion-col>      \r\n    </ion-row>\r\n    <ion-row class=\"ion-justify-content-center\">\r\n      <ion-col size=\"auto\">\r\n        <ion-button expand=\"full\" [disabled]=\"paymentForm.invalid || loadingPay\"\r\n              (click)=\"makePayment()\"\r\n              color=\"warning\" \r\n              class=\"ion-text-uppercase\"\r\n              shape=\"round\"\r\n              [class.ion-hide]=\"balance - paymentForm.value.amount === 0\"\r\n              >\r\n         {{ 'SAVE_PARTIAL_PAYMENT' | translate }}\r\n        </ion-button>\r\n        <ion-button expand=\"full\" [disabled]=\"paymentForm.invalid || loadingPay\"\r\n              (click)=\"makePayment()\"\r\n              color=\"warning\" \r\n              class=\"ion-text-uppercase\"\r\n              shape=\"round\"\r\n              [class.ion-hide]=\"balance - paymentForm.value.amount  !== 0\"\r\n              >\r\n         {{ 'SUBMIT_FOR_APPROVAL' | translate }}\r\n        </ion-button>\r\n      </ion-col>\r\n      <p class=\"ion-text-center\" *ngIf=\"loadingPay\">\r\n        <ion-spinner  name=\"circles\"></ion-spinner> \r\n      </p>\r\n    </ion-row>  \r\n  </ion-grid>\r\n  </form> \r\n  ");

/***/ }),

/***/ "68js":
/*!***************************************************************!*\
  !*** ./src/app/dashboard/my-wallet/service/wallet.service.ts ***!
  \***************************************************************/
/*! exports provided: WalletService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WalletService", function() { return WalletService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/service/api.service */ "6rCG");
/* harmony import */ var src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/shared/service/events.service */ "r5fM");
/* harmony import */ var _user_service_user_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../user/service/user.service */ "6Hie");






let WalletService = class WalletService {
    constructor(api, userService, event) {
        this.api = api;
        this.userService = userService;
        this.event = event;
        this.subject = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.token = this.userService.getUserToken();
        this.event.subscribe('new-token', token => {
            this.token = token;
        });
    }
    sendMessageWalletRecharge(message) {
        this.subject.next({ recharge: message });
    }
    getMessageWalletRecharge() {
        return this.subject.asObservable();
    }
    sendMessageAddAccount(message) {
        this.subject.next({ account: message });
    }
    getMessageAddAccount() {
        return this.subject.asObservable();
    }
    // Permit to the user to recharge his wallet without conversion
    rechargeWallet(wallet) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v1/charger/portemonnaie/' + this.token, wallet);
    }
    // Permit to the user to recharge his wallet after conversion
    rechargeWalletWithConversion(wallet) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v2/charger/portemonnaie/afterConvertDevice/' + this.token, wallet);
    }
    // Check the payment status throught Operator (MTN, orange, paypal, ozow )
    getStatusPaymentOperator(payToken, operator) {
        return this.api.get(`get/status/paiement/${operator}/${payToken}`);
    }
    // Check the payment status throught Operator (MTN, orange, paypal, ozow )
    getStatusPaymentEventOperator(payToken, operator) {
        return this.api.get(`get/status/paiementEvent/${operator}/${payToken}`);
    }
    /*======= Begin  paiement de Orange  ======*/
    // Check the payment status throught Orange
    getStatusOrangePayment(payToken) {
        return this.api.get(`get/status/paiement/orange/${payToken}`);
    }
    // Check the payment status throught Orange
    getStatusOrangePaymentEvent(payToken) {
        return this.api.get(`get/status/paiementEvent/orange/${payToken}`);
    }
    // Get all  Orange Transaction inittiate on the system
    getOrangeTransactionInitiate(payToken) {
        return this.api.get(`get/status/paiement/orange/${payToken}`);
    }
    // Check the status paymnent throught SDK GAMES SERVER
    checkPaymentStatusViaOrange(wallet) {
        return this.api.post('paygateway/orange/checkTransation', wallet);
    }
    /*======= End paiement de Orange  ======*/
    /*======= Begin paiement de Payapal  ======*/
    // Check the payment status throught Paypal
    getStatusPaypalPayment(payToken) {
        return this.api.get(`get/status/paiement/paypal/${payToken}`);
    }
    // Check the payment status throught Paypal
    getStatusPaypalPaymentEvent(payToken) {
        return this.api.get(`get/status/paiementEvent/paypal/${payToken}`);
    }
    // Get all  paypal Transaction inittiate on the system
    getPaypalTransactionInitiate(payToken) {
        return this.api.get(`get/status/paiement/paypal/${payToken}`);
    }
    // Check the status paymnent for Paypal throught SDK GAMES SERVER
    checkPaymentStatusViaPaypal(wallet) {
        return this.api.post('paygateway/paypal/checkTransation', wallet);
    }
    /*======= End Mode de paiement de Payapal  ======*/
    /*======= Begin Mode de paiement de Ozow  ======*/
    // Check the payment status throught Ozow
    getStatusOzowPayment(payToken) {
        return this.api.get(`get/status/paiement/ozow/${payToken}`);
    }
    // Check the payment event status throught Ozow
    getStatusOzowPaymentEvent(payToken) {
        return this.api.get(`get/status/paiementEvent/ozow/${payToken}`);
    }
    // Get all  Ozow Transaction inittiate on the system
    getOzowTransactionInitiate(payToken) {
        return this.api.get(`get/status/paiement/Ozow/${payToken}`);
    }
    // Check the status paymnent for Ozow throught SDK GAMES SERVER
    checkPaymentStatusViaOzow(wallet) {
        return this.api.post('paygateway/ozow/checkTransation', wallet);
    }
    /*======= End Mode de paiement de Ozow   =======*/
    /*======= Begin Mode de paiement de MTN  ======*/
    // Check the payment status throught MTN
    getStatusMtnPayment(payToken) {
        return this.api.get(`get/status/paiement/MTN/${payToken}`);
    }
    // Check the payment event status throught MTN
    getStatusMtnPaymentEvent(payToken) {
        return this.api.get(`get/status/paiementEvent/MTN/${payToken}`);
    }
    getMtnTransactionInitiate(payToken) {
        return this.api.get(`get/pending/payment/MTN/${payToken}`);
    }
    // Check the status paymnent for mtn throught SDK GAMES SERVER
    checkPaymentStatusViaMtn(wallet) {
        return this.api.post('paygateway/mtn/checkTransation', wallet);
    }
    /*======= End Mode de paiement de MTN   =======*/
    /* ================== Withdrawal service ===================== */
    // save a bank profile
    saveBankProfile(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`cash/out/v1/bank/profil/save/` + this.token, data);
    }
    // save a bank profile
    updateBankProfile(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`cash/out/v1/bank/profil/update/` + this.token, data);
    }
    // save a bank profile
    DeleteBankProfile(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`cash/out/v1/bank/profil/delete/` + this.token, data);
    }
    // Get all bank
    getAllBank() {
        this.token = this.userService.getUserToken();
        return this.api.get(`cash/out/v1/get/bank/profil/` + this.token);
    }
    // Get all the detail of the bank
    getBankDetail(bankId) {
        return this.api.get(`cash/out/v1/get/infos/bank/` + bankId);
    }
    // Submit a request of bank
    submitRequest(bankInfos) {
        this.token = this.userService.getUserToken();
        return this.api.post(`cash/out/v1/request/save/` + this.token, bankInfos);
    }
};
WalletService.ctorParameters = () => [
    { type: src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_3__["ApiService"] },
    { type: _user_service_user_service__WEBPACK_IMPORTED_MODULE_5__["UserService"] },
    { type: src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_4__["EventService"] }
];
WalletService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], WalletService);



/***/ }),

/***/ "6Hie":
/*!********************************************************!*\
  !*** ./src/app/dashboard/user/service/user.service.ts ***!
  \********************************************************/
/*! exports provided: UserService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserService", function() { return UserService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/shared/service/api.service */ "6rCG");
/* harmony import */ var src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/service/events.service */ "r5fM");
/* harmony import */ var src_app_shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/shared/service/local-storage.service */ "y7ii");





let UserService = class UserService {
    constructor(api, localStorage, event) {
        this.api = api;
        this.localStorage = localStorage;
        this.event = event;
        this.token = this.getUserToken();
        this.event.subscribe('new-token', token => {
            this.token = token;
        });
    }
    // Get the current user session Language
    getCurrentUserSessionLanguage() {
        return this.localStorage.getItem('user-session-language');
    }
    // Set the current user session Language
    setCurrentUserSessionLanguage(lang) {
        this.localStorage.setItem('user-session-language', lang);
    }
    // Get the current user device
    getUserDevice() {
        return this.localStorage.getItem('user-device');
    }
    // Set the current user device
    setUserDevice(data) {
        this.localStorage.setItem('user-device', data);
    }
    // Get the current user registration Data
    getRegistrationData() {
        return this.localStorage.getItemSecure('user-registration-data');
    }
    // Set the current user registration Data
    setRegistrationData(userData) {
        this.localStorage.setItemSecure('user-registration-data', userData);
    }
    // Get the current user
    getUserData() {
        return this.localStorage.getItemSecure('user-data');
    }
    // Set the current user
    setUserData(userData) {
        this.localStorage.setItemSecure('user-data', userData);
    }
    // Get the current user payemnt method
    getUserpaymentMethod() {
        return this.localStorage.getItem('user-payment-method');
    }
    // Get the current user payemnt method
    setUserPaymentMethod(data) {
        this.localStorage.setItem('user-payment-method', data);
    }
    // Get the  user token
    getUserToken() {
        return this.localStorage.getItem('user-token');
    }
    // Get the  user token
    setUserToken(token) {
        this.localStorage.setItem('user-token', token);
    }
    // Get the  user role
    getUserRole() {
        return this.localStorage.getItem('user-role');
    }
    // Get the  user role
    setUserRole(role) {
        this.localStorage.setItem('user-role', role);
    }
    // Get the  user badge
    getUserBadge() {
        return this.localStorage.getItem('user-badge');
    }
    // Get the  user badge
    setUserBadge(badge) {
        this.localStorage.setItem('user-badge', badge);
    }
    // Get the  user credentials
    getUserSecret() {
        return this.localStorage.getItemSecure('user-credentials');
    }
    // Set the  user credentials
    setUserSecret(credentials) {
        this.localStorage.setItemSecure('user-credentials', credentials);
    }
    // update the user language
    updateUserLang(user) {
        this.token = this.getUserToken();
        return this.api.post('user/update/langue/user/' + this.token, user);
    }
    // Get the grade level of the user
    getGradeLevelUser() {
        this.token = this.getUserToken();
        return this.api.get('user/school/v1/gradelevel/' + this.token);
    }
    // Add a grade level of a user
    addGradeLevelUser(grade) {
        this.token = this.getUserToken();
        return this.api.post('user/school/v1/gradelevel/' + this.token, grade);
    }
    // Update the grade level of the user
    updateGradeLevelUser(grade) {
        this.token = this.getUserToken();
        return this.api.put('user/school/v1/gradelevel/' + this.token, grade);
    }
    // Get the user travel
    getTravellingUser() {
        this.token = this.getUserToken();
        return this.api.get('user/trip/v1/travel/' + this.token);
    }
    // add a travael to the user
    addTravellingUser(grade) {
        this.token = this.getUserToken();
        return this.api.post('user/trip/v1/trip/' + this.token, grade);
    }
    // Update the travel of the user
    updateTravellingUser(grade) {
        this.token = this.getUserToken();
        return this.api.put('user/trip/v1/trip/' + this.token, grade);
    }
    // Get the user experience
    getExperienceUser() {
        this.token = this.getUserToken();
        return this.api.get('user/experience/v1/experience/' + this.token);
    }
    // Add an experience with the user
    addExperienceUser(experience) {
        this.token = this.getUserToken();
        return this.api.post('user/experience/v1/experience/' + this.token, experience);
    }
    // Update the user experience
    updateExperienceUser(experience) {
        this.token = this.getUserToken();
        return this.api.put('user/experience/v1/experience/' + this.token, experience);
    }
    // Get the user informations
    getProfileUser() {
        this.token = this.getUserToken();
        return this.api.get('user/account/v1/profile/' + this.token);
    }
    // Get the user informations
    getProfileUserId(userId) {
        return this.api.get('/bid/v1/getProfile/' + userId);
    }
    // Update the user informations
    updateProfileUser(profile) {
        this.token = this.getUserToken();
        return this.api.put('user/account/v1/profile/' + this.token, profile);
    }
    // Send email to update user password
    sendEmailOrPassword(emailOrPhone) {
        return this.api.post('user/account/v1/code/password', emailOrPhone);
    }
    // Send the code validation
    sendCodeValidationForChangePassword(code) {
        return this.api.post('user/account/v1/confirmcode/password', code);
    }
    // Change the user password
    changeMyPassword(user) {
        return this.api.post('user/account/v1/changepassword', user);
    }
    // Get all user user payment method
    getAllMethodPaymentUser() {
        return this.api.get('user/payment/v1/methodpayment/' + this.token);
    }
    // Add the user payment metohod
    addMethodPaymentUser(methodPayment) {
        this.token = this.getUserToken();
        return this.api.post('user/payment/v1/methodpayment/' + this.token, methodPayment);
    }
    // Update user payment method
    updateMethodPaymentUser(methodPayment) {
        this.token = this.getUserToken();
        return this.api.put('user/payment/v1/methodpayment/' + this.token, methodPayment);
    }
    // get the type of paiement method
    getAllMethodPaymentType() {
        return this.api.get('payment/v1/typepayment');
    }
    // get the type of paiement method by country
    getAllMethodPaymentTypeByCountry(countryId) {
        return this.api.get('payment/v2/typepayment/' + countryId);
    }
    // Pay a tontine automatically
    payTontineAutomatically(tontines) {
        this.token = this.getUserToken();
        return this.api.post('automatic/payment/v1/from/wallet/' + this.token, tontines);
    }
    // Update the user pin 
    updateUserPin(data) {
        this.token = this.getUserToken();
        return this.api.post('user/change/pin/' + this.token, data);
    }
    // Send the device information for push notification
    sendDeviceData(data) {
        return this.api.post('onesignal/v1/add/identifier', data);
    }
    // Save the user device id for push notification
    saveUserDeviceData(data) {
        this.token = this.getUserToken();
        return this.api.post('onesignal/v1/update/device/' + this.token, data);
    }
    // request news letter
    requestNews(data) {
        return this.api.post('newsletter/get/infos', data);
    }
    // Update the user picture
    updatePicture(data) {
        this.token = this.getUserToken();
        return this.api.post('user/update/profile/' + this.token, data);
    }
    // Save the user device Id  daily
    saveDevice(params) {
        const param = this.localStorage.getItem('day-token');
        const date = param ? new Date(JSON.parse(param)) : null;
        const currentDate = new Date();
        if (!date || date && (date.getFullYear() !== currentDate.getFullYear()
            || date.getMonth() !== currentDate.getMonth()
            || date.getDate() !== currentDate.getDate())) {
            this.saveUserDeviceData(params).subscribe((ans) => {
                if (ans && ans.message === 'success') {
                    this.setUserDevice(ans.result);
                    const currentDate = new Date();
                    this.localStorage.setItem('day-token', currentDate);
                }
            }, error => { });
        }
    }
};
UserService.ctorParameters = () => [
    { type: src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_2__["ApiService"] },
    { type: src_app_shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_4__["LocalStorageService"] },
    { type: src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_3__["EventService"] }
];
UserService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], UserService);



/***/ }),

/***/ "6NmA":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/paidmode-event/paidmode-event.component.html ***!
  \***********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<form [formGroup]=\"userPayMethodForm\">\r\n  <p class=\"ion-text-center\"  *ngIf=\"loadingOperator\">\r\n    <ion-spinner  name=\"circles\"></ion-spinner>\r\n  </p>\r\n<ion-grid>\r\n  <ion-row>\r\n    <ion-col size=\"12\">\r\n      <ion-card class=\"paidmode\">\r\n        <ion-card-content class=\"ion-text-center\">    \r\n          <ion-row>\r\n            <ion-col size=\"12\">\r\n              <ion-item>\r\n                <ion-label>{{'COUNTRY_TEXT' | translate}}</ion-label>\r\n                <ion-select (ionChange)=\"updateCurrencyCountry(userPayMethodForm.value.country_id)\" formControlName=\"country_id\">\r\n                  <ion-select-option [value]=\"country.country_id\" *ngFor=\"let country of states\">{{ country.country_label }}</ion-select-option>          \r\n                </ion-select>\r\n              </ion-item>   \r\n              <div class=\"validation-errors\">\r\n                <ng-container *ngFor=\"let validation of validationMessages.country_id\">\r\n                  <div class=\"error-message\" *ngIf=\"country.hasError(validation.type) && (country.dirty || country.touched)\">\r\n                    <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                    {{ validation.message }}\r\n                  </div>\r\n                </ng-container>\r\n              </div>     \r\n            </ion-col>\r\n          </ion-row>       \r\n            <ion-row class=\"ion-justify-content-end\" *ngIf=\"userPayMethodForm.value.country_id && paymentMethods && paymentMethods.length > 0\">\r\n              <ion-col size=\"4\">\r\n                <ion-img [src]=\"paymentMethods&&paymentMethods[userPayMethodForm.value.typePaymentIndex] ? paymentMethods[userPayMethodForm.value.typePaymentIndex].logo : ' '\" class=\"logooperator\"></ion-img>\r\n              </ion-col>\r\n            </ion-row>  \r\n            <ion-row *ngIf=\"userPayMethodForm.value.country_id && paymentMethods && paymentMethods.length > 0\">\r\n              <ion-col size=\"12\">\r\n                <ion-item>\r\n                  <ion-label>{{ 'USER_PROFILE_TEXT4' | translate }}</ion-label>\r\n                  <ion-select (ionChange)=\"updatePaymentMethod(userPayMethodForm.value.typePaymentIndex)\" formControlName=\"typePaymentIndex\">\r\n                    <ion-select-option *ngFor=\"let operator of paymentMethods; let operatorId = index\" [value]=\"operatorId\">{{ operator.name }}</ion-select-option>           \r\n                  </ion-select>\r\n                </ion-item>   \r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.payementtype\">\r\n                    <div class=\"error-message\" *ngIf=\"payementtype.hasError(validation.type) && (payementtype.dirty || payementtype.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>   \r\n              </ion-col>\r\n            </ion-row> \r\n            <ion-row *ngIf=\"checkMobileOperator()\">\r\n              <ion-col size=\"4\">\r\n                <ion-item >\r\n                  <ion-label position=\"floating\">+</ion-label>\r\n                  <ion-input placeholder=\"{{userPayMethodForm.value.country_prefix}}\" type=\"text\"></ion-input>\r\n                </ion-item>        \r\n              </ion-col>\r\n              <ion-col size=\"8\">\r\n                <ion-item  >\r\n                  <ion-label position=\"floating\">{{ 'REGISTER_MPHONE' | translate }}</ion-label>\r\n                  <ion-input (ionChange)=\"checckEmailOrPhone(userPayMethodForm.value.phone,userPayMethodForm.value.typePaymentIndex)\" type=\"tel\" formControlName=\"phone\"></ion-input>\r\n                </ion-item> \r\n              </ion-col>\r\n              <ion-col size=\"12\" *ngIf=\"errorPhone\">\r\n                <div class=\"validation-errors\" >\r\n                  <div class=\"error-message\">\r\n                    <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                    <span [innerHTML]=\"'USER_DETAIL_TEXT11' | translate\"></span>\r\n                  </div>\r\n              </div>          \r\n              </ion-col>\r\n            </ion-row> \r\n            <ion-row class=\"ion-padding-bottom\">\r\n              <ion-col size=\"12\">\r\n                <ion-item>\r\n                  <ion-label position=\"floating\" >{{ 'AMOUNT_TEXT' | translate }}</ion-label>\r\n                  <ion-input  (ionChange)=\"updatePaypalAmount()\" type=\"number\" formControlName=\"montant\"></ion-input>\r\n                  <span slot=\"end\" class=\"slot-prefix ion-no-margin\"> {{ contributionData.device_name }} </span>\r\n                </ion-item> \r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.amount\">\r\n                    <div class=\"error-message\" *ngIf=\"montantContributeError.hasError(validation.type) && (montantContributeError.dirty || montantContributeError.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>          \r\n              </ion-col>\r\n            </ion-row>\r\n            <ion-row  *ngIf=\"canShowPaypalMessage()\">\r\n              <ion-col>\r\n                <div class=\"padding\">\r\n                <p style=\"color: red\">{{paypalMessage}}</p>\r\n              </div>\r\n              </ion-col>\r\n            </ion-row>\r\n            <ion-row>\r\n              <ion-col>\r\n                <ion-item lines=\"none\">                \r\n                  <ion-toggle  formControlName=\"anonym\"></ion-toggle>\r\n                  <ion-label>{{ 'ANONYM_TEXT' | translate }}</ion-label>\r\n                </ion-item>\r\n              </ion-col>\r\n            </ion-row>                           \r\n        </ion-card-content>\r\n      </ion-card>\r\n    </ion-col>      \r\n  </ion-row>\r\n  <ion-row>\r\n    <svg height=\"0\" width=\"0\" viewBox=\"0 0 27.7 28.93\">\r\n      <defs>\r\n        <clipPath id=\"pay-btn-shape1\" >\r\n          <path d=\"M2.57,17.21A11.18,11.18,0,0,1,9.17,5.77h.06l.17-.22.11-.23c-1-.73-1.56-1.42-1.39-2,.42-1.32,5-1.17,10.22.33S27.43,7.47,27,8.81c-.16.48-.86.76-1.88.86h0v.1a5,5,0,0,0,.08.66,3.77,3.77,0,0,0,.1.46l.07.23c2,4,1.7,8.37-1.73,12.53a12.23,12.23,0,0,1-18.42-.1A11.55,11.55,0,0,1,2.57,17.21Z\" />            \r\n        </clipPath>        \r\n      </defs>\r\n    </svg>\r\n    <ion-col size=\"12\" class=\"ion-text-center wrap-pay-btn\" *ngIf=\"canPayWithPaypal()\"  (click)=\"showPayment(userPayMethodForm.value)\">\r\n      <svg id=\"pay-btn1\" preserveAspectRatio=\"xMidYMid slice\" viewBox=\"0 0 27.7 28.93\">\r\n        <path  class=\"arc-part\" d=\"M5.91,6.89a12.25,12.25,0,0,0-4.14,9.27,11.14,11.14,0,0,0,.16,1.7,12.82,12.82,0,0,0,.42,1.66c.08.27.19.54.29.8A8.24,8.24,0,0,0,3,21.1a14.85,14.85,0,0,0,.82,1.5,12.25,12.25,0,0,0,3.5,3.62,13.49,13.49,0,0,0,8,2.21,15.81,15.81,0,0,0,1.7-.17,13.74,13.74,0,0,0,1.69-.37,12.79,12.79,0,0,0,5.65-3.5,11.63,11.63,0,0,0,1.88-2.83,12.11,12.11,0,0,0,1.06-3.27,11,11,0,0,0-.94-6.84A10.42,10.42,0,0,1,27.23,13a10.65,10.65,0,0,1,.63,1.71,11.3,11.3,0,0,1,.22,3.64,12.78,12.78,0,0,1-.94,3.56,12.11,12.11,0,0,1-1.88,3.17,12.84,12.84,0,0,1-1.31,1.33,13.32,13.32,0,0,1-1.49,1.12,14,14,0,0,1-3.37,1.59,13,13,0,0,1-1.82.43,17.17,17.17,0,0,1-1.88.21,14.31,14.31,0,0,1-3.77-.27,14.55,14.55,0,0,1-5.12-2.19,11.53,11.53,0,0,1-1.41-1.17A13.92,13.92,0,0,1,.92,18a10.3,10.3,0,0,1-.08-1.88A12.36,12.36,0,0,1,3.31,9.34,10.42,10.42,0,0,1,5.91,6.89ZM7.27,3.35a1.52,1.52,0,0,1-.08-.78,1.82,1.82,0,0,1,.32-.76A2.29,2.29,0,0,1,9,1,6.31,6.31,0,0,1,9.78.89h2.36a25.76,25.76,0,0,1,6.19,1,23.94,23.94,0,0,1,5.74,2.5,20.58,20.58,0,0,1,2.56,1.83,3.84,3.84,0,0,1,1,1.27,1.29,1.29,0,0,1,.08.84,1.24,1.24,0,0,1-.47.64,1.21,1.21,0,0,0,.29-.67,1,1,0,0,0-.21-.65,3.64,3.64,0,0,0-1.07-.94c-.86-.53-1.75-1-2.66-1.47A34.29,34.29,0,0,0,18,3.06,38.16,38.16,0,0,0,12,1.84c-.5-.06-1-.11-1.52-.15l-.73-.13a6.42,6.42,0,0,0-.73,0A1.88,1.88,0,0,0,7.77,2,1.57,1.57,0,0,0,7.27,3.35Z\" />\r\n        <g class=\"pay-btn-border\">\r\n          <rect x=\"1.35\" y=\"0.56\" width=\"25.09\" height=\"26.44\" class=\"inner-pot\" />\r\n        </g>\r\n        <path class=\"pot-entry\" d=\"M22,6.27c-1.13-.38-2.45-.85-3.86-1.22-1-.28-2.17-.57-3.11-.75-2.64-.47-4.52-.57-4.62-.09-.09.19.19.57.75.85A24.19,24.19,0,0,0,17.46,7.4a22.19,22.19,0,0,0,7.07,1.13c.38-.09.66-.19.66-.28C25.32,7.9,24.05,7.15,22,6.27Z\" />\r\n        <text class=\"pay-text\"><tspan style=\"letter-spacing: -0.05859375em\">P</tspan><tspan x=\"4.94\" y=\"0\" style=\"letter-spacing: -0.087890625em\">A</tspan><tspan x=\"10.56\" y=\"0\">Y</tspan></text>\r\n      </svg>     \r\n      <div class=\"glow-wrap\">\r\n        <i class=\"glow\"></i>\r\n      </div>          \r\n    </ion-col>\r\n  </ion-row> \r\n  <ion-row  *ngIf=\"paypalLoading\">\r\n    <ion-col>\r\n      <p class=\"ion-text-center ion-padding\">\r\n        <ion-spinner  name=\"circles\"></ion-spinner>\r\n      </p>\r\n    </ion-col>\r\n  </ion-row> \r\n  <ion-row *ngIf=\"canShowPaypalButton()\">\r\n    <ion-col class=\"ion-padding\" size=\"12\">\r\n      <div #paypalbuttoncontainer id=\"paypal-button-container\"></div> \r\n    </ion-col>\r\n  </ion-row>  \r\n</ion-grid>\r\n</form> \r\n");

/***/ }),

/***/ "6rCG":
/*!***********************************************!*\
  !*** ./src/app/shared/service/api.service.ts ***!
  \***********************************************/
/*! exports provided: ApiService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApiService", function() { return ApiService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "tk/3");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ionic/angular */ "TEn/");




let ApiService = class ApiService {
    constructor(http, toastController, loadingController, alertController) {
        this.http = http;
        this.toastController = toastController;
        this.loadingController = loadingController;
        this.alertController = alertController;
        this.isLoadingShow = false;
        this.baseUrl = 'https://dev.toupesu.com/toupesu_v2_0/'; //  'https://api.toupesu.com/' ;  //  
    }
    getJSON() {
        return this.http.get('assets/i18n/en.json');
    }
    get(path) {
        return this.http.get(this.baseUrl + path);
    }
    post(path, body, options) {
        return this.http.post(this.baseUrl + path, body, options);
    }
    put(path, body, options) {
        return this.http.put(this.baseUrl + path, body, options);
    }
    delete(path, options) {
        return this.http.delete(this.baseUrl + path, options);
    }
    patch(path, body, options) {
        return this.http.patch(this.baseUrl + path, body, options);
    }
    head(path, options) {
        return this.http.head(this.baseUrl + path, options);
    }
    jsonp(path, callbackParam) {
        return this.http.jsonp(this.baseUrl + path, callbackParam);
    }
};
ApiService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["ToastController"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["LoadingController"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["AlertController"] }
];
ApiService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], ApiService);



/***/ }),

/***/ "6wVa":
/*!************************************************!*\
  !*** ./src/app/shared/service/util.service.ts ***!
  \************************************************/
/*! exports provided: UtilService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UtilService", function() { return UtilService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");


let UtilService = class UtilService {
    constructor() {
    }
    // Format an array to matrix and can be used for pagination
    formatArrayToMatrix(arraydata, nbElements) {
        const nbres = arraydata.length;
        const nbIter = Math.ceil(nbres / nbElements);
        const matrix = [];
        let subMatrix = [];
        let index = 0;
        let j = 0;
        while (index < nbIter) {
            subMatrix = [], j = 0;
            while (j < nbElements) {
                if (index * nbElements + j < nbres) {
                    subMatrix.push(arraydata[index * nbElements + j]);
                }
                j++;
            }
            if (subMatrix.length > 0) {
                matrix.push(subMatrix);
            }
            index++;
        }
        return matrix;
    }
    oderByTontineDate(tontineList) {
        if (tontineList && tontineList.length > 0) {
            let i = 0;
            let temp;
            while (i < tontineList.length) {
                for (let j = i + 1; j < tontineList.length; j++) {
                    if (tontineList[i].tontine.created_at < tontineList[j].tontine.created_at) {
                        temp = tontineList[j];
                        tontineList[j] = tontineList[i];
                        tontineList[i] = temp;
                    }
                }
                i++;
            }
        }
        else {
            return [];
        }
        return tontineList;
    }
    oderByUpdatedAt(dataList) {
        if (dataList && dataList.length > 0) {
            let i = 0;
            let temp;
            while (i < dataList.length) {
                for (let j = i + 1; j < dataList.length; j++) {
                    if (dataList[i].updated_at < dataList[j].updated_at) {
                        temp = dataList[j];
                        dataList[j] = dataList[i];
                        dataList[i] = temp;
                    }
                }
                i++;
            }
        }
        else {
            return [];
        }
        return dataList;
    }
    oderByFactureDate(data) {
        if (data && data.length > 0) {
            let i = 0;
            let temp;
            while (i < data.length) {
                for (let j = i + 1; j < data.length; j++) {
                    if (data[i].facture.created_at < data[j].facture.created_at) {
                        temp = data[j];
                        data[j] = data[i];
                        data[i] = temp;
                    }
                }
                i++;
            }
        }
        else {
            return [];
        }
        return data;
    }
    orderBySeanceKeyUp(data) {
        if (data && data.length > 0) {
            let i = 0;
            let temp;
            while (i < data.length) {
                for (let j = i + 1; j < data.length; j++) {
                    if (data[i].infos_seance.updated_at < data[j].infos_seance.updated_at) {
                        temp = data[j];
                        data[j] = data[i];
                        data[i] = temp;
                    }
                }
                i++;
            }
        }
        else {
            return [];
        }
        return data;
    }
    oderBySeanceDate(data) {
        if (data && data.length > 0) {
            let i = 0;
            let temp;
            while (i < data.length) {
                for (let j = i + 1; j < data.length; j++) {
                    if (data[i].seance.date_debut < data[j].seance.date_debut) {
                        temp = data[j];
                        data[j] = data[i];
                        data[i] = temp;
                    }
                }
                i++;
            }
        }
        else {
            return [];
        }
        return data;
    }
    oderByNotificationDate(tontineList) {
        if (tontineList && tontineList.length > 0) {
            let i = 0;
            let temp;
            while (i < tontineList.length) {
                for (let j = i + 1; j < tontineList.length; j++) {
                    if (tontineList[i].created_at < tontineList[j].created_at) {
                        temp = tontineList[j];
                        tontineList[j] = tontineList[i];
                        tontineList[i] = temp;
                    }
                }
                i++;
            }
        }
        else {
            return [];
        }
        return tontineList;
    }
    orderByTontineEventDate(tontineList) {
        if (tontineList && tontineList.length > 0) {
            let i = 0;
            let temp;
            while (i < tontineList.length) {
                for (let j = i + 1; j < tontineList.length; j++) {
                    if (tontineList[i].created_at < tontineList[j].created_at) {
                        temp = tontineList[j];
                        tontineList[j] = tontineList[i];
                        tontineList[i] = temp;
                    }
                }
                i++;
            }
        }
        else {
            return [];
        }
        return tontineList;
    }
    occurenceOfId(dataList, key, id) {
        let occur = 0;
        let i = 0;
        while (i < dataList.length) {
            if (dataList[i][key] === id) {
                occur++;
            }
            i++;
        }
        return occur;
    }
    occurenceIndex(dataList, key, id) {
        let indexList = [];
        let i = 0;
        while (i < dataList.length) {
            if (dataList[i][key] === id) {
                indexList.push(i);
            }
            i++;
        }
        return indexList;
    }
    removeIdOccurence(dataList, key, id) {
        let i = 0;
        let found = false;
        while (i < dataList.length && !found) {
            if (dataList[i][key] === id) {
                dataList.splice(i, 1);
                found = true;
            }
            i++;
        }
        return dataList;
    }
    occurenceMax(dataList) {
        let max = dataList[0];
        let i = 0;
        for (let j = i + 1; j < dataList.length; j++) {
            if (max < dataList[j]) {
                max = dataList[j];
            }
        }
        return max;
    }
    orderByKey(dataList, key) {
        if (dataList && dataList.length > 0) {
            let i = 0;
            let temp;
            while (i < dataList.length) {
                for (let j = i + 1; j < dataList.length; j++) {
                    if (dataList[i][key] >= dataList[j][key]) {
                        temp = dataList[j];
                        dataList[j] = dataList[i];
                        dataList[i] = temp;
                    }
                }
                i++;
            }
        }
        else {
            return [];
        }
        return dataList;
    }
    orderByKeyUp(dataList, key) {
        if (dataList && dataList.length > 0) {
            let i = 0;
            let temp;
            while (i < dataList.length) {
                for (let j = i + 1; j < dataList.length; j++) {
                    if (dataList[i][key] < dataList[j][key]) {
                        temp = dataList[j];
                        dataList[j] = dataList[i];
                        dataList[i] = temp;
                    }
                }
                i++;
            }
        }
        else {
            return [];
        }
        return dataList;
    }
    orderByKeyDown(dataList, key) {
        if (dataList && dataList.length > 0) {
            let i = 0;
            let temp;
            while (i < dataList.length) {
                for (let j = i + 1; j < dataList.length; j++) {
                    if (dataList[i][key] >= dataList[j][key]) {
                        temp = dataList[j];
                        dataList[j] = dataList[i];
                        dataList[i] = temp;
                    }
                }
                i++;
            }
        }
        else {
            return [];
        }
        return dataList;
    }
    orderByObjetKeyUp(dataList, objet, key) {
        if (dataList && dataList.length > 0) {
            let i = 0;
            let temp;
            while (i < dataList.length) {
                for (let j = i + 1; j < dataList.length; j++) {
                    if (dataList[i][objet][key] < dataList[j][objet][key]) {
                        temp = dataList[j];
                        dataList[j] = dataList[i];
                        dataList[i] = temp;
                    }
                }
                i++;
            }
        }
        else {
            return [];
        }
        return dataList;
    }
    orderByObjetKeyDown(dataList, objet, key) {
        if (dataList && dataList.length > 0) {
            let i = 0;
            let temp;
            while (i < dataList.length) {
                for (let j = i + 1; j < dataList.length; j++) {
                    if (dataList[i][objet][key] >= dataList[j][objet][key]) {
                        temp = dataList[j];
                        dataList[j] = dataList[i];
                        dataList[i] = temp;
                    }
                }
                i++;
            }
        }
        else {
            return [];
        }
        return dataList;
    }
    orderByKeyUpTime(dataList, key) {
        if (dataList && dataList.length > 0) {
            let i = 0;
            let temp;
            while (i < dataList.length) {
                for (let j = i + 1; j < dataList.length; j++) {
                    if (dataList[i][key][0] && (dataList[i][key][0].heures < dataList[j][key][0].heures)) {
                        temp = dataList[j];
                        dataList[j] = dataList[i];
                        dataList[i] = temp;
                    }
                }
                i++;
            }
        }
        else {
            return [];
        }
        return dataList;
    }
    orderByPosition(dataList) {
        if (dataList && dataList.length > 0) {
            let i = 0;
            let temp;
            while (i < dataList.length) {
                for (let j = i + 1; j < dataList.length; j++) {
                    if (dataList[i].settings.position >= dataList[j].settings.position) {
                        temp = dataList[j];
                        dataList[j] = dataList[i];
                        dataList[i] = temp;
                    }
                }
                i++;
            }
        }
        else {
            return [];
        }
        return dataList;
    }
};
UtilService.ctorParameters = () => [];
UtilService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], UtilService);



/***/ }),

/***/ "8N1Y":
/*!**********************************************************************!*\
  !*** ./src/app/dashboard/invitations/service/invitations.service.ts ***!
  \**********************************************************************/
/*! exports provided: InvitationsService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InvitationsService", function() { return InvitationsService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/shared/service/api.service */ "6rCG");
/* harmony import */ var _user_service_user_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../user/service/user.service */ "6Hie");
/* harmony import */ var src_app_shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/shared/service/local-storage.service */ "y7ii");
/* harmony import */ var src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/shared/service/events.service */ "r5fM");






let InvitationsService = class InvitationsService {
    constructor(api, userService, event, localStorage) {
        this.api = api;
        this.userService = userService;
        this.event = event;
        this.localStorage = localStorage;
        this.token = this.userService.getUserToken();
        this.event.subscribe('new-token', token => {
            this.token = token;
        });
    }
    // send the debts Data
    sendData(data) {
        this.localStorage.setItem('invitation-data', data);
    }
    // Get the debts Data
    getData() {
        return this.localStorage.getItem('invitation-data');
    }
    /*===== Routes for invitations ========*/
    // Send the tontine invitation by an admin
    sendInvitationTontine(invitation, userId) {
        return this.api.post('tontine/v1/invitation/members/' + userId, invitation);
    }
    // Accept the admin  invitation to join the tontine
    acceptInvitationTontine(invitation) {
        return this.api.post('tontine/v1/invitation/member/acceptJoinTontine', invitation);
    }
    // Accept the admin  invitation to join the tontine with token 
    acceptInvitationTontineWithToken(invitation) {
        const token = this.userService.getUserToken();
        return this.api.post(`tontine/v1/invitation/member/acceptJoinTontineToken/${token}`, invitation);
    }
    // cancel the admin invitation
    cancelInvitation(invitation) {
        return this.api.post('tontine/v1/invitation/member/refuseJoinTontine', invitation);
    }
    // cancel the admin invitation with token
    cancelInvitationWithToken(invitation) {
        const token = this.userService.getUserToken();
        return this.api.post(`tontine/v1/invitation/member/refuseJoinTontineToken/${token}`, invitation);
    }
    // Get the invitation with status pending
    getpendingInvitations(tontineId, adminId) {
        return this.api.get('tontine/v1/invitation/member/pending/' + tontineId + '/' + adminId);
    }
    // Get the invitations with status requested
    getRequestedInvitations(tontineId, adminId) {
        return this.api.get('tontine/v1/invitation/member/requested/' + tontineId + '/' + adminId);
    }
    // Get the list of invitations rejected by user
    getInvitationsRejectedbyUser(tontineId, adminId) {
        return this.api.get('tontine/v1/invitation/member/rejected/' + tontineId + '/' + adminId);
    }
    // cancel the guest invitation sent by a member
    cancelguestInvitation(userId, invitation) {
        return this.api.post('tontine/v1/invitation/admin_tontine/refuseJoin/' + userId, invitation);
    }
    // accept the guest invitation sent by a member
    acceptguestInvitation(userId, invitation) {
        return this.api.post('tontine/v1/invitation/admin_tontine/acceptJoin/' + userId, invitation);
    }
    // Get the tontine invitation code
    getInvitationCode(userId, invitation) {
        return this.api.post('tontine/v1/invitation/admin_tontine/resendCode/' + userId, invitation);
    }
    // Get all invitations
    getAllInvitation(tontineId, adminId) {
        return this.api.get(`tontine/v1/invitation/member/all/${tontineId}/${adminId}`);
    }
    // Delete the invitation
    deleteInvitation(invitation) {
        this.token = this.userService.getUserToken();
        return this.api.post('tontine/v1/invitation/remove/entry/' + this.token, invitation);
    }
    // Get the list of invitation send
    getInvitations() {
        this.token = this.userService.getUserToken();
        if (this.token) {
            return this.api.get('tontine/v1/my/invitation/member/all/' + this.token);
        }
    }
};
InvitationsService.ctorParameters = () => [
    { type: src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_2__["ApiService"] },
    { type: _user_service_user_service__WEBPACK_IMPORTED_MODULE_3__["UserService"] },
    { type: src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_5__["EventService"] },
    { type: src_app_shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_4__["LocalStorageService"] }
];
InvitationsService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], InvitationsService);



/***/ }),

/***/ "8TOD":
/*!*********************************************************************!*\
  !*** ./src/app/shared/paidmode-event/paidmode-event.component.scss ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwYWlkbW9kZS1ldmVudC5jb21wb25lbnQuc2NzcyJ9 */");

/***/ }),

/***/ "9xGT":
/*!*****************************************************!*\
  !*** ./src/app/shared/pipes/counter-format.pipe.ts ***!
  \*****************************************************/
/*! exports provided: CounterFormatPipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CounterFormatPipe", function() { return CounterFormatPipe; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");


let CounterFormatPipe = class CounterFormatPipe {
    transform(value) {
        if (!value) {
            return 0 + "J " + 0 + "H:" + 0 + "m:" + 0 + "s";
        }
        return Math.floor(parseInt(value) / 86400) + "J " + Math.floor((parseInt(value) % 86400) / 3600) + "H:" + Math.floor(((parseInt(value) % 86400) % 3600) / 60) + "m:" + (((parseInt(value) % 86400) % 3600) % 60) + "s";
    }
};
CounterFormatPipe = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"])({
        name: 'compteurFormat'
    })
], CounterFormatPipe);



/***/ }),

/***/ "ACRb":
/*!***********************************************************************!*\
  !*** ./src/app/shared/tontine-invited/tontine-invited.component.scss ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0b250aW5lLWludml0ZWQuY29tcG9uZW50LnNjc3MifQ== */");

/***/ }),

/***/ "AytR":
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/*! exports provided: environment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "environment", function() { return environment; });
// This file can be replaced during build by using the `fileReplacements` array.
// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.
const environment = {
    production: false
};
/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.


/***/ }),

/***/ "B4o1":
/*!*****************************************************************!*\
  !*** ./src/app/shared/paidmode-loan/paidmode-loan.component.ts ***!
  \*****************************************************************/
/*! exports provided: PaidmodeLoanComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaidmodeLoanComponent", function() { return PaidmodeLoanComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_paidmode_loan_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./paidmode-loan.component.html */ "p9Vj");
/* harmony import */ var _paidmode_loan_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./paidmode-loan.component.scss */ "vfiw");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var _service_error_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../service/error.service */ "TkUd");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _service_location_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../service/location.service */ "e009");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/tontine.service */ "/WEl");
/* harmony import */ var _service_api_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../service/api.service */ "6rCG");
/* harmony import */ var _service_currency_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../service/currency.service */ "GmDD");
/* harmony import */ var src_app_dashboard_my_wallet_service_wallet_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/dashboard/my-wallet/service/wallet.service */ "68js");
/* harmony import */ var _service_form_utils_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../service/form-utils.service */ "14LV");
/* harmony import */ var _service_payment_error_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../service/payment-error.service */ "FLu1");
/* harmony import */ var src_app_dashboard_my_tontines_tontine_detail_loans_service_loan_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! src/app/dashboard/my-tontines/tontine-detail/loans/service/loan.service */ "TH4E");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var _service_payment_global_data_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../service/payment-global-data.service */ "T8hk");
/* harmony import */ var src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! src/app/dashboard/user/service/user.service */ "6Hie");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../service/events.service */ "r5fM");
/* harmony import */ var _service_ui_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../service/ui.service */ "QB/Y");





















let PaidmodeLoanComponent = class PaidmodeLoanComponent {
    constructor(fb, userService, platform, tontine, paymentData, events, api, router, loanService, currency, formUtil, alertController, paymentError, wallet, errorService, location, translate, zone, ui) {
        this.fb = fb;
        this.userService = userService;
        this.platform = platform;
        this.tontine = tontine;
        this.paymentData = paymentData;
        this.events = events;
        this.api = api;
        this.router = router;
        this.loanService = loanService;
        this.currency = currency;
        this.formUtil = formUtil;
        this.alertController = alertController;
        this.paymentError = paymentError;
        this.wallet = wallet;
        this.errorService = errorService;
        this.location = location;
        this.translate = translate;
        this.zone = zone;
        this.ui = ui;
        this.cron = null;
        this.timeOut = null;
        this.loadingOperator = false;
        this.loading = false;
        this.errorPhone = false;
        this.states = [];
        this.paymentMethods = [];
        this.paypalMessage = '';
        this.reference = this.formUtil.getRandomId();
        this.tontineData = this.tontine.getCurrentTontineData();
        this.userData = this.userService.getUserData();
        this.allPaymentMethods = [];
        this.contributionData = this.loanService.getLoanData();
        this.paypalLoading = false;
        this.paypal_initialized = false;
        this.refernceId = '';
        this.hardwareBackButton();
    }
    ngOnInit() {
        this.getAllMethodPaymentType();
        this.initFormMessage();
        this.initPaymentForm();
    }
    /******************************** START  FORM  SERVICES *********************************************/
    // Form getters
    get phone() {
        return this.userPayMethodForm.get('phone');
    }
    get amountError() {
        return this.userPayMethodForm.get('montantAvecFees');
    }
    get country() {
        return this.userPayMethodForm.get('country_id');
    }
    get device_name() {
        return this.userPayMethodForm.get('device_name');
    }
    get payementtype() {
        return this.userPayMethodForm.get('typePaymentIndex');
    }
    get montantContributeError() {
        return this.userPayMethodForm.get('montant');
    }
    // Init form 
    initPaymentForm() {
        const currentPayment = this.paymentData.getDefaultPaymentMethod();
        this.userPayMethodForm = this.fb.group({
            country_id: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            country_prefix: [''],
            countryId: [''],
            handleFees: [''],
            handleFeesType: [''],
            device_name: [''],
            currency: [this.contributionData.currency_name],
            currencyLabel: [''],
            pay_token: [''],
            url: [''],
            montant: [{ value: this.amountPay, disabled: this.type === 'interest' ? true : false }, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].min(1), _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].max(this.amountPay)])],
            montantAvecFees: ['0'],
            montantTotal: ['0'],
            type_payment_id: [currentPayment ? currentPayment.typepaiement_id : ''],
            type_payment_name: [currentPayment ? currentPayment.name : ''],
            typePaymentIndex: [0, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            phone: [currentPayment && this.formUtil.validatePhone(currentPayment.numero_compte) ? currentPayment.numero_compte : ''],
            numero: ['']
        });
    }
    // Init form message
    initFormMessage() {
        this.translate.get(['REGISTER_PHONE_REQUIRED', 'AMOUNT_REQUIRED', 'PAID_MODE_REQUIRED', 'M_COUNTRY_REQUIRED'])
            .subscribe(value => {
            this.validationMessages = {
                payementtype: [
                    { type: 'required', message: value.PAID_MODE_REQUIRED }
                ],
                phone: [
                    { type: 'required', message: value.REGISTER_PHONE_REQUIRED },
                ],
                amount: [
                    { type: 'required', message: value.AMOUNT_REQUIRED }
                ],
                country_id: [
                    { type: 'required', message: value.M_COUNTRY_REQUIRED }
                ]
            };
        });
    }
    // Remove space
    removeSpace() {
        this.userPayMethodForm.get('phone').setValue(this.paymentData.removeInputSpace(this.userPayMethodForm.value.phone));
    }
    // check if it is not  mobile operator
    checkMobileOperator() {
        return this.paymentData.isMobileOperator(this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can show paypal message
    canShowPaypalMessage() {
        return this.userPayMethodForm.value.montant && this.paymentData.hasPaypalMessage(this.paypalMessage, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can pay with paypal
    canPay() {
        return this.paymentData.canShowPayment(this.userPayMethodForm.valid, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex], this.userPayMethodForm.value.phone, this.errorPhone);
    }
    // can show paypal button
    canShowPaypalButton() {
        return this.paymentData.hasPaypalButton(this.paypal_initialized, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // check if emial or phone is valid
    checckEmailOrPhone(inputValue, index) {
        this.removeSpace();
        this.userPayMethodForm.get('type_payment_id').setValue(this.paymentMethods[index].id);
        switch (this.paymentMethods[index].name) {
            case 'ORANGE MONEY':
                this.errorPhone = !this.formUtil.validatePhone(inputValue);
                if (!this.errorPhone) {
                    this.userPayMethodForm.get('numero').setValue(this.userPayMethodForm.value.country_prefix +
                        '' + this.userPayMethodForm.value.phone);
                }
                break;
            case 'MTN MOBILE MONEY':
                this.errorPhone = !this.formUtil.validatePhone(inputValue);
                if (!this.errorPhone) {
                    this.userPayMethodForm.get('numero').setValue(this.userPayMethodForm.value.country_prefix +
                        '' + this.userPayMethodForm.value.phone);
                }
                break;
            default:
                break;
        }
    }
    // get all payment method
    getAllMethodPaymentType() {
        this.loadingOperator = true;
        this.userService.getAllMethodPaymentType().subscribe((reponse) => {
            this.paymentMethods = [];
            this.loadingOperator = false;
            if (reponse && reponse.typePayment && reponse.typePayment.length > 0) {
                this.paymentMethods = this.paymentData.formatPaymentMethodResponseContribution(reponse.typePayment);
            }
            const defaultMethod = [{
                    id: 0, country_id: 0, logo: 'assets/pesuwallet.jpg',
                    currency: this.contributionData.monnaie, name: 'WALLET', placeholder: '',
                    handling_fees: 0,
                    type_handling_fees: 'valeur'
                }];
            this.paymentMethods = defaultMethod.concat(this.paymentMethods);
            this.allPaymentMethods = this.paymentMethods;
            this.getCountries(false);
        }, error => {
            this.loadingOperator = false;
            this.paymentMethods.push({
                id: 0, country_id: 0, logo: 'assets/pesuwallet.jpg',
                currency: this.contributionData.monnaie, name: 'WALLET', placeholder: '',
                handling_fees: 0,
                type_handling_fees: 'valeur'
            });
            this.allPaymentMethods = this.paymentMethods;
            this.getCountries(false);
            this.errorService.manageError(error);
        });
    }
    // Get all countries
    getCountries(refresher) {
        this.location.getAllCountries(refresher).then((countries) => {
            this.states = this.paymentData.formatCountriesData(countries);
            // Set the country of the tontine
            if (this.states && this.states.length > 0) {
                setTimeout(() => {
                    this.states.forEach(country => {
                        if (country.country_key === this.tontineData.tontine.country_key) {
                            this.updateFormData(country);
                        }
                    });
                }, 200);
            }
        });
    }
    // update the form data
    updateFormData(country) {
        if (country) {
            this.userPayMethodForm.get('countryId').setValue(country.country_id);
            this.userPayMethodForm.get('country_prefix').setValue(country.country_prefixe);
            this.userPayMethodForm.get('currency').setValue(country.device_name);
            this.userPayMethodForm.get('handleFees').setValue(country.handling_fees);
            this.userPayMethodForm.get('handleFeesType').setValue(country.type_handling_fees);
            this.userPayMethodForm.get('currencyLabel').setValue(country.currency_label);
            this.zone.run(() => {
                this.userPayMethodForm.get('country_id').setValue(country.country_id);
            });
            this.updatePaymentsMethods(country.country_id);
        }
    }
    // Update the payment method
    updatePaymentMethod(index) {
        if (this.paymentMethods[index]) {
            this.userPayMethodForm.get('type_payment_id').setValue(this.paymentMethods[index].id);
            this.userPayMethodForm.get('type_payment_name').setValue(this.paymentMethods[index].name);
            this.userPayMethodForm.get('device_name').setValue(this.paymentMethods[index].currency);
            this.userPayMethodForm.get('handleFees').setValue(this.paymentMethods[index].handling_fees);
            this.userPayMethodForm.get('handleFeesType').setValue(this.paymentMethods[index].type_handling_fees);
            this.zone.run(() => {
                this.userPayMethodForm.get('typePaymentIndex').setValue(index);
            });
        }
        if (this.paymentMethods && this.paymentMethods[index] &&
            this.paymentMethods[index].name === 'PAYPAL') {
            this.paypal_initialized = false;
            this.updatePaypalAmount();
        }
    }
    updatePaymentsMethods(countryId) {
        // update the payment method
        const paymentsMethods = [];
        this.paymentMethods = [];
        this.allPaymentMethods.forEach(payment => {
            if (payment.country_id === countryId || payment.country_id === 0) {
                paymentsMethods.push(payment);
            }
        });
        this.paymentMethods = paymentsMethods;
        if (this.paymentMethods && this.paymentMethods.length > 0) {
            this.updatePaymentMethod(0);
        }
    }
    // Calucalte the payment with handlfees
    getAmountFees(amountShare, devise) {
        return this.paymentData.getHandleFeesWithDevise(amountShare, devise, this.userPayMethodForm.value.handleFees, this.userPayMethodForm.value.handleFeesType);
    }
    // Update the country info country prfix
    updateCurrencyCountry(countryId) {
        this.zone.run(() => {
            this.paymentMethods = [];
        });
        setTimeout(() => {
            this.states.forEach(state => {
                if (state.country_id === countryId) {
                    this.updateFormData(state);
                }
            });
        }, 300);
    }
    // update parameters
    updateParameters(data) {
        let amountToPay = parseFloat(this.userPayMethodForm.value.montant);
        const itemList = data.list_loan;
        let currentAmount = 0;
        const itemUpdates = [];
        itemList.forEach(loan => {
            currentAmount = amountToPay - parseFloat(loan.amount);
            if (currentAmount >= 0) {
                itemUpdates.push(loan);
                amountToPay = currentAmount;
            }
            else {
                if (amountToPay > 0) {
                    itemUpdates.push({ loan_request_id: loan.loan_request_id, amount: amountToPay });
                }
                amountToPay = 0;
            }
        });
        data.list_loan = itemUpdates;
        return data;
    }
    // update operator param
    updateOperatorParams(conversionType, devise) {
        let currentParams = null;
        const listItems = [];
        switch (conversionType) {
            case 'convert':
                if (this.contributionData.type === 'loan-interest') {
                    currentParams = this.updateParameters(this.contributionData);
                    currentParams.list_loan.forEach(loan => {
                        listItems.push({
                            loan_request_id: loan.loan_request_id,
                            amount_depart_with_handling_fees: this.getAmountFees(loan.amount, devise),
                            amount_depart_without_handling_fees: loan.amount,
                            amount_arrivee_with_handling_fees: this.getAmountFees(loan.amount, devise),
                            amount_arrivee_without_handling_fees: loan.amount
                        });
                    });
                }
                else {
                    currentParams = this.contributionData;
                    currentParams.list_interest_to_pay.forEach(loan => {
                        listItems.push({
                            loan_request_id: loan.loan_request_id,
                            amount_depart_with_handling_fees: this.getAmountFees(loan.amount, devise),
                            amount_depart_without_handling_fees: loan.amount,
                            amount_arrivee_with_handling_fees: this.getAmountFees(loan.amount, devise),
                            amount_arrivee_without_handling_fees: loan.amount
                        });
                    });
                }
                break;
            case 'not-convert':
                if (this.contributionData.type === 'loan-interest') {
                    currentParams = this.updateParameters(this.contributionData);
                    currentParams.list_loan.forEach(loan => {
                        listItems.push({
                            loan_request_id: loan.loan_request_id,
                            amount_without_handling_fees: loan.amount,
                            amount_with_handling_fees: this.getAmountFees(loan.amount, devise)
                        });
                    });
                }
                else {
                    currentParams = this.contributionData;
                    currentParams.list_interest_to_pay.forEach(loan => {
                        listItems.push({
                            loan_request_id: loan.loan_request_id,
                            amount_without_handling_fees: loan.amount,
                            amount_with_handling_fees: this.getAmountFees(loan.amount, devise)
                        });
                    });
                }
                break;
            default:
                break;
        }
        return listItems;
    }
    // Show the payment mode
    showPayment(mode) {
        if (this.contributionData.type === 'loan-interest') {
            this.contributionData.all_Amount = this.userPayMethodForm.value.montant;
        }
        switch (mode.type_payment_name) {
            case 'ORANGE MONEY':
                this.updateParametersOrange();
                break;
            case 'OZOW':
                this.updateParametersOzow();
                break;
            case 'MTN MOBILE MONEY':
                this.updateParametersMtn();
                break;
            case 'WALLET':
                this.updateParametersWallet();
                break;
            default:
                break;
        }
    }
    /******************************** END  FORM  SERVICES *********************************************/
    /******************************** START WALLET PAYMENT *********************************************/
    // update wallet parameters
    updateParametersWallet() {
        const translation = [];
        this.translate.get(['CONFIRM_PAY_CONTRIBUTION_SUBTEXT1', 'CONFIRM_PAY_CONTRIBUTION_SUBTEXT2', 'CANCEL_TEXT', 'YES_TEXT']).subscribe(trans => {
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT1);
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT2);
            translation.push(trans.CANCEL_TEXT);
            translation.push(trans.YES_TEXT);
            this.paymentWalletConfirm(this.contributionData, translation);
        });
    }
    paymentWalletConfirm(dataMessage, translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${dataMessage.title}`,
                message: `${translation[0]} ${dataMessage.all_Amount}
        ${dataMessage.currency_name} ${translation[1]}`,
                buttons: [
                    {
                        text: `${translation[2]}`,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                        }
                    }, {
                        text: `${translation[3]}`,
                        handler: () => {
                            this.paidWithWallet(dataMessage);
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
    // paid loan with wallet
    paidWithWallet(contributionData) {
        switch (contributionData.type) {
            case 'loan-interest':
                const param = this.updateParameters(contributionData);
                this.paidWithWalletLoanAndInterest(param);
                break;
            case 'interest':
                this.paidWithWalletInterest(contributionData);
                break;
            default:
                break;
        }
    }
    // Paid the contribution with wallet
    paidWithWalletLoanAndInterest(contributionData) {
        this.loading = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        this.loanService.payManyloanAndInterestWithWallet(contributionData)
            .subscribe((reponse) => {
            this.loading = false;
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG1').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.initPaymentForm();
                this.events.publish('modal-close', { result: 'complete' });
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithWalletLoanAndInterest(contributionData);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    paidWithWalletInterest(contributionData) {
        this.loading = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        this.loanService.payManyloanInterestWithWallet(contributionData)
            .subscribe((reponse) => {
            this.loading = false;
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG1').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.initPaymentForm();
                this.events.publish('modal-close', { result: 'complete' });
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithWalletInterest(contributionData);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    /******************************** START WALLET PAYMENT *********************************************/
    /******************************** START PAYPAL PAYMENT *********************************************/
    setupPayPay() {
        if (!this.paypal_initialized) {
            this.initPayPal();
        }
    }
    initPayPal() {
        if (this.userPayMethodForm.value.montantTotal > 0) {
            this.paypalLoading = true;
            this.paypal_initialized = true;
            let paypalbuttoncontainer = this.paypalbuttoncontainer.nativeElement;
            let _this = this;
            paypal.Button.render({
                env: 'production',
                style: {
                    size: 'responsive',
                    color: 'gold',
                    shape: 'pill',
                    label: 'checkout',
                    tagline: false
                },
                client: {
                    sandbox: 'ARIMcMamksC74CLp7Zavgn62RsKK0XDfjePxjU9gsWmcdzyI3AYz3PwADIktvUgCdhAwWCXPaBzCckOC',
                    production: 'AVdCN0ymBsPer15VtLbeNoZ3vkjkhap6vXoxwsWF3B0H4GM_mVQ5GVpJ2h4-G_AlVVIsBYWx4JpVVxLT'
                },
                // Show the buyer a 'Pay Now' button in the checkout flow
                commit: true,
                payment: function (data, actions) {
                    return actions.payment.create({
                        payment: {
                            transactions: [
                                {
                                    amount: {
                                        total: _this.userPayMethodForm.value.montantTotal,
                                        currency: _this.userPayMethodForm.value.device_name
                                    },
                                    description: 'Toupesu'
                                }
                            ]
                        }
                    });
                },
                // onAuthorize() is called when the buyer approves the payment
                onAuthorize: function (data, actions, error) {
                    if (error) {
                        _this.exitPayment();
                    }
                    if (error === 'INSTRUMENT_DECLINED') {
                        _this.exitPayment();
                    }
                    // Make a call to the REST ui to execute the payment
                    return actions.payment.execute().then(function () {
                        const params = {
                            refID: _this.reference,
                            amount: _this.userPayMethodForm.value.montantTotal,
                            moneyCode: _this.userPayMethodForm.value.device_name,
                            product: 'Toupesu',
                            paypalID: data.paymentToken.split('-')[1]
                        };
                        // Save and check the payment result
                        _this.userPayMethodForm.get('pay_token').setValue(data.paymentToken.split('-')[1]);
                        _this.api.post('livepaygateway/paypal/savePayRequest', JSON.stringify(params)).subscribe((ans) => {
                            if (ans && ans.success) {
                                _this.updateParametersPaypal(data.paymentToken.split('-')[1]);
                            }
                        }, error => {
                            _this.updateParametersPaypal(data.paymentToken.split('-')[1]);
                        });
                    });
                },
                onCancel: function (data, actions) {
                    _this.exitPayment();
                },
                onClick: (data, actions) => {
                    _this.translate.get('TOPUP_TEXT1').subscribe(value => {
                        _this.ui.presentToast(value);
                    });
                }
            }, paypalbuttoncontainer);
            setTimeout(() => {
                this.paypalLoading = false;
            }, 2000);
        }
    }
    // update the paypal total amount
    updatePaypalAmount() {
        if (this.contributionData.type === 'loan-interest') {
            this.contributionData.all_Amount = this.userPayMethodForm.value.montant;
        }
        if (this.contributionData.all_Amount) {
            if (this.userPayMethodForm.value.type_payment_name === 'PAYPAL') {
                const amount = this.getAmountFees(this.contributionData.all_Amount, this.contributionData.currency_name);
                this.userPayMethodForm.get('montantAvecFees').setValue(amount);
                if (this.contributionData.currency_name !== this.userPayMethodForm.value.device_name) {
                    this.currency.convert(this.contributionData.currency_name, this.userPayMethodForm.value.device_name, this.contributionData.all_Amount).then(amountWithoutFees => {
                        if (amountWithoutFees) {
                            const amountFees = this.getAmountFees(amountWithoutFees, this.userPayMethodForm.value.device_name);
                            this.userPayMethodForm.get('montantTotal').setValue(amountFees);
                            this.translate.get('PAIDMODE_MSG2').subscribe(value => {
                                this.paypalMessage = `${value} ${this.userPayMethodForm.value.montantAvecFees}
                 ${this.contributionData.currency_name} =
                ${this.userPayMethodForm.value.montantTotal}
                ${this.userPayMethodForm.value.device_name}`;
                                this.setupPayPay();
                            });
                        }
                        else {
                            this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                                this.paypalMessage = value;
                            });
                        }
                    });
                }
                else {
                    this.userPayMethodForm.get('montantTotal').setValue(this.userPayMethodForm.value.montantAvecFees);
                    this.translate.get('PAIDMODE_MSG2').subscribe(value => {
                        this.paypalMessage = `${value}  ${this.userPayMethodForm.value.montantTotal}
            ${this.userPayMethodForm.value.device_name}`;
                        this.setupPayPay();
                    });
                }
            }
        }
    }
    // Update parameters PAYPAL
    updateParametersPaypal(payToken) {
        const params = this.loanService.getLoanData();
        const amount = this.getAmountFees(this.contributionData.all_Amount, params.currency_name);
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (params.currency_name === this.userPayMethodForm.value.device_name) {
            const paramsData = {
                list_loan: this.updateOperatorParams('not-convert', params.currency_name),
                currency_name: this.contributionData.currency_name,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                country_id: this.userPayMethodForm.value.countryId,
                numero: this.userPayMethodForm.value.numero,
                pay_token: payToken,
                operator: 'paypal'
            };
            this.paidWithoutConversionOperator(paramsData);
        }
        else {
            this.currency.convert(params.currency_name, this.userPayMethodForm.value.device_name, this.contributionData.all_Amount).then(montantsansFees => {
                if (montantsansFees) {
                    const paramsData = {
                        list_loan: this.updateOperatorParams('convert', this.userPayMethodForm.value.device_name),
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        currency_depart_name: this.userPayMethodForm.value.device_name,
                        currency_arrivee_name: this.contributionData.currency_name,
                        somme_amount_depart_with_handling_fees: this.userPayMethodForm.value.montantTotal ? this.userPayMethodForm.value.montantTotal : 0,
                        somme_amount_depart_without_handling_fees: montantsansFees ? montantsansFees : 0,
                        numero: this.userPayMethodForm.value.numero,
                        pay_token: payToken,
                        operator: 'paypal'
                    };
                    this.paidWithConversionOperator(paramsData);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
    }
    /******************************** END PAYPAL PAYMENT *********************************************/
    /******************************** START MTN PAYMENT *********************************************/
    // Update parameters  Mtn payment
    updateParametersMtn() {
        const params = this.loanService.getLoanData();
        const amount = this.getAmountFees(this.contributionData.all_Amount, params.currency_name);
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (params.currency_name !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(params.currency_name, this.userPayMethodForm.value.device_name, this.contributionData.all_Amount).then(montantsansFees => {
                if (montantsansFees) {
                    const dataParams = {
                        list_loan: this.updateOperatorParams('convert', this.userPayMethodForm.value.device_name),
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        currency_depart_name: this.userPayMethodForm.value.device_name,
                        currency_arrivee_name: this.contributionData.currency_name,
                        somme_amount_depart_with_handling_fees: this.getAmountFees(montantsansFees, this.userPayMethodForm.value.device_name),
                        somme_amount_depart_without_handling_fees: montantsansFees ? montantsansFees : 0,
                        numero: this.userPayMethodForm.value.numero,
                        operator: 'MTN'
                    };
                    this.contributionDataParams = dataParams;
                    const messageConfirmation = {
                        title: params.title, contribution: dataParams.somme_amount_depart_with_handling_fees,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const paramsData = {
                list_loan: this.updateOperatorParams('not-convert', this.contributionData.currency_name),
                currency_name: this.contributionData.currency_name,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                country_id: this.userPayMethodForm.value.countryId,
                numero: this.userPayMethodForm.value.numero,
                operator: 'MTN'
            };
            this.contributionDataParams = paramsData;
            const messageConfirmation = {
                title: params.title, contribution: this.userPayMethodForm.value.montantAvecFees,
                device_name: params.facture ? params.facture.device_name : '', type: 'notconverted'
            };
            this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END MTN PAYMENT *********************************************/
    /******************************** START ORANGE PAYMENT *********************************************/
    // Update parameters  Orange payment
    updateParametersOrange() {
        const params = this.loanService.getLoanData();
        const amount = this.getAmountFees(this.contributionData.all_Amount, params.currency_name);
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (params.currency_name !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(params.currency_name, this.userPayMethodForm.value.device_name, this.contributionData.all_Amount).then(montantsansFees => {
                if (montantsansFees) {
                    const dataParams = {
                        list_loan: this.updateOperatorParams('convert', this.userPayMethodForm.value.device_name),
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        currency_depart_name: this.userPayMethodForm.value.device_name,
                        currency_arrivee_name: this.contributionData.currency_name,
                        somme_amount_depart_with_handling_fees: this.getAmountFees(montantsansFees, this.userPayMethodForm.value.device_name),
                        somme_amount_depart_without_handling_fees: montantsansFees ? montantsansFees : 0,
                        numero: this.userPayMethodForm.value.numero,
                        operator: 'orange'
                    };
                    this.contributionDataParams = dataParams;
                    const messageConfirmation = {
                        title: params.title, contribution: dataParams.somme_amount_depart_with_handling_fees,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const paramsData = {
                list_loan: this.updateOperatorParams('not-convert', this.contributionData.currency_name),
                currency_name: this.contributionData.currency_name,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                numero: this.userPayMethodForm.value.numero,
                country_id: this.userPayMethodForm.value.countryId,
                operator: 'orange'
            };
            this.contributionDataParams = paramsData;
            const messageConfirmation = {
                title: params.title, contribution: this.userPayMethodForm.value.montantAvecFees,
                device_name: this.contributionData.currency_name, type: 'notconverted'
            };
            this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END ORANGE PAYMENT *********************************************/
    /******************************** START OZOW PAYMENT *********************************************/
    // Update parameters OZOW payment
    updateParametersOzow() {
        const params = this.loanService.getLoanData();
        const amount = this.getAmountFees(this.contributionData.all_Amount, params.currency_name);
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (params.currency_name !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(params.currency_name, this.userPayMethodForm.value.device_name, this.contributionData.all_Amount).then(montantsansFees => {
                if (montantsansFees) {
                    const dataParams = {
                        list_loan: this.updateOperatorParams('convert', this.userPayMethodForm.value.device_name),
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        currency_depart_name: this.userPayMethodForm.value.device_name,
                        currency_arrivee_name: this.contributionData.currency_name,
                        somme_amount_depart_with_handling_fees: this.getAmountFees(montantsansFees, this.userPayMethodForm.value.device_name),
                        somme_amount_depart_without_handling_fees: montantsansFees ? montantsansFees : 0,
                        numero: this.userPayMethodForm.value.numero,
                        operator: 'ozow'
                    };
                    this.contributionDataParams = dataParams;
                    const messageConfirmation = {
                        title: params.title, contribution: dataParams.somme_amount_depart_with_handling_fees,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const paramsData = {
                list_loan: this.updateOperatorParams('not-convert', this.contributionData.currency_name),
                currency_name: this.contributionData.currency_name,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                country_id: this.userPayMethodForm.value.countryId,
                numero: this.userPayMethodForm.value.numero,
                operator: 'ozow'
            };
            this.contributionDataParams = paramsData;
            const messageConfirmation = {
                title: params.title, contribution: this.userPayMethodForm.value.montantAvecFees,
                device_name: params.facture ? params.facture.device_name : '', type: 'notconverted'
            };
            this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END OZOW PAYMENT *********************************************/
    /******************************** START COMMON PAYMENT  SERVICES *********************************************/
    showConfirmationMessage(messageConfirmation, contributionDataParams) {
        const translation = [];
        this.translate.get(['CONFIRM_PAY_CONTRIBUTION_SUBTEXT1', 'CONFIRM_PAY_CONTRIBUTION_SUBTEXT2', 'CANCEL_TEXT', 'YES_TEXT'])
            .subscribe(trans => {
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT1);
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT2);
            translation.push(trans.CANCEL_TEXT);
            translation.push(trans.YES_TEXT);
            this.paymentOperatorConfirm(messageConfirmation, contributionDataParams, translation);
        });
    }
    paymentOperatorConfirm(dataMessage, contributionDataParams, translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${dataMessage.title}`,
                message: `${translation[0]} ${dataMessage.contribution}
    ${dataMessage.device_name}  ${translation[1]}`,
                buttons: [
                    {
                        text: `${translation[2]}`,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                        }
                    }, {
                        text: `${translation[3]}`,
                        handler: () => {
                            if (dataMessage.type === 'converted') {
                                this.paidWithConversionOperator(contributionDataParams);
                            }
                            else if (dataMessage.type === 'notconverted') {
                                this.paidWithoutConversionOperator(contributionDataParams);
                            }
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
    // Paid loan and Interest contribution  with operator without conversion
    paidWithoutConversionOperatorLoanAndInterest(contributionData) {
        this.loading = true;
        this.showLoadingMessage(contributionData);
        this.loanService.payManyloanAndInterestWithOperatorWithoutConversion(contributionData).subscribe((reponse) => {
            if (reponse && reponse.message === 'success') {
                this.sendResponsePerOperator(reponse, contributionData.operator);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithoutConversionOperatorLoanAndInterest(contributionData);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    // Paid loan-Interest contribution with operator without conversion
    paidWithoutloanInterestConversionOperator(contributionData) {
        this.loading = true;
        this.showLoadingMessage(contributionData);
        this.loanService.payManyloanInterestWithOperatorWithoutConversion(contributionData).subscribe((reponse) => {
            if (reponse && reponse.message === 'success') {
                this.sendResponsePerOperator(reponse, contributionData.operator);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithoutloanInterestConversionOperator(contributionData);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    // Paid the user contribution with Paypal after conversion
    paidWithConversionOperatorLoanAndInterest(contributionData) {
        this.loading = true;
        this.showLoadingMessage(contributionData);
        this.loanService.payManyloanAndInterestWithOperatorWithConversion(contributionData).subscribe((reponse) => {
            if (reponse && reponse.message === 'success') {
                this.sendResponsePerOperator(reponse, contributionData.operator);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithConversionOperatorLoanAndInterest(contributionData);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    paidWithConversionOperatorLoanInterest(contributionData) {
        this.loading = true;
        this.showLoadingMessage(contributionData);
        this.loanService.payManyloanInterestWithOperatorWithConversion(contributionData).subscribe((reponse) => {
            if (reponse && reponse.message === 'success') {
                this.sendResponsePerOperator(reponse, contributionData.operator);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithConversionOperatorLoanInterest(contributionData);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    paidWithoutConversionOperator(contributionData) {
        switch (this.contributionData.type) {
            case 'loan-interest':
                this.paidWithoutConversionOperatorLoanAndInterest(contributionData);
                break;
            case 'interest':
                const param = contributionData;
                param.list_interest = contributionData.list_loan;
                this.paidWithoutloanInterestConversionOperator(param);
                break;
            default:
                break;
        }
    }
    paidWithConversionOperator(contributionData) {
        switch (this.contributionData.type) {
            case 'loan-interest':
                this.paidWithConversionOperatorLoanAndInterest(contributionData);
                break;
            case 'interest':
                const param = contributionData;
                param.list_interest = contributionData.list_loan;
                this.paidWithConversionOperatorLoanInterest(param);
                break;
            default:
                break;
        }
    }
    // Send message per operator
    sendResponsePerOperator(data, operator) {
        this.checkPaymentStatusOperator(data.pay_token, operator);
        const reference = data && data.refID ? data.refID : '';
        this.refernceId = reference;
        this.cancelPaymentResult(reference);
        switch (operator) {
            case 'ozow':
                window.open(data.url, '_blank');
                break;
            default:
                break;
        }
    }
    // show the loading message
    showLoadingMessage(data) {
        switch (data.operator) {
            case 'orange':
                this.translate.get('ORANGE_PAYMENT_MESSAGE').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'MTN':
                this.translate.get('MTN_PAYMENT_MESSAGE').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'paypal':
                this.translate.get('TOPUP_TEXT1').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'ozow':
                this.translate.get('TOPUP_TEXT1').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            default:
                break;
        }
    }
    // SHOW THE SUCCES MESSAGE
    showSuccesMessage(type) {
        switch (type) {
            case 'loan-interest':
                this.translate.get('LOAN_PAYMENT_SUCCESS').subscribe(value => {
                    this.ui.presentToast(value);
                });
                break;
            case 'interest':
                this.translate.get('INTEREST_PAYMENT_SUCCESS').subscribe(value => {
                    this.ui.presentToast(value);
                });
                break;
            default:
                break;
        }
    }
    // clear the time out
    clearTimeoutData() {
        if (this.timeOut) {
            clearTimeout(this.timeOut);
            this.timeOut = null;
        }
    }
    // clear the set interval
    clearSetIntervalData() {
        if (this.cron) {
            clearInterval(this.cron);
        }
        this.cron = null;
        for (let i = 0; i < 1000; i++) {
            clearInterval(i);
        }
    }
    // step 2 :  Check the status via Ozow
    checkPaymentStatusOperator(payToken, operator) {
        this.cron = setInterval(() => {
            this.checkPaymentStatusOperatorServer(payToken, operator);
        }, 20000);
    }
    // Check the payment Status
    checkPaymentStatusOperatorServer(payToken, operator) {
        this.wallet.getStatusPaymentOperator(payToken, operator).subscribe((reponse) => {
            if (reponse && reponse.message === 'OK') {
                this.showPaymentResult();
                this.showSuccesMessage(this.contributionData.type);
            }
        }, error => {
            if (error && error.error && error.error.message === 'FAIL') {
                this.exitPayment();
                this.translate.get('PAYMENT_FAIL_MSG').subscribe(value => {
                    this.ui.presentToast(value);
                });
            }
            else {
                this.exitPayment();
                this.translate.get('PAYMENT_FAIL_MSG').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.errorService.manageError(error);
            }
        });
    }
    // Show payment confirmation dialog
    showPaymentResult() {
        this.loading = false;
        this.ui.dismissLoading();
        this.initPaymentForm();
        this.clearTimeoutData();
        this.clearSetIntervalData();
        this.events.publish('modal-close', { result: 'complete' });
    }
    // Cancel the payment
    cancelPaymentResult(refence) {
        this.timeOut = setTimeout(() => {
            this.exitPayment();
            this.translate.get(['TRANSACTION_CANCEL', 'TOPUP_MSG9']).subscribe(trans => {
                this.ui.presentAlert(`${trans.TRANSACTION_CANCEL}`, `${trans.TOPUP_MSG9} ${refence}`);
            });
        }, 300000);
    }
    // exit the payment directly
    exitPayment() {
        this.loading = false;
        this.ui.dismissLoading();
        this.getAllMethodPaymentType();
        this.initFormMessage();
        this.initPaymentForm();
        this.clearTimeoutData();
        this.clearSetIntervalData();
    }
    ionicViewDidLeave() {
        if (this.loading) {
            this.exitPayment();
        }
    }
    // listen to back button
    hardwareBackButton() {
        this.platform.backButton.subscribe(() => {
            const url = this.router.url;
            if (url === '/dashboard/my-tontines/' + this.tontineData.tontine.tontine_id + '/debts/in-progress-paiement') {
                if (this.refernceId) {
                    this.cancelPaymentResult(this.refernceId);
                }
                else {
                    this.exitPayment();
                }
            }
        });
    }
};
PaidmodeLoanComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_18__["UserService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_6__["Platform"] },
    { type: src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_9__["TontineService"] },
    { type: _service_payment_global_data_service__WEBPACK_IMPORTED_MODULE_17__["PaymentGlobalDataService"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_19__["EventService"] },
    { type: _service_api_service__WEBPACK_IMPORTED_MODULE_10__["ApiService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_16__["Router"] },
    { type: src_app_dashboard_my_tontines_tontine_detail_loans_service_loan_service__WEBPACK_IMPORTED_MODULE_15__["LoanService"] },
    { type: _service_currency_service__WEBPACK_IMPORTED_MODULE_11__["CurrencyService"] },
    { type: _service_form_utils_service__WEBPACK_IMPORTED_MODULE_13__["FormUtilsService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_6__["AlertController"] },
    { type: _service_payment_error_service__WEBPACK_IMPORTED_MODULE_14__["PaymentErrorService"] },
    { type: src_app_dashboard_my_wallet_service_wallet_service__WEBPACK_IMPORTED_MODULE_12__["WalletService"] },
    { type: _service_error_service__WEBPACK_IMPORTED_MODULE_5__["ErrorService"] },
    { type: _service_location_service__WEBPACK_IMPORTED_MODULE_7__["LocationService"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__["TranslateService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] },
    { type: _service_ui_service__WEBPACK_IMPORTED_MODULE_20__["UiService"] }
];
PaidmodeLoanComponent.propDecorators = {
    amountPay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    balance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    paypalbuttoncontainer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: ['paypalbuttoncontainer', { static: false },] }]
};
PaidmodeLoanComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-paidmode-loan',
        template: _raw_loader_paidmode_loan_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_paidmode_loan_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], PaidmodeLoanComponent);



/***/ }),

/***/ "BuaV":
/*!***********************************************************************!*\
  !*** ./src/app/shared/paidmode-seance/paidmode-seance.component.scss ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwYWlkbW9kZS1zZWFuY2UuY29tcG9uZW50LnNjc3MifQ== */");

/***/ }),

/***/ "DIQh":
/*!*******************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/prefix/prefix.component.html ***!
  \*******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header>\n  <ion-toolbar>\n    <ion-buttons slot=\"end\">\n      <ion-button slot=\"icon-only\" (click)=\"closeCountries()\">\n        <ion-icon color=\"warning\" name=\"close\" ></ion-icon>\n      </ion-button>\n    </ion-buttons>\n    <ion-title class=\"ion-text-center subtitle\">\n      {{'REGISTER_MTEXT1' | translate}}\n    </ion-title>\n  </ion-toolbar>\n  <ion-toolbar>\n      <ion-searchbar placeholder=\"{{ 'M_NAME_TEXT' | translate }}\" type=\"text\" debounce=\"500\" (ionChange)=\"searchForInvitation($event)\" type=\"text\"></ion-searchbar>\n  </ion-toolbar>\n</ion-header>\n<ion-content>\n  <ion-refresher slot=\"fixed\" (ionRefresh)=\"refreSher($event)\">\n    <ion-refresher-content\n      pullingIcon=\"arrow-dropdown\"\n      refreshingSpinner=\"circles\"\n      refreshingText=\"{{ 'M_REFRESHING_TEXT' | translate }}\">\n    </ion-refresher-content>\n  </ion-refresher>\n  <p class=\"ion-text-center\"  *ngIf=\"loading\">\n    <ion-spinner  name=\"circles\"></ion-spinner>\n  </p>\n  <ion-grid>\n    <ion-row>\n      <ion-col size=\"12\">\n        <ion-radio-group (ionChange)=\"selectCountry($event)\">\n          <ion-item  *ngFor=\"let country of states\">\n            <ion-avatar slot=\"start\" *ngIf=\"country.country_flag\">\n              <img src=\"{{country.country_flag}}\">\n            </ion-avatar>\n            <ion-label> + {{ country.country_prefixe }}</ion-label>\n            <ion-radio slot=\"end\" [value]=\"country.code_country\"></ion-radio>\n          </ion-item>\n        </ion-radio-group>\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n\n  <div  *ngIf=\"states && states.length === 0 && !loading &&!filter\">\n    <p  class=\"ion-padding ion-text-center\"> {{ 'EMPTY_COUNTRY_LIST' | translate }}</p>\n  </div>\n\n  <ion-infinite-scroll threshold=\"250px\" (ionInfinite)=\"infinteScrollData($event)\">\n    <ion-infinite-scroll-content\n      loadingSpinner=\"bubbles\"\n      loadingText=\"{{ 'M_LOADING_MORE_DATA' | translate }}\">\n    </ion-infinite-scroll-content>\n  </ion-infinite-scroll>\n</ion-content>");

/***/ }),

/***/ "EjoE":
/*!*************************************************************************************!*\
  !*** ./src/app/shared/paidmode-seance-caution/paidmode-seance-caution.component.ts ***!
  \*************************************************************************************/
/*! exports provided: PaidmodeCautionSenceComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaidmodeCautionSenceComponent", function() { return PaidmodeCautionSenceComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_paidmode_seance_caution_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./paidmode-seance-caution.component.html */ "mlKa");
/* harmony import */ var _paidmode_seance_caution_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./paidmode-seance-caution.component.scss */ "aANF");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var _service_error_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../service/error.service */ "TkUd");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _service_location_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../service/location.service */ "e009");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/tontine.service */ "/WEl");
/* harmony import */ var src_app_dashboard_my_tontines_services_contribution_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/contribution.service */ "US41");
/* harmony import */ var _service_currency_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../service/currency.service */ "GmDD");
/* harmony import */ var src_app_dashboard_my_wallet_service_wallet_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/dashboard/my-wallet/service/wallet.service */ "68js");
/* harmony import */ var _service_form_utils_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../service/form-utils.service */ "14LV");
/* harmony import */ var _service_payment_error_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../service/payment-error.service */ "FLu1");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var _service_payment_global_data_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../service/payment-global-data.service */ "T8hk");
/* harmony import */ var src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! src/app/dashboard/user/service/user.service */ "6Hie");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../service/events.service */ "r5fM");
/* harmony import */ var _service_ui_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../service/ui.service */ "QB/Y");
/* harmony import */ var _service_api_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../service/api.service */ "6rCG");





















let PaidmodeCautionSenceComponent = class PaidmodeCautionSenceComponent {
    constructor(fb, userService, platform, paymentData, router, api, currency, events, contribution, alertController, wallet, tontine, errorService, location, translate, formUtil, zone, paymentError, ui) {
        this.fb = fb;
        this.userService = userService;
        this.platform = platform;
        this.paymentData = paymentData;
        this.router = router;
        this.api = api;
        this.currency = currency;
        this.events = events;
        this.contribution = contribution;
        this.alertController = alertController;
        this.wallet = wallet;
        this.tontine = tontine;
        this.errorService = errorService;
        this.location = location;
        this.translate = translate;
        this.formUtil = formUtil;
        this.zone = zone;
        this.paymentError = paymentError;
        this.ui = ui;
        this.cron = null;
        this.timeOut = null;
        this.loadingOperator = false;
        this.loading = false;
        this.errorPhone = false;
        this.states = [];
        this.paymentMethods = [];
        this.paypalMessage = '';
        this.reference = this.formUtil.getRandomId();
        this.tontineData = this.tontine.getCurrentTontineData();
        this.allPaymentMethods = [];
        this.paypalLoading = false;
        this.paypal_initialized = false;
        this.contributionData = this.contribution.getContributionData();
        this.refernceId = '';
        this.hardwareBackButton();
    }
    ngOnInit() {
        this.getAllMethodPaymentType();
        this.initPaymentForm();
        this.initFormMessage();
    }
    /******************************** START FORM PAYMENT SERVICES*********************************************/
    // Form getters
    get phone() {
        return this.userPayMethodForm.get('phone');
    }
    get amountError() {
        return this.userPayMethodForm.get('montantAvecFees');
    }
    get country() {
        return this.userPayMethodForm.get('country_id');
    }
    get device_name() {
        return this.userPayMethodForm.get('device_name');
    }
    get payementtype() {
        return this.userPayMethodForm.get('typePaymentIndex');
    }
    // Init Form 
    initPaymentForm() {
        const currentPayment = this.paymentData.getDefaultPaymentMethod();
        this.userPayMethodForm = this.fb.group({
            country_id: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            country_prefix: [''],
            countryId: [''],
            handleFees: [''],
            handleFeesType: [''],
            device_name: [''],
            currency: [''],
            currencyLabel: [''],
            pay_token: [''],
            url: [''],
            montant: [''],
            montantAvecFees: ['0'],
            montantTotal: ['0'],
            type_payment_id: [currentPayment ? currentPayment.typepaiement_id : ''],
            type_payment_name: [currentPayment ? currentPayment.name : ''],
            typePaymentIndex: [0, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            phone: [currentPayment && this.formUtil.validatePhone(currentPayment.numero_compte) ? currentPayment.numero_compte : ''],
            numero: ['']
        });
    }
    // Init form message
    initFormMessage() {
        this.translate.get(['REGISTER_PHONE_REQUIRED', 'AMOUNT_REQUIRED', 'PAID_MODE_REQUIRED'])
            .subscribe(value => {
            this.validationMessages = {
                payementtype: [
                    { type: 'required', message: value.PAID_MODE_REQUIRED }
                ],
                phone: [
                    { type: 'required', message: value.REGISTER_PHONE_REQUIRED },
                ],
                amount: [
                    { type: 'required', message: value.AMOUNT_REQUIRED }
                ],
                country_id: [
                    { type: 'required', message: value.M_COUNTRY_REQUIRED }
                ]
            };
        });
    }
    // Remove space
    removeSpace() {
        this.userPayMethodForm.get('phone').setValue(this.paymentData.removeInputSpace(this.userPayMethodForm.value.phone));
    }
    // check if it is not  mobile operator
    checkMobileOperator() {
        return this.paymentData.isMobileOperator(this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can show paypal message
    canShowPaypalMessage() {
        return this.paymentData.hasPaypalMessage(this.paypalMessage, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can show  paypal button
    canShowPaypalButton() {
        return this.paymentData.hasPaypalButton(this.paypal_initialized, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can make payment 
    canPay() {
        return this.paymentData.canShowPayment(this.userPayMethodForm.valid, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex], this.userPayMethodForm.value.phone, this.errorPhone);
    }
    // check if emial or phone is valid
    checckEmailOrPhone(inputValue, index) {
        this.removeSpace();
        this.userPayMethodForm.get('type_payment_id').setValue(this.paymentMethods[index].id);
        switch (this.paymentMethods[index].name) {
            case 'ORANGE MONEY':
                this.errorPhone = !this.formUtil.validatePhone(inputValue);
                if (!this.errorPhone) {
                    this.userPayMethodForm.get('numero').setValue(this.userPayMethodForm.value.country_prefix +
                        '' + this.userPayMethodForm.value.phone);
                }
                break;
            case 'MTN MOBILE MONEY':
                this.errorPhone = !this.formUtil.validatePhone(inputValue);
                if (!this.errorPhone) {
                    this.userPayMethodForm.get('numero').setValue(this.userPayMethodForm.value.country_prefix +
                        '' + this.userPayMethodForm.value.phone);
                }
                break;
            default:
                break;
        }
    }
    // get all payment method
    getAllMethodPaymentType() {
        this.loadingOperator = true;
        this.userService.getAllMethodPaymentType().subscribe((reponse) => {
            this.loadingOperator = false;
            this.paymentMethods = [];
            /*  if (reponse && reponse.typePayment && reponse.typePayment.length > 0) {
               this.paymentMethods = this.paymentData.formatPaymentMethodResponseContribution(reponse.typePayment);
             } */
            const defaultMethod = [{
                    id: 0, country_id: 0, logo: 'assets/pesuwallet.jpg',
                    currency: this.tontineData.tontine.monnaie, name: 'WALLET', placeholder: '',
                    handling_fees: 0,
                    type_handling_fees: 'valeur',
                    type: 'WALLET'
                }];
            this.paymentMethods = defaultMethod.concat(this.paymentMethods);
            this.allPaymentMethods = this.paymentMethods;
            this.getCountries(false);
        }, error => {
            this.loadingOperator = false;
            this.paymentMethods.push({
                id: 0, country_id: 0, logo: 'assets/pesuwallet.jpg',
                currency: this.tontineData.tontine.monnaie, name: 'WALLET', placeholder: '',
                handling_fees: 0,
                type_handling_fees: 'valeur',
                type: 'WALLET'
            });
            this.allPaymentMethods = this.paymentMethods;
            this.getCountries(false);
            this.errorService.manageError(error);
        });
    }
    // Get all countries
    getCountries(refresher) {
        this.location.getAllCountries(refresher).then((countries) => {
            this.states = this.paymentData.formatCountriesData(countries);
            if (this.states && this.states.length > 0) {
                setTimeout(() => {
                    this.states.forEach(country => {
                        if (country.country_key === this.tontineData.tontine.country_key) {
                            this.updateFormData(country);
                        }
                    });
                }, 200);
            }
        });
    }
    // update the form data
    updateFormData(country) {
        if (country) {
            this.userPayMethodForm.get('countryId').setValue(country.country_id);
            this.userPayMethodForm.get('country_prefix').setValue(country.country_prefixe);
            this.userPayMethodForm.get('currency').setValue(country.device_name);
            this.userPayMethodForm.get('handleFees').setValue(country.handling_fees);
            this.userPayMethodForm.get('handleFeesType').setValue(country.type_handling_fees);
            this.userPayMethodForm.get('currencyLabel').setValue(country.currency_label);
            this.zone.run(() => {
                this.userPayMethodForm.get('country_id').setValue(country.country_id);
            });
            this.updatePaymentsMethods(country.country_id);
        }
    }
    // Update the payment method
    updatePaymentMethod(index) {
        if (this.paymentMethods[index]) {
            this.userPayMethodForm.get('type_payment_id').setValue(this.paymentMethods[index].id);
            this.userPayMethodForm.get('type_payment_name').setValue(this.paymentMethods[index].name);
            this.userPayMethodForm.get('device_name').setValue(this.paymentMethods[index].currency);
            this.userPayMethodForm.get('handleFees').setValue(this.paymentMethods[index].handling_fees);
            this.userPayMethodForm.get('handleFeesType').setValue(this.paymentMethods[index].type_handling_fees);
            this.zone.run(() => {
                this.userPayMethodForm.get('typePaymentIndex').setValue(index);
            });
        }
        if (this.paymentMethods && this.paymentMethods[index] &&
            this.paymentMethods[index].name === 'PAYPAL') {
            this.paypal_initialized = false;
            this.updatePaypalAmount();
        }
    }
    updatePaymentsMethods(countryId) {
        // update the payment method
        const paymentsMethods = [];
        this.paymentMethods = [];
        this.allPaymentMethods.forEach(payment => {
            if (payment.country_id === countryId || payment.country_id === 0) {
                paymentsMethods.push(payment);
            }
        });
        this.paymentMethods = paymentsMethods;
        if (this.paymentMethods && this.paymentMethods.length > 0) {
            this.updatePaymentMethod(0);
        }
    }
    // Calucalte the payment with handlfees
    getAmountWithFees(amountShare, devise) {
        return this.paymentData.getHandleFeesWithDevise(amountShare, devise, this.userPayMethodForm.value.handleFees, this.userPayMethodForm.value.handleFeesType);
    }
    // Update the country info country prfix
    updateCurrencyCountry(countryId) {
        this.zone.run(() => {
            this.paymentMethods = [];
        });
        setTimeout(() => {
            this.states.forEach(state => {
                if (state.country_id === countryId) {
                    this.updateFormData(state);
                }
            });
        }, 300);
    }
    selectOperator(data) {
        const operator = this.paymentMethods[data.typePaymentIndex].name;
        switch (operator) {
            case 'ORANGE MONEY':
                this.updateParametersOrange();
                break;
            case 'OZOW':
                this.updateParametersOzow();
                break;
            case 'MTN MOBILE MONEY':
                this.updateParametersMtn();
                break;
            default:
                break;
        }
    }
    // Show the payment mode
    showPayment(data) {
        const type = this.paymentMethods[data.typePaymentIndex].type;
        switch (type) {
            case 'OPERATOR':
                this.selectOperator(data);
                break;
            case 'WALLET':
                this.updateParametersWallet();
                break;
            default:
                break;
        }
    }
    /******************************** END FORM PAYMENT SERVICES*********************************************/
    /******************************** START WALLET PAYMENT *********************************************/
    paymentWalletConfirm(dataMessage, translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${dataMessage.title}`,
                message: `${translation[0]} ${dataMessage.contribution}
        ${dataMessage.device_name} ${translation[1]}`,
                buttons: [
                    {
                        text: `${translation[2]}`,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                        }
                    }, {
                        text: `${translation[3]}`,
                        handler: () => {
                            this.paidWithWallet();
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
    updateParametersWallet() {
        const translation = [];
        this.translate.get(['CONFIRM_PAY_CONTRIBUTION_SUBTEXT1', 'CONFIRM_PAY_CONTRIBUTION_SUBTEXT2', 'CANCEL_TEXT', 'YES_TEXT']).subscribe(trans => {
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT1);
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT2);
            translation.push(trans.CANCEL_TEXT);
            translation.push(trans.YES_TEXT);
            console.log(this.contributionData);
            this.paymentWalletConfirm(this.contributionData, translation);
        });
    }
    // Send the user contribution
    paidWithWallet() {
        this.loading = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        this.contribution.paidOldSessionTontineCautionWithWallet(this.contributionData)
            .subscribe((reponse) => {
            console.log(reponse);
            this.loading = false;
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG1').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.events.publish('modal-pay-seance');
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithWallet();
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    /******************************** START WALLET PAYMENT *********************************************/
    /******************************** START PAYPAL PAYMENT *********************************************/
    // update the paypal total amount
    updatePaypalAmount() {
        if (this.userPayMethodForm.value.type_payment_name === 'PAYPAL') {
            const amount = this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name) * this.contributionData.liste_part.length;
            this.userPayMethodForm.get('montantAvecFees').setValue(amount);
            if (this.contributionData.device_name !== this.userPayMethodForm.value.device_name) {
                this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.contributionData.montant).then(montantSansFees => {
                    if (montantSansFees) {
                        const amountFees = this.getAmountWithFees(montantSansFees, this.userPayMethodForm.value.device_name) * this.contributionData.liste_part.length;
                        this.userPayMethodForm.get('montantTotal').setValue(amountFees);
                        this.translate.get('PAIDMODE_MSG2').subscribe(value => {
                            this.paypalMessage = `${value} ${this.userPayMethodForm.value.montantAvecFees}
                 ${this.contributionData.device_name} =
                ${this.userPayMethodForm.value.montantTotal}
                ${this.userPayMethodForm.value.device_name}`;
                            this.setupPayPay();
                        });
                    }
                    else {
                        this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                            this.paypalMessage = value;
                        });
                    }
                });
            }
            else {
                this.userPayMethodForm.get('montantTotal').setValue(this.userPayMethodForm.value.montantAvecFees);
                this.translate.get('PAIDMODE_MSG2').subscribe(value => {
                    this.paypalMessage = `${value}  ${this.userPayMethodForm.value.montantTotal}
            ${this.userPayMethodForm.value.device_name}`;
                    this.setupPayPay();
                });
            }
        }
    }
    setupPayPay() {
        if (!this.paypal_initialized) {
            this.initPayPal();
        }
    }
    initPayPal() {
        if (this.userPayMethodForm.value.montantTotal > 0) {
            this.paypalLoading = true;
            this.paypal_initialized = true;
            let paypalbuttoncontainer = this.paypalbuttoncontainer.nativeElement;
            let _this = this;
            paypal.Button.render({
                env: 'production',
                style: {
                    size: 'responsive',
                    color: 'gold',
                    shape: 'pill',
                    label: 'checkout',
                    tagline: false
                },
                client: {
                    sandbox: 'ARIMcMamksC74CLp7Zavgn62RsKK0XDfjePxjU9gsWmcdzyI3AYz3PwADIktvUgCdhAwWCXPaBzCckOC',
                    production: 'AVdCN0ymBsPer15VtLbeNoZ3vkjkhap6vXoxwsWF3B0H4GM_mVQ5GVpJ2h4-G_AlVVIsBYWx4JpVVxLT'
                },
                // Show the buyer a 'Pay Now' button in the checkout flow
                commit: true,
                payment: function (data, actions) {
                    return actions.payment.create({
                        payment: {
                            transactions: [
                                {
                                    amount: {
                                        total: _this.userPayMethodForm.value.montantTotal,
                                        currency: _this.userPayMethodForm.value.device_name
                                    },
                                    description: 'Toupesu'
                                }
                            ]
                        }
                    });
                },
                // onAuthorize() is called when the buyer approves the payment
                onAuthorize: function (data, actions, error) {
                    if (error) {
                        _this.exitPayment();
                    }
                    if (error === 'INSTRUMENT_DECLINED') {
                        _this.exitPayment();
                    }
                    // Make a call to the REST ui to execute the payment
                    return actions.payment.execute().then(function () {
                        const params = {
                            refID: _this.reference,
                            amount: _this.userPayMethodForm.value.montantTotal,
                            moneyCode: _this.userPayMethodForm.value.device_name,
                            product: 'Toupesu',
                            paypalID: data.paymentToken.split('-')[1]
                        };
                        // Save and check the payment result
                        _this.userPayMethodForm.get('pay_token').setValue(data.paymentToken.split('-')[1]);
                        _this.api.post('livepaygateway/paypal/savePayRequest', JSON.stringify(params)).subscribe((ans) => {
                            if (ans && ans.success) {
                                _this.updateParametersPaypal(data.paymentToken.split('-')[1]);
                            }
                        }, error => {
                            _this.updateParametersPaypal(data.paymentToken.split('-')[1]);
                        });
                    });
                },
                onCancel: function (data, actions) {
                    _this.exitPayment();
                },
                onClick: (data, actions) => {
                    _this.translate.get('TOPUP_TEXT1').subscribe(value => {
                        _this.ui.presentToast(value);
                    });
                }
            }, paypalbuttoncontainer);
            setTimeout(() => {
                this.paypalLoading = false;
            }, 2000);
        }
    }
    // Update parameters PAYPAL
    updateParametersPaypal(payToken) {
        // Add the handlefees to the amount
        if (this.contributionData.device_name === this.userPayMethodForm.value.device_name) {
            const params = {
                seance_id: this.contributionData.seance_id,
                country_id: this.userPayMethodForm.value.countryId,
                typecontribution_id: this.contributionData.typecontribution_id,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                montant_d_une_part_sans_handing_fees: this.contributionData.montant,
                montant_d_une_part_avec_handling_fees: this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name),
                device_name: this.contributionData.device_name,
                sens_contribution: 'entrant',
                liste_part: this.contributionData.liste_part,
                pay_token: payToken,
                pin: this.contributionData.pin,
                operator: 'paypal'
            };
            this.makeDepositOperatorWithoutConversion(params);
        }
        else {
            this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.contributionData.montant).then(montantSansFees => {
                if (montantSansFees) {
                    const params = {
                        seance_id: this.contributionData.seance_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        typecontribution_id: this.contributionData.typecontribution_id,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        device_depart: this.userPayMethodForm.value.device_name,
                        device_arrivee: this.contributionData.device_name,
                        montant_device_depart_d_une_part_sans_handling_fees: montantSansFees ? montantSansFees : 0,
                        montant_device_depart_d_une_part_avec_handling_fees: this.getAmountWithFees(montantSansFees, this.userPayMethodForm.value.device_name),
                        montant_device_arrivee_d_une_part_sans_handling_fees: this.contributionData.montant,
                        sens_contribution: 'entrant',
                        liste_part: this.contributionData.liste_part,
                        pay_token: payToken,
                        pin: this.contributionData.pin,
                        operator: 'paypal'
                    };
                    this.makeDepositOperatorWithConversion(params);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
    }
    /******************************** END PAYPAL PAYMENT *********************************************/
    /******************************** START MTN PAYMENT *********************************************/
    // Update parameters  Mtn payment
    updateParametersMtn() {
        const amount = this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name) * this.contributionData.liste_part.length;
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (this.contributionData.device_name !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.contributionData.montant).then(montantSansFees => {
                if (montantSansFees) {
                    const params = {
                        seance_id: this.contributionData.seance_id,
                        typecontribution_id: this.contributionData.typecontribution_id,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        device_depart: this.userPayMethodForm.value.device_name,
                        device_arrivee: this.contributionData.device_name,
                        montant_device_depart_d_une_part_sans_handling_fees: montantSansFees ? montantSansFees : 0,
                        montant_device_depart_d_une_part_avec_handling_fees: this.getAmountWithFees(montantSansFees, this.userPayMethodForm.value.device_name),
                        montant_device_arrivee_d_une_part_sans_handling_fees: this.contributionData.montant,
                        sens_contribution: 'entrant',
                        numero: this.userPayMethodForm.value.country_prefix + this.userPayMethodForm.value.phone,
                        liste_part: this.contributionData.liste_part,
                        pin: this.contributionData.pin,
                        operator: 'MTN'
                    };
                    this.contributionDataParams = params;
                    const messageConfirmation = {
                        title: this.contributionData.title, contribution: this.contributionDataParams.montant_device_depart_d_une_part_avec_handling_fees * this.contributionData.liste_part.length,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const params = {
                seance_id: this.contributionData.seance_id,
                typecontribution_id: this.contributionData.typecontribution_id,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                device_name: this.contributionData.device_name,
                country_id: this.userPayMethodForm.value.countryId,
                montant_d_une_part_sans_handing_fees: this.contributionData.montant,
                montant_d_une_part_avec_handling_fees: this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name),
                sens_contribution: 'entrant',
                numero: this.userPayMethodForm.value.country_prefix + this.userPayMethodForm.value.phone,
                liste_part: this.contributionData.liste_part,
                pin: this.contributionData.pin,
                operator: 'MTN'
            };
            this.contributionDataParams = params;
            const messageConfirmation = {
                title: this.contributionData.title, contribution: this.userPayMethodForm.value.montantAvecFees,
                device_name: this.contributionData.device_name, type: 'notconverted'
            };
            this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END MTN PAYMENT *********************************************/
    /******************************** START ORANGE PAYMENT *********************************************/
    // Update parameters  Orange payment
    updateParametersOrange() {
        const amount = this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name) * this.contributionData.liste_part.length;
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (this.contributionData.device_name !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.contributionData.montant).then(montantSansFees => {
                if (montantSansFees) {
                    const params = {
                        seance_id: this.contributionData.seance_id,
                        typecontribution_id: this.contributionData.typecontribution_id,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        device_depart: this.userPayMethodForm.value.device_name,
                        device_arrivee: this.contributionData.device_name,
                        montant_device_depart_d_une_part_sans_handling_fees: montantSansFees ? montantSansFees : 0,
                        montant_device_depart_d_une_part_avec_handling_fees: this.getAmountWithFees(montantSansFees, this.userPayMethodForm.value.device_name),
                        montant_device_arrivee_d_une_part_sans_handling_fees: this.contributionData.montant,
                        montant_device_arrivee_d_une_part_avec_handling_fees: this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name),
                        sens_contribution: 'entrant',
                        numero: this.userPayMethodForm.value.country_prefix + this.userPayMethodForm.value.phone,
                        liste_part: this.contributionData.liste_part,
                        pin: this.contributionData.pin,
                        operator: 'orange'
                    };
                    this.contributionDataParams = params;
                    const messageConfirmation = {
                        title: this.contributionData.title, contribution: this.contributionDataParams.montant_device_depart_d_une_part_avec_handling_fees * this.contributionData.liste_part.length,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const params = {
                seance_id: this.contributionData.seance_id,
                typecontribution_id: this.contributionData.typecontribution_id,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                device_name: this.contributionData.device_name,
                country_id: this.userPayMethodForm.value.countryId,
                montant_d_une_part_sans_handing_fees: this.contributionData.montant,
                montant_d_une_part_avec_handling_fees: this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name),
                sens_contribution: 'entrant',
                numero: this.userPayMethodForm.value.country_prefix + this.userPayMethodForm.value.phone,
                liste_part: this.contributionData.liste_part,
                pin: this.contributionData.pin,
                operator: 'orange'
            };
            this.contributionDataParams = params;
            const messageConfirmation = {
                title: this.contributionData.title, contribution: this.userPayMethodForm.value.montantAvecFees,
                device_name: this.contributionData.device_name, type: 'notconverted'
            };
            this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END ORANGE PAYMENT *********************************************/
    /******************************** START OZOW PAYMENT *********************************************/
    // Update parameters OZOW payment
    updateParametersOzow() {
        const amount = this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name) * this.contributionData.liste_part.length;
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (this.contributionData.device_name !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.contributionData.montant).then(montantSansFees => {
                if (montantSansFees) {
                    const params = {
                        seance_id: this.contributionData.seance_id,
                        typecontribution_id: this.contributionData.typecontribution_id,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        device_depart: this.userPayMethodForm.value.device_name,
                        device_arrivee: this.contributionData.device_name,
                        montant_device_depart_d_une_part_sans_handling_fees: montantSansFees ? montantSansFees : 0,
                        montant_device_depart_d_une_part_avec_handling_fees: this.getAmountWithFees(montantSansFees, this.userPayMethodForm.value.device_name),
                        montant_device_arrivee_d_une_part_sans_handling_fees: this.contributionData.montant,
                        sens_contribution: 'entrant',
                        numero: this.userPayMethodForm.value.country_prefix + this.userPayMethodForm.value.phone,
                        liste_part: this.contributionData.liste_part,
                        pin: this.contributionData.pin,
                        operator: 'ozow'
                    };
                    this.contributionDataParams = params;
                    const messageConfirmation = {
                        title: this.contributionData.title, contribution: this.contributionDataParams.montant_device_depart_d_une_part_avec_handling_fees * this.contributionData.liste_part.length,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const params = {
                seance_id: this.contributionData.seance_id,
                typecontribution_id: this.contributionData.typecontribution_id,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                device_name: this.contributionData.device_name,
                country_id: this.userPayMethodForm.value.countryId,
                montant_d_une_part_sans_handing_fees: this.contributionData.montant,
                montant_d_une_part_avec_handling_fees: this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name),
                sens_contribution: 'entrant',
                numero: this.userPayMethodForm.value.country_prefix + this.userPayMethodForm.value.phone,
                liste_part: this.contributionData.liste_part,
                pin: this.contributionData.pin,
                operator: 'ozow'
            };
            this.contributionDataParams = params;
            const messageConfirmation = {
                title: this.contributionData.title, contribution: this.userPayMethodForm.value.montantAvecFees,
                device_name: this.contributionData.device_name, type: 'notconverted'
            };
            this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END OZOW PAYMENT *********************************************/
    /******************************** START FORM COMMON PAYMENT SERVICES *********************************************/
    showConfirmationMessage(messageConfirmation, contributionDataParams) {
        const translation = [];
        this.translate.get(['CONFIRM_PAY_CONTRIBUTION_SUBTEXT1', 'CONFIRM_PAY_CONTRIBUTION_SUBTEXT2', 'CANCEL_TEXT', 'YES_TEXT']).subscribe(trans => {
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT1);
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT2);
            translation.push(trans.CANCEL_TEXT);
            translation.push(trans.YES_TEXT);
            this.paymentOperatorConfirm(messageConfirmation, contributionDataParams, translation);
        });
    }
    paymentOperatorConfirm(dataMessage, contributionDataParams, translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${dataMessage.title}`,
                message: `${translation[0]} ${dataMessage.contribution}
    ${dataMessage.device_name}  ${translation[1]}`,
                buttons: [
                    {
                        text: `${translation[2]}`,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                        }
                    }, {
                        text: `${translation[3]}`,
                        handler: () => {
                            if (dataMessage.type === 'converted') {
                                this.makeDepositOperatorWithConversion(contributionDataParams);
                            }
                            else if (dataMessage.type === 'notconverted') {
                                this.makeDepositOperatorWithoutConversion(contributionDataParams);
                            }
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
    // make deposit  with operator and conversion
    makeDepositOperatorWithConversion(data) {
        this.loading = true;
        this.showLoadingMessage(data);
        this.contribution.contributeWithOperatorWithConversionPastSeance(data)
            .subscribe((reponse) => {
            this.loading = false;
            if (reponse && reponse.message === 'success') {
                // Send the reponse per operator
                this.sendResponsePerOperator(reponse, data.operator);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.makeDepositOperatorWithConversion(data);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    // make deposit  with operator without conversion
    makeDepositOperatorWithoutConversion(data) {
        this.loading = true;
        this.showLoadingMessage(data);
        this.contribution.contributeWithOperatorWithoutConversionPastSeance(data)
            .subscribe((reponse) => {
            this.loading = false;
            if (reponse && reponse.message === 'success') {
                // Send the reponse per operator
                this.sendResponsePerOperator(reponse, data.operator);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.makeDepositOperatorWithoutConversion(data);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    // =======  Payment process result ===================
    // Check the status througth operator
    checkPaymentStatus(payToken, operator) {
        this.cron = setInterval(() => {
            this.checkPaymentStatusServer(payToken, operator);
        }, 30000);
    }
    // Check the payment Status
    checkPaymentStatusServer(payToken, operator) {
        this.wallet.getStatusPaymentOperator(payToken, operator).subscribe((reponse) => {
            if (reponse && reponse.message === 'OK') {
                this.showPaymentResult();
                this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG1').subscribe(value => {
                    this.ui.presentToast(value);
                });
            }
        }, error => {
            if (error && error.error && error.error.message === 'FAIL') {
                this.exitPayment();
                this.translate.get('ERROR_PAY_CONTRIBUTION_MSG').subscribe(value => {
                    this.ui.presentToast(value);
                });
            }
            else {
                this.exitPayment();
                this.translate.get('ERROR_PAY_CONTRIBUTION_MSG').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.errorService.manageError(error);
            }
        });
    }
    // Send message per operator
    sendResponsePerOperator(data, operator) {
        this.checkPaymentStatus(data.pay_token, operator);
        const reference = data && data.refID ? data.refID : '';
        this.refernceId = reference;
        this.cancelPaymentResult(reference);
        switch (operator) {
            case 'ozow':
                window.open(data.url, '_blank');
                break;
            default:
                break;
        }
    }
    // show the loading message
    showLoadingMessage(data) {
        switch (data.operator) {
            case 'orange':
                this.translate.get('ORANGE_PAYMENT_MESSAGE').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'MTN':
                this.translate.get('MTN_PAYMENT_MESSAGE').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'paypal':
                this.translate.get('TOPUP_TEXT1').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'ozow':
                this.translate.get('TOPUP_TEXT1').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            default:
                break;
        }
    }
    // clear the time out
    clearTimeoutData() {
        if (this.timeOut) {
            clearTimeout(this.timeOut);
            this.timeOut = null;
        }
    }
    // clear the set interval
    clearSetIntervalData() {
        if (this.cron) {
            clearInterval(this.cron);
        }
        this.cron = null;
        for (let i = 0; i < 1000; i++) {
            clearInterval(i);
        }
    }
    // Show payment confirmation dialog
    showPaymentResult() {
        this.loading = false;
        this.ui.dismissLoading();
        this.initPaymentForm();
        this.clearTimeoutData();
        this.clearSetIntervalData();
        this.events.publish('modal-pay-seance');
    }
    // Cancel the payment
    cancelPaymentResult(refence) {
        this.timeOut = setTimeout(() => {
            this.exitPayment();
            this.translate.get(['TRANSACTION_CANCEL', 'TOPUP_MSG9']).subscribe(trans => {
                this.ui.presentAlert(`${trans.TRANSACTION_CANCEL}`, `${trans.TOPUP_MSG9} ${refence}`);
            });
        }, 300000);
    }
    // exit the payment directly
    exitPayment() {
        this.loading = false;
        this.ui.dismissLoading();
        this.getAllMethodPaymentType();
        this.initPaymentForm();
        this.initFormMessage();
        this.clearTimeoutData();
        this.clearSetIntervalData();
    }
    ionicViewDidLeave() {
        if (this.loading) {
            this.exitPayment();
        }
    }
    // listen to back button
    hardwareBackButton() {
        this.platform.backButton.subscribe(() => {
            const url = this.router.url;
            if (url === '/dashboard/my-tontines/' + this.tontineData.tontine.tontine_id + '/contrib-not-paid') {
                if (this.refernceId) {
                    this.cancelPaymentResult(this.refernceId);
                }
                else {
                    this.exitPayment();
                }
            }
        });
    }
};
PaidmodeCautionSenceComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_17__["UserService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_6__["Platform"] },
    { type: _service_payment_global_data_service__WEBPACK_IMPORTED_MODULE_16__["PaymentGlobalDataService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_15__["Router"] },
    { type: _service_api_service__WEBPACK_IMPORTED_MODULE_20__["ApiService"] },
    { type: _service_currency_service__WEBPACK_IMPORTED_MODULE_11__["CurrencyService"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_18__["EventService"] },
    { type: src_app_dashboard_my_tontines_services_contribution_service__WEBPACK_IMPORTED_MODULE_10__["ContributionService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_6__["AlertController"] },
    { type: src_app_dashboard_my_wallet_service_wallet_service__WEBPACK_IMPORTED_MODULE_12__["WalletService"] },
    { type: src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_9__["TontineService"] },
    { type: _service_error_service__WEBPACK_IMPORTED_MODULE_5__["ErrorService"] },
    { type: _service_location_service__WEBPACK_IMPORTED_MODULE_7__["LocationService"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__["TranslateService"] },
    { type: _service_form_utils_service__WEBPACK_IMPORTED_MODULE_13__["FormUtilsService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] },
    { type: _service_payment_error_service__WEBPACK_IMPORTED_MODULE_14__["PaymentErrorService"] },
    { type: _service_ui_service__WEBPACK_IMPORTED_MODULE_19__["UiService"] }
];
PaidmodeCautionSenceComponent.propDecorators = {
    amountPay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    paypalbuttoncontainer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: ['paypalbuttoncontainer', { static: false },] }]
};
PaidmodeCautionSenceComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-paidmode-seance-caution',
        template: _raw_loader_paidmode_seance_caution_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_paidmode_seance_caution_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], PaidmodeCautionSenceComponent);



/***/ }),

/***/ "FLu1":
/*!*********************************************************!*\
  !*** ./src/app/shared/service/payment-error.service.ts ***!
  \*********************************************************/
/*! exports provided: PaymentErrorService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaymentErrorService", function() { return PaymentErrorService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var _error_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error.service */ "TkUd");
/* harmony import */ var _ui_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui.service */ "QB/Y");





let PaymentErrorService = class PaymentErrorService {
    constructor(ui, translate, error) {
        this.ui = ui;
        this.translate = translate;
        this.error = error;
    }
    managePaymentOfflineError(error) {
        if (error.error.remplir_tous_les_champs) {
            this.translate.get('DEBT_PARAMETER_NOTFOUND').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.device_id_not_exist) {
            this.translate.get('CURRENCY_REQUIRED').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.seance_id_not_exist) {
            this.translate.get('DEBT_SEANCE_NOTFOUND').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.device_id_not_match_device_id_tontine) {
            this.translate.get('DEBT_CURRENCY_NOTFOUND').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.typecontribution_id_not_exist) {
            this.translate.get('TONTINE_PENALTY_MSG9').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.total_amount_proof_is_greather_than_total_amount_receipt) {
            this.translate.get('DEBT_TOTAL_AMOUNT_PROOF_MSG').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.tontine_id_not_exist) {
            this.translate.get('TONTINE_INVITE_TEXT10').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.bouffe_id_not_exist) {
            this.translate.get('BENEFICIARY_NOT_EXIST_TEXT').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.user_not_authorize) {
            this.translate.get('ADD_SHARE_MSG6').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.total_amount_is_greather_than_bouffe_amount) {
            this.translate.get('AMOUNT_GREATHER_THAN_JACKPOT').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.this_admin_has_already_validate) {
            this.translate.get('ADMIN_ALREADY_VALIDATE').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.montant_online_is_greather_than_online_balance) {
            this.translate.get('ONLINE_AMOUNT_GREATHER_THAN_ONLINE_BALANCE').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.montant_offline_is_greather_than_bank_balance) {
            this.translate.get('OFFLINE_AMOUNT_GREATHER_THAN_OFFLINE_BALANCE').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.this_bouffe_is_already_initiated) {
            this.translate.get('JACKPOT_INITIATE_TEXT').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.remplir_tous_les_champs) {
            this.translate.get('DEBT_PARAMETER_NOTFOUND').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.user_not_authorized) {
            this.translate.get('ADD_SHARE_MSG6').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.total_amount_proof_is_greather_than_bouffe_amount) {
            this.translate.get('BENEFICIAL_AMOUNT_GREATHER_THAN_PROOF').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.sold_online_balance_is_insufficient) {
            this.translate.get('ONLINE_WALLET_BALANCE_INSUFFICIENT').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.typepaiement_id_not_exist) {
            this.translate.get('PAIDMODE_MSG3').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.currency_name_not_exist) {
            this.translate.get('DEBT_CURRENCY_NOTFOUND').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.type_caisse_tontine_id_not_exist) {
            this.translate.get('CAISSE_TONTINE_NOTFOUND').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.type_caisse_depart_id_not_exist) {
            this.translate.get('CAISSE_SOURCE_NOTFOUND').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.type_caisse_arrivee_id_not_exist) {
            this.translate.get('CAISSE_DESTINATION_NOTFOUND').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.offline_balance_insuffisant) {
            this.translate.get('BALANCE_OFFLINE_INSUFFICIENT').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.online_balance_insuffisant) {
            this.translate.get('BALANCE_ONLINE_INSUFFICIENT').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
    }
    managePaymentOnlineError(error) {
        if (error.error.remplir_tous_les_champs) {
            this.translate.get('DEBT_PARAMETER_NOTFOUND').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.device_id_not_exist) {
            this.translate.get('CURRENCY_REQUIRED').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.seance_id_not_exist) {
            this.translate.get('DEBT_SEANCE_NOTFOUND').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.seance_not_found) {
            this.translate.get('DEBT_SEANCE_NOTFOUND').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.device_id_not_match_device_id_tontine) {
            this.translate.get('DEBT_CURRENCY_NOTFOUND').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.typecontribution_id_not_exist) {
            this.translate.get('TONTINE_PENALTY_MSG9').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.total_amount_proof_is_greather_than_total_amount_receipt) {
            this.translate.get('DEBT_TOTAL_AMOUNT_PROOF_MSG').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.insufficient_balance) {
            this.translate.get('INSUFFICIENT_BALANCE_MSG').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.tontine_id_not_exist) {
            this.translate.get('TONTINE_INVITE_TEXT10').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.parameter_not_found) {
            this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG3').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.device_not_exist_for_operator) {
            this.translate.get('TOPUP_MSG1').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.device_not_exist || error.error.currency_not_exist) {
            this.translate.get('CURRENCY_DOES_NOT_EXIST').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.device_not_exist_in_portemonnaie_user) {
            this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG4').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.solde_insuffisant || error.error.solde_payeur_insuffisant) {
            this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG5').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.no_match_device_to_device_tontine) {
            this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG6').subscribe(value => {
                this.ui.presentToast(`${value} ${error.error.monnaie_tontine}`);
            });
        }
        if (error.error.montant_depasse_cout_part) {
            this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG7').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.typecontribution_not_exist) {
            this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG8').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.montant_restant_a_contribuer_grand) {
            this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG9').subscribe(value => {
                this.ui.presentToast(`${value} ${error.error.valeur_montant_restant_a_contribuer} ${error.error.monnaie_tontine ? error.error.monnaie_tontine : ''}`);
            });
        }
        if (error.error.aucune_penalite_a_payer) {
            this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG10').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.penalite_restante_a_payer_grand) {
            this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG11').subscribe(value => {
                this.ui.presentToast(`${value} ${error.error.penalite_restante_a_payer} ${error.error.monnaie_tontine ? error.error.monnaie_tontine : ''}`);
            });
        }
        if (error.error.tontine_status_inactive) {
            this.translate.get('TONTINE_EVENT_ERROR1').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.tontine_period_inactive) {
            this.translate.get('TONTINE_EVENT_ERROR3').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        if (error.error.device_depart_id_not_exist) {
            this.translate.get('CURRENCY_DEPART_NOT_EXIST').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.device_arrivee_id_not_match_device_id_tontine) {
            this.translate.get('CURRENCY_DESTINATION_NOTMATCH_STOKVEL_CURRENCY').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.typepaiement_id_not_exist) {
            this.translate.get('PAIDMODE_MSG3').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.country_not_exist || error.error.country_id_not_exist) {
            this.translate.get('COUNTRY_NOT_EXIST').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.invalid_payment) {
            this.translate.get('INVALID_DEPOSIT').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.device_arrivee_id_not_exist) {
            this.translate.get('CURRENCY_DESTINATION_NOT_EXIST').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.type_caisse_tontine_id_not_exist) {
            this.translate.get('CAISSE_TONTINE_NOTFOUND').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.user_not_authorize) {
            this.translate.get('ADD_SHARE_MSG6').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.pin_incorrect) {
            this.translate.get('M_PIN_INVALID').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.solde_payeur_insuffisant) {
            this.translate.get('M_INSUFFICIENT_SOLDE_ERROR').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.loan_request_id_not_exist) {
            this.translate.get('LOAN_REQUEST_NOT_EXIST').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.amount_is_greater_than_rest_to_pay) {
            this.translate.get('AMOUNT_GREATHER_THAN_REST_TO_PAY').subscribe(trans => {
                this.ui.presentToast(`${trans} ${error.error.reste_a_payer}`);
            });
        }
        if (error.error.swap_request_id_not_exist) {
            this.translate.get('SWAP_REQUEST_NOT_EXIST').subscribe(trans => {
                this.ui.presentToast(`${trans}`);
            });
        }
        if (error.error.swap_request_id_is_already_completed) {
            this.translate.get('SWAP_REQUEST_ALREADY_COMPLETE', { direction: `${error.error.direction}` }).subscribe(trans => {
                this.ui.presentToast(`${trans}`);
            });
        }
        if (error.error.currency_not_match_currency_swap_request) {
            this.translate.get('CURRENCY_NOT_MATCH_CURRENCY_REQUEST').subscribe(trans => {
                this.ui.presentToast(`${trans}`);
            });
        }
    }
};
PaymentErrorService.ctorParameters = () => [
    { type: _ui_service__WEBPACK_IMPORTED_MODULE_4__["UiService"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_2__["TranslateService"] },
    { type: _error_service__WEBPACK_IMPORTED_MODULE_3__["ErrorService"] }
];
PaymentErrorService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], PaymentErrorService);



/***/ }),

/***/ "FXXE":
/*!*********************************************************!*\
  !*** ./src/app/shared/bankmode/bankmode.component.scss ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJiYW5rbW9kZS5jb21wb25lbnQuc2NzcyJ9 */");

/***/ }),

/***/ "Fqet":
/*!*****************************************************************!*\
  !*** ./src/app/shared/bankmode-loan/bankmode-loan.component.ts ***!
  \*****************************************************************/
/*! exports provided: BankmodeLoanComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BankmodeLoanComponent", function() { return BankmodeLoanComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_bankmode_loan_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./bankmode-loan.component.html */ "tnVG");
/* harmony import */ var _bankmode_loan_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bankmode-loan.component.scss */ "To8A");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var _service_error_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../service/error.service */ "TkUd");
/* harmony import */ var src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/tontine.service */ "/WEl");
/* harmony import */ var _service_payment_error_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../service/payment-error.service */ "FLu1");
/* harmony import */ var src_app_dashboard_my_tontines_tontine_detail_loans_service_loan_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/dashboard/my-tontines/tontine-detail/loans/service/loan.service */ "TH4E");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../service/events.service */ "r5fM");
/* harmony import */ var _service_ui_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../service/ui.service */ "QB/Y");
/* harmony import */ var _service_plugin_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../service/plugin.service */ "NxmL");













let BankmodeLoanComponent = class BankmodeLoanComponent {
    constructor(fb, translate, events, tontine, error, loanService, ui, paymentError, plugin) {
        this.fb = fb;
        this.translate = translate;
        this.events = events;
        this.tontine = tontine;
        this.error = error;
        this.loanService = loanService;
        this.ui = ui;
        this.paymentError = paymentError;
        this.plugin = plugin;
        this.loadingPay = false;
        this.currentTontine = this.tontine.getCurrentTontineData();
        this.contributionData = this.loanService.getLoanData();
    }
    ngOnInit() {
        this.initFormMessage();
        this.initTradionnalPayment();
    }
    // Getters
    get amount() {
        return this.paymentForm.get('montant_total');
    }
    get proofMessage() {
        return this.paymentForm.get('proofMessage');
    }
    get proof() {
        return this.paymentForm.get('receipt');
    }
    // Init the form message
    initFormMessage() {
        this.translate.get(['REGISTER_PHONE_REQUIRED', 'AMOUNT_REQUIRED', 'PAID_MODE_REQUIRED', 'M_COUNTRY_REQUIRED'])
            .subscribe(value => {
            this.validationMessages = {
                payementtype: [
                    { type: 'required', message: value.PAID_MODE_REQUIRED }
                ],
                phone: [
                    { type: 'required', message: value.REGISTER_PHONE_REQUIRED },
                ],
                amount: [
                    { type: 'required', message: value.AMOUNT_REQUIRED }
                ],
                country_id: [
                    { type: 'required', message: value.M_COUNTRY_REQUIRED }
                ]
            };
        });
    }
    // Init traditional banking payment
    initTradionnalPayment() {
        this.paymentForm = this.fb.group({
            currency: [this.contributionData.currency_name],
            montant_total: [{ value: this.amountPay, disabled: this.type === 'interest' ? true : false }, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].min(1), _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].max(this.amountPay)])],
            proofMessage: [''],
            receipt: [''],
            liste_proof: [[]]
        });
    }
    // update parameters
    updateParameters(data) {
        let amountToPay = parseFloat(this.paymentForm.value.montant_total);
        const itemList = data.list_loan;
        let currentAmount = 0;
        const itemUpdates = [];
        itemList.forEach(loan => {
            currentAmount = amountToPay - parseFloat(loan.amount);
            if (currentAmount >= 0) {
                itemUpdates.push(loan);
                amountToPay = currentAmount;
            }
            else {
                if (amountToPay > 0) {
                    itemUpdates.push({ loan_request_id: loan.loan_request_id, amount: amountToPay });
                }
                amountToPay = 0;
            }
        });
        data.list_loan = itemUpdates;
        return data;
    }
    // Get the payment proofs
    getProof() {
        this.plugin.getPicture().subscribe((picture) => {
            if (picture) {
                setTimeout(() => {
                    this.paymentForm.get('receipt').setValue(picture);
                }, 200);
            }
        });
    }
    // paid loan with bank
    paidWithBank(contributionData) {
        this.paymentForm.get('liste_proof').setValue([{
                montant: contributionData.type === 'loan-interest' ? this.paymentForm.value.montant_total : this.amountPay,
                description: this.paymentForm.value.proofMessage,
                receipt: this.paymentForm.value.receipt
            }]);
        switch (contributionData.type) {
            case 'loan-interest':
                const param1 = this.updateParameters(contributionData);
                param1.liste_proof = this.paymentForm.value.liste_proof;
                param1.montant_total = this.paymentForm.value.montant_total;
                this.paidWithBankLoanAndInterest(param1);
                break;
            case 'interest':
                const param2 = contributionData;
                param2.liste_proof = this.paymentForm.value.liste_proof;
                param2.montant_total = this.amountPay;
                this.paidWithBankInterest(param2);
                break;
            default:
                break;
        }
    }
    // Paid the contribution with bank
    paidWithBankLoanAndInterest(contributionData) {
        this.loadingPay = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        this.loanService.payManyLoanAndInterestWithBankTradi(contributionData)
            .subscribe((reponse) => {
            this.loadingPay = false;
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG1').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.initTradionnalPayment();
                this.events.publish('modal-close', { result: 'complete' });
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.error.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithBankLoanAndInterest(contributionData);
                        }
                        else {
                            this.ui.dismissLoading();
                            this.loadingPay = false;
                        }
                    });
                }
                else {
                    this.loadingPay = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loadingPay = false;
                this.ui.dismissLoading();
                this.error.manageError(error);
            }
        });
    }
    // Paid the contribution with bank
    paidWithBankInterest(contributionData) {
        this.loadingPay = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        this.loanService.payManyLoanInterestWithBankTradi(contributionData)
            .subscribe((reponse) => {
            this.loadingPay = false;
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG1').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.initTradionnalPayment();
                this.events.publish('modal-close', { result: 'complete' });
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.error.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithBankInterest(contributionData);
                        }
                        else {
                            this.ui.dismissLoading();
                            this.loadingPay = false;
                        }
                    });
                }
                else {
                    this.loadingPay = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loadingPay = false;
                this.ui.dismissLoading();
                this.error.manageError(error);
            }
        });
    }
};
BankmodeLoanComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_5__["TranslateService"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_10__["EventService"] },
    { type: src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_7__["TontineService"] },
    { type: _service_error_service__WEBPACK_IMPORTED_MODULE_6__["ErrorService"] },
    { type: src_app_dashboard_my_tontines_tontine_detail_loans_service_loan_service__WEBPACK_IMPORTED_MODULE_9__["LoanService"] },
    { type: _service_ui_service__WEBPACK_IMPORTED_MODULE_11__["UiService"] },
    { type: _service_payment_error_service__WEBPACK_IMPORTED_MODULE_8__["PaymentErrorService"] },
    { type: _service_plugin_service__WEBPACK_IMPORTED_MODULE_12__["PluginService"] }
];
BankmodeLoanComponent.propDecorators = {
    amountPay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    balance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};
BankmodeLoanComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-bankmode-loan',
        template: _raw_loader_bankmode_loan_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_bankmode_loan_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], BankmodeLoanComponent);



/***/ }),

/***/ "G2qg":
/*!*******************************************************************!*\
  !*** ./src/app/shared/paidmode-debt/paidmode-debt.component.scss ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwYWlkbW9kZS1kZWJ0LmNvbXBvbmVudC5zY3NzIn0= */");

/***/ }),

/***/ "GmDD":
/*!****************************************************!*\
  !*** ./src/app/shared/service/currency.service.ts ***!
  \****************************************************/
/*! exports provided: CurrencyService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CurrencyService", function() { return CurrencyService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "tk/3");
var CurrencyService_1;



let CurrencyService = CurrencyService_1 = class CurrencyService {
    constructor(http) {
        this.http = http;
    }
    static convertRate(ratefrom, to, amount) {
        return {
            path: '/api/convert?access_key=' + CurrencyService_1.accessKey
                + '&from=' + ratefrom
                + '&to=' + to
                + '&amount=' + amount
                + '& format=1',
            method: 'GET',
            params: ['base'],
            description: 'permet de recuperer le cours des devises'
        };
    }
    // Get all the currencies rate
    getCurrencyRate() {
        return this.http.get(CurrencyService_1.baseUrlCurrencyRate + CurrencyService_1.currencyRate.path);
    }
    // Get a conversion From currency to another one
    getConvertionRate(ratefrom, to, amount) {
        return this.http.get(CurrencyService_1.baseUrlCurrencyRate + CurrencyService_1.convertRate(ratefrom, to, amount).path);
    }
    // Get the rate of conversion
    rateConvert(rateFrom, rateTo, value) {
        return (value * (1 / rateFrom)) * rateTo;
    }
    // get the convertion rate
    conversionRateValue(cuurencyFrom, currencyTo) {
        return new Promise((resolve) => {
            this.getSelfConvertionRate().subscribe((data) => {
                const value = data.quotes['USD' + currencyTo] / data.quotes['USD' + cuurencyFrom];
                if (value > 20) {
                    resolve(Number((value + 0.02)).toFixed(6));
                }
                else {
                    resolve(Number((value + 0.00002)).toFixed(6));
                }
            }, error => {
                resolve(0);
            });
        });
    }
    getSelfConvertionRate() {
        return this.http.get(CurrencyService_1.baseUrlCurrencyRate + CurrencyService_1.currencyRate.path);
    }
    // Fisrt conversion of o a currency
    convert(convertFrom, convertTo, myAmout) {
        return new Promise((resolve) => {
            this.getSelfConvertionRate().subscribe((data) => {
                const value = this.rateConvert(data.quotes['USD' + convertFrom], data.quotes['USD' + convertTo], myAmout);
                if (convertTo === 'XAF' || convertTo === 'XOF' || convertTo === 'ZAR') {
                    resolve(Number((Math.ceil(value + 0.02))).toFixed(2));
                }
                else {
                    resolve(Number((value + 0.02)).toFixed(2));
                }
            }, error => {
                resolve(null);
            });
        });
    }
};
CurrencyService.baseUrlCurrencyRate = 'https://apilayer.net';
CurrencyService.accessKey = 'f68da29e3769951bc2f8f9b94b3ce652';
CurrencyService.currencyRate = {
    path: '/api/live?access_key=' + CurrencyService_1.accessKey,
    method: 'GET',
    params: ['base'],
    description: 'permet de recuperer le cours des devises'
};
CurrencyService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
];
CurrencyService = CurrencyService_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], CurrencyService);



/***/ }),

/***/ "H1su":
/*!*************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/countries/countries.component.html ***!
  \*************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header>\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"end\">\r\n      <ion-button slot=\"icon-only\" (click)=\"closeCountries()\">\r\n        <ion-icon color=\"warning\" name=\"close\" ></ion-icon>\r\n      </ion-button>\r\n    </ion-buttons>\r\n    <ion-title class=\"ion-text-center subtitle\">\r\n      {{'REGISTER_MTEXT1' | translate}}\r\n    </ion-title>\r\n  </ion-toolbar>\r\n  <ion-toolbar>\r\n      <ion-searchbar placeholder=\"{{ 'M_NAME_TEXT' | translate }}\" type=\"text\" debounce=\"500\" (ionChange)=\"searchForInvitation($event)\" type=\"text\"></ion-searchbar>\r\n  </ion-toolbar>\r\n</ion-header>\r\n<ion-content>\r\n  <ion-refresher slot=\"fixed\" (ionRefresh)=\"refreSher($event)\">\r\n    <ion-refresher-content\r\n      pullingIcon=\"reload-outline\"\r\n      refreshingSpinner=\"circles\"\r\n      refreshingText=\"{{ 'M_REFRESHING_TEXT' | translate }}\">\r\n    </ion-refresher-content>\r\n  </ion-refresher>\r\n  <p class=\"ion-text-center\"  *ngIf=\"loading\">\r\n    <ion-spinner  name=\"circles\"></ion-spinner>\r\n  </p>\r\n  <ion-grid *ngIf=\"states && states.length > 0 && !loading\">\r\n    <ion-row>\r\n      <ion-col size=\"12\">\r\n        <ion-radio-group (ionChange)=\"selectCountry($event)\">\r\n          <ion-item  *ngFor=\"let country of states\">\r\n            <ion-avatar slot=\"start\" *ngIf=\"country &&country.country_flag\">\r\n              <img src=\"{{country.country_flag ? country.country_flag : ''}}\">\r\n            </ion-avatar>\r\n            <ion-label>{{ country && country.country_label ? country.country_label : '' }}</ion-label>\r\n            <ion-radio slot=\"end\" [value]=\"country && country.code_country ? country.code_country : ''\"></ion-radio>\r\n          </ion-item>\r\n        </ion-radio-group>\r\n      </ion-col>\r\n    </ion-row>\r\n  </ion-grid>\r\n\r\n  <div  *ngIf=\"states && states.length === 0 && !loading &&!filter\">\r\n    <p  class=\"ion-padding ion-text-center\"> {{ 'EMPTY_COUNTRY_LIST' | translate }}</p>\r\n  </div>\r\n\r\n  <ion-infinite-scroll threshold=\"250px\" (ionInfinite)=\"infinteScrollData($event)\">\r\n    <ion-infinite-scroll-content\r\n      loadingSpinner=\"bubbles\"\r\n      loadingText=\"{{ 'M_LOADING_MORE_DATA' | translate }}\">\r\n    </ion-infinite-scroll-content>\r\n  </ion-infinite-scroll>\r\n</ion-content>");

/***/ }),

/***/ "I13D":
/*!*****************************************************************!*\
  !*** ./src/app/shared/paidmode-swap/paidmode-swap.component.ts ***!
  \*****************************************************************/
/*! exports provided: PaidmodeSwapComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaidmodeSwapComponent", function() { return PaidmodeSwapComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_paidmode_swap_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./paidmode-swap.component.html */ "opiV");
/* harmony import */ var _paidmode_swap_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./paidmode-swap.component.scss */ "fElj");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var _service_error_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../service/error.service */ "TkUd");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _service_location_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../service/location.service */ "e009");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var _service_api_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../service/api.service */ "6rCG");
/* harmony import */ var _service_currency_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../service/currency.service */ "GmDD");
/* harmony import */ var src_app_dashboard_my_wallet_service_wallet_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/dashboard/my-wallet/service/wallet.service */ "68js");
/* harmony import */ var _service_form_utils_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../service/form-utils.service */ "14LV");
/* harmony import */ var _service_payment_error_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../service/payment-error.service */ "FLu1");
/* harmony import */ var src_app_dashboard_pesuswap_services_swap_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! src/app/dashboard/pesuswap/services/swap.service */ "UrY2");
/* harmony import */ var _dashboard_pesuswap_services_swap_error_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../dashboard/pesuswap/services/swap-error.service */ "gWc9");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/tontine.service */ "/WEl");
/* harmony import */ var _service_payment_global_data_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../service/payment-global-data.service */ "T8hk");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../service/events.service */ "r5fM");
/* harmony import */ var src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! src/app/dashboard/user/service/user.service */ "6Hie");
/* harmony import */ var _service_ui_service__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../service/ui.service */ "QB/Y");






















let PaidmodeSwapComponent = class PaidmodeSwapComponent {
    constructor(fb, userService, events, ui, api, currency, paymentData, router, platform, formUtil, swapService, swapError, alertController, tontine, paymentError, wallet, errorService, location, translate, zone) {
        this.fb = fb;
        this.userService = userService;
        this.events = events;
        this.ui = ui;
        this.api = api;
        this.currency = currency;
        this.paymentData = paymentData;
        this.router = router;
        this.platform = platform;
        this.formUtil = formUtil;
        this.swapService = swapService;
        this.swapError = swapError;
        this.alertController = alertController;
        this.tontine = tontine;
        this.paymentError = paymentError;
        this.wallet = wallet;
        this.errorService = errorService;
        this.location = location;
        this.translate = translate;
        this.zone = zone;
        this.cron = null;
        this.timeOut = null;
        this.loadingOperator = false;
        this.loading = false;
        this.errorPhone = false;
        this.states = [];
        this.paymentMethods = [];
        this.listOfcountries = [];
        this.paypalMessage = '';
        this.reference = this.formUtil.getRandomId();
        this.userData = this.userService.getUserData();
        this.allPaymentMethods = [];
        this.contributionData = this.swapService.getCurrentSwapData();
        this.tontineData = this.tontine.getCurrentTontineData();
        this.paypalLoading = false;
        this.paypal_initialized = false;
        this.refernceId = '';
        this.hardwareBackButton();
    }
    ngOnInit() {
        this.getAllMethodPaymentType();
        this.initFormMessage();
        this.initPaymentForm();
    }
    /******************************** START FORM PAYMENT SERVICE *********************************************/
    // Form getters
    get phone() {
        return this.userPayMethodForm.get('phone');
    }
    get amountError() {
        return this.userPayMethodForm.get('montantAvecFees');
    }
    get country() {
        return this.userPayMethodForm.get('country_id');
    }
    get device_name() {
        return this.userPayMethodForm.get('device_name');
    }
    get payementtype() {
        return this.userPayMethodForm.get('typePaymentIndex');
    }
    get montantContributeError() {
        return this.userPayMethodForm.get('montant');
    }
    // Init form 
    initPaymentForm() {
        const currentPayment = this.paymentData.getDefaultPaymentMethod();
        this.userPayMethodForm = this.fb.group({
            country_id: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            country_prefix: [''],
            countryId: [''],
            handleFees: [''],
            handleFeesType: [''],
            device_name: [''],
            currency: [this.contributionData.currency],
            currencyLabel: [''],
            pay_token: [''],
            url: [''],
            montant: [{ value: this.contributionData.amount, disabled: true }, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].min(1), _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].max(this.contributionData.amount)])],
            montantAvecFees: ['0'],
            montantTotal: ['0'],
            type_payment_id: [currentPayment ? currentPayment.typepaiement_id : ''],
            type_payment_name: [currentPayment ? currentPayment.name : ''],
            typePaymentIndex: [0, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            phone: [currentPayment && this.formUtil.validatePhone(currentPayment.numero_compte) ? currentPayment.numero_compte : ''],
            numero: ['']
        });
    }
    // Init form message
    initFormMessage() {
        this.translate.get(['REGISTER_PHONE_REQUIRED', 'AMOUNT_REQUIRED', 'PAID_MODE_REQUIRED', 'M_COUNTRY_REQUIRED'])
            .subscribe(value => {
            this.validationMessages = {
                payementtype: [
                    { type: 'required', message: value.PAID_MODE_REQUIRED }
                ],
                phone: [
                    { type: 'required', message: value.REGISTER_PHONE_REQUIRED },
                ],
                amount: [
                    { type: 'required', message: value.AMOUNT_REQUIRED }
                ],
                country_id: [
                    { type: 'required', message: value.M_COUNTRY_REQUIRED }
                ]
            };
        });
    }
    // Remove space
    removeSpace() {
        this.userPayMethodForm.get('phone').setValue(this.paymentData.removeInputSpace(this.userPayMethodForm.value.phone));
    }
    // check if it is not  mobile operator
    checkMobileOperator() {
        return this.paymentData.isMobileOperator(this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can show paypal message
    canShowPaypalMessage() {
        return this.paymentData.hasPaypalMessage(this.paypalMessage, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can show  paypal button
    canShowPaypalButton() {
        return this.paymentData.hasPaypalButton(this.paypal_initialized, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can make payment 
    canPay() {
        return this.paymentData.canShowPayment(this.userPayMethodForm.valid, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex], this.userPayMethodForm.value.phone, this.errorPhone);
    }
    // check if emial or phone is valid
    checckEmailOrPhone(inputValue, index) {
        this.removeSpace();
        this.userPayMethodForm.get('type_payment_id').setValue(this.paymentMethods[index].id);
        switch (this.paymentMethods[index].name) {
            case 'ORANGE MONEY':
                this.errorPhone = !this.formUtil.validatePhone(inputValue);
                if (!this.errorPhone) {
                    this.userPayMethodForm.get('numero').setValue(this.userPayMethodForm.value.country_prefix +
                        '' + this.userPayMethodForm.value.phone);
                }
                break;
            case 'MTN MOBILE MONEY':
                this.errorPhone = !this.formUtil.validatePhone(inputValue);
                if (!this.errorPhone) {
                    this.userPayMethodForm.get('numero').setValue(this.userPayMethodForm.value.country_prefix +
                        '' + this.userPayMethodForm.value.phone);
                }
                break;
            default:
                break;
        }
    }
    // get all payment method
    getAllMethodPaymentType() {
        this.loadingOperator = true;
        this.userService.getAllMethodPaymentType().subscribe((reponse) => {
            this.paymentMethods = [];
            this.loadingOperator = false;
            if (reponse && reponse.typePayment && reponse.typePayment.length > 0) {
                this.paymentMethods = this.paymentData.formatPaymentMethodResponseContribution(reponse.typePayment);
            }
            const defaultMethod = [{
                    id: 0, country_id: 0, logo: 'assets/pesuwallet.jpg',
                    currency: this.contributionData.currency, name: 'WALLET', placeholder: '',
                    handling_fees: 0,
                    type_handling_fees: 'valeur'
                }];
            this.paymentMethods = defaultMethod.concat(this.paymentMethods);
            this.allPaymentMethods = this.paymentMethods;
            this.getCountries(false);
        }, error => {
            this.loadingOperator = false;
            this.paymentMethods.push({
                id: 0, country_id: 0, logo: 'assets/pesuwallet.jpg',
                currency: this.contributionData.currency, name: 'WALLET', placeholder: '',
                handling_fees: 0,
                type_handling_fees: 'valeur'
            });
            this.allPaymentMethods = this.paymentMethods;
            this.getCountries(false);
            this.errorService.manageError(error);
        });
    }
    // Get all countries
    getCountries(refresher) {
        this.location.getAllCountries(refresher).then((countries) => {
            // Get active country
            countries.forEach(country => {
                if (country.active === 1) {
                    this.listOfcountries.push(country.country_id);
                    if (country.default_country === 'yes') {
                        this.defautCountry = country.country_id;
                    }
                }
            });
            this.states = this.paymentData.formatCountriesData(countries);
            this.zone.run(() => {
                this.states = this.states;
            });
            // Get the the current country
            this.getCurrentCountry(false);
        });
    }
    // Set defaulft country parameter
    setDefaultCountry() {
        // Get the list of country
        let countryExist = false;
        this.listOfcountries.forEach(countryId => {
            if (countryId === this.userPayMethodForm.value.country_id) {
                this.updateCurrencyCountry(this.userPayMethodForm.value.country_id);
                countryExist = true;
            }
        });
        // We set the default coutry
        if (!countryExist) {
            this.userPayMethodForm.get('country_id').setValue(this.defautCountry);
            this.updateCurrencyCountry(this.defautCountry);
        }
    }
    // Update the country info country prfix
    updateCurrencyCountry(countryId) {
        this.zone.run(() => {
            this.paymentMethods = [];
        });
        setTimeout(() => {
            this.states.forEach(state => {
                if (parseInt(state.country_id, 10) === parseInt(countryId, 10)) {
                    this.updateFormData(state);
                }
            });
        }, 300);
    }
    // Set the default country
    getCurrentCountry(refresher) {
        const userCountry = this.location.getCurrentUserCountry();
        if (userCountry) {
            if (userCountry.active === 1) {
                this.updateFormData(userCountry);
            }
            else {
                this.setDefaultCountry();
            }
        }
        else {
            this.location.getCurrentCountryInfo(refresher).then((country) => {
                if (country) {
                    this.defaultState = country.settings;
                    if (this.defaultState.active === 1) {
                        this.updateFormData(this.defaultState);
                    }
                    else {
                        this.setDefaultCountry();
                    }
                }
                else {
                    this.setDefaultCountry();
                }
            }).catch(error => {
            });
        }
    }
    // update the form data
    updateFormData(country) {
        if (country) {
            this.userPayMethodForm.get('countryId').setValue(country.country_id);
            this.userPayMethodForm.get('country_prefix').setValue(country.country_prefixe);
            this.userPayMethodForm.get('currency').setValue(country.device_name);
            this.userPayMethodForm.get('handleFees').setValue(country.handling_fees);
            this.userPayMethodForm.get('handleFeesType').setValue(country.type_handling_fees);
            this.userPayMethodForm.get('currencyLabel').setValue(country.currency_label);
            setTimeout(() => {
                this.userPayMethodForm.get('country_id').setValue(country.country_id);
                this.updatePaymentsMethods(country.country_id);
            }, 200);
        }
    }
    updatePaymentsMethods(countryId) {
        // update the payment method
        const paymentsMethods = [];
        this.paymentMethods = [];
        this.allPaymentMethods.forEach(payment => {
            if (payment.country_id === countryId || payment.country_id === 0) {
                paymentsMethods.push(payment);
            }
        });
        this.paymentMethods = paymentsMethods;
        if (this.paymentMethods && this.paymentMethods.length > 0) {
            this.updatePaymentMethod(0);
        }
    }
    // Update the payment method
    updatePaymentMethod(index) {
        if (this.paymentMethods[index]) {
            this.userPayMethodForm.get('type_payment_id').setValue(this.paymentMethods[index].id);
            this.userPayMethodForm.get('type_payment_name').setValue(this.paymentMethods[index].name);
            this.userPayMethodForm.get('device_name').setValue(this.paymentMethods[index].currency);
            this.userPayMethodForm.get('handleFees').setValue(this.paymentMethods[index].handling_fees);
            this.userPayMethodForm.get('handleFeesType').setValue(this.paymentMethods[index].type_handling_fees);
            this.zone.run(() => {
                this.userPayMethodForm.get('typePaymentIndex').setValue(index);
            });
        }
        if (this.paymentMethods && this.paymentMethods[index] &&
            this.paymentMethods[index].name === 'PAYPAL') {
            this.paypal_initialized = false;
            this.updatePaypalAmount();
        }
    }
    // Calucalte the payment with handlfees
    getAmountFees(amountShare, devise) {
        return this.paymentData.getHandleFeesWithDevise(amountShare, devise, this.userPayMethodForm.value.handleFees, this.userPayMethodForm.value.handleFeesType);
    }
    // Show the payment mode
    showPayment(mode) {
        switch (mode.type_payment_name) {
            case 'ORANGE MONEY':
                this.updateParametersOrange();
                break;
            case 'OZOW':
                this.updateParametersOzow();
                break;
            case 'MTN MOBILE MONEY':
                this.updateParametersMtn();
                break;
            case 'WALLET':
                this.updateParametersWallet();
                break;
            default:
                break;
        }
    }
    /******************************** END FORM PAYMENT SERVICE *********************************************/
    /******************************** START WALLET PAYMENT *********************************************/
    // make the payment
    paymentWalletConfirm(dataMessage, translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${translation[0]}`,
                message: `${translation[1]} ${dataMessage.amount}
      ${dataMessage.currency} ${translation[2]}`,
                buttons: [
                    {
                        text: `${translation[3]}`,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                        }
                    }, {
                        text: `${translation[4]}`,
                        handler: () => {
                            this.paidWithWalletSwap(dataMessage);
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
    updateParametersWallet() {
        const translation = [];
        this.translate.get(['PAY_SWAP_TEXT', 'CONFIRM_PAY_CONTRIBUTION_SUBTEXT1', 'CONFIRM_PAY_CONTRIBUTION_SUBTEXT2', 'CANCEL_TEXT', 'YES_TEXT']).subscribe(trans => {
            translation.push(trans.PAY_SWAP_TEXT);
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT1);
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT2);
            translation.push(trans.CANCEL_TEXT);
            translation.push(trans.YES_TEXT);
            this.paymentWalletConfirm(this.contributionData, translation);
        });
    }
    paidWithWalletSwap(contributionData) {
        this.loading = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        this.swapService.paidPendingSwapRequest(contributionData)
            .subscribe((reponse) => {
            this.loading = false;
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                if (reponse.pending_swap) {
                    this.translate.get('PENDING_SWAP_PAYMENT_TEXT').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
                if (reponse.completed_swap) {
                    this.translate.get('COMPLETE_SWAP_PAYMENT_TEXT').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
                this.initPaymentForm();
                this.events.publish('modal-close', { result: 'complete' });
            }
        }, error => {
            this.loading = false;
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.loading = true;
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithWalletSwap(contributionData);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.ui.dismissLoading();
                    this.swapError.manageWalletError(error);
                }
            }
            else {
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    /******************************** START WALLET PAYMENT *********************************************/
    /******************************** START PAYPAL PAYMENT *********************************************/
    // update the paypal total amount
    updatePaypalAmount() {
        if (this.userPayMethodForm.value.type_payment_name === 'PAYPAL') {
            const amount = this.getAmountFees(this.contributionData.amount, this.contributionData.currency);
            this.userPayMethodForm.get('montantAvecFees').setValue(amount);
            if (this.contributionData.currency !== this.userPayMethodForm.value.device_name) {
                this.currency.convert(this.contributionData.currency, this.userPayMethodForm.value.device_name, this.contributionData.amount)
                    .then(montantSansFees => {
                    if (montantSansFees) {
                        const amountFees = this.getAmountFees(montantSansFees, this.userPayMethodForm.value.device_name);
                        this.userPayMethodForm.get('montantTotal').setValue(amountFees);
                        this.translate.get('PAIDMODE_MSG2').subscribe(value => {
                            this.paypalMessage = `${value} ${this.userPayMethodForm.value.montantAvecFees}
                 ${this.contributionData.currency} =
                ${this.userPayMethodForm.value.montantTotal}
                ${this.userPayMethodForm.value.device_name}`;
                            this.setupPayPay();
                        });
                    }
                    else {
                        this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(trans => {
                            this.paypalMessage = trans;
                        });
                    }
                });
            }
            else {
                this.userPayMethodForm.get('montantTotal').setValue(this.userPayMethodForm.value.montantAvecFees);
                this.translate.get('PAIDMODE_MSG2').subscribe(value => {
                    this.paypalMessage = `${value}  ${this.userPayMethodForm.value.montantTotal}
            ${this.userPayMethodForm.value.device_name}`;
                    this.setupPayPay();
                });
            }
        }
    }
    setupPayPay() {
        if (!this.paypal_initialized) {
            this.initPayPal();
        }
    }
    initPayPal() {
        if (this.userPayMethodForm.value.montantTotal > 0) {
            this.paypalLoading = true;
            this.paypal_initialized = true;
            let paypalbuttoncontainer = this.paypalbuttoncontainer.nativeElement;
            let _this = this;
            paypal.Button.render({
                env: 'production',
                style: {
                    size: 'responsive',
                    color: 'gold',
                    shape: 'pill',
                    label: 'checkout',
                    tagline: false
                },
                client: {
                    sandbox: 'ARIMcMamksC74CLp7Zavgn62RsKK0XDfjePxjU9gsWmcdzyI3AYz3PwADIktvUgCdhAwWCXPaBzCckOC',
                    production: 'AVdCN0ymBsPer15VtLbeNoZ3vkjkhap6vXoxwsWF3B0H4GM_mVQ5GVpJ2h4-G_AlVVIsBYWx4JpVVxLT'
                },
                // Show the buyer a 'Pay Now' button in the checkout flow
                commit: true,
                payment: function (data, actions) {
                    return actions.payment.create({
                        payment: {
                            transactions: [
                                {
                                    amount: {
                                        total: _this.userPayMethodForm.value.montantTotal,
                                        currency: _this.userPayMethodForm.value.device_name
                                    },
                                    description: 'Toupesu'
                                }
                            ]
                        }
                    });
                },
                // onAuthorize() is called when the buyer approves the payment
                onAuthorize: function (data, actions, error) {
                    if (error) {
                        _this.exitPayment();
                    }
                    if (error === 'INSTRUMENT_DECLINED') {
                        _this.exitPayment();
                    }
                    // Make a call to the REST ui to execute the payment
                    return actions.payment.execute().then(function () {
                        const params = {
                            refID: _this.reference,
                            amount: _this.userPayMethodForm.value.montantTotal,
                            moneyCode: _this.userPayMethodForm.value.device_name,
                            product: 'Toupesu',
                            paypalID: data.paymentToken.split('-')[1]
                        };
                        // Save and check the payment result
                        _this.userPayMethodForm.get('pay_token').setValue(data.paymentToken.split('-')[1]);
                        _this.api.post('livepaygateway/paypal/savePayRequest', JSON.stringify(params)).subscribe((ans) => {
                            if (ans && ans.success) {
                                _this.updateParametersPaypal(data.paymentToken.split('-')[1]);
                            }
                        }, error => {
                            _this.updateParametersPaypal(data.paymentToken.split('-')[1]);
                        });
                    });
                },
                onCancel: function (data, actions) {
                    _this.exitPayment();
                },
                onClick: (data, actions) => {
                    _this.translate.get('TOPUP_TEXT1').subscribe(value => {
                        _this.ui.presentToast(value);
                    });
                }
            }, paypalbuttoncontainer);
            setTimeout(() => {
                this.paypalLoading = false;
            }, 2000);
        }
    }
    // Update parameters PAYPAL
    updateParametersPaypal(payToken) {
        const params = this.swapService.getCurrentSwapData();
        const amount = this.getAmountFees(this.contributionData.amount, params.currency);
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (params.currency === this.userPayMethodForm.value.device_name) {
            const paramsData = {
                list_swap_request_id: this.contributionData.list_swap_request_id,
                currency: this.contributionData.currency,
                country_id: this.userPayMethodForm.value.countryId,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                montant_total_sans_handling_fees: this.contributionData.amount,
                montant_total_avec_handling_fees: amount,
                numero: this.userPayMethodForm.value.numero,
                pay_token: payToken,
                operator: 'paypal'
            };
            this.paidWithoutConversionOperator(paramsData);
        }
        else {
            this.currency.convert(params.currency, this.userPayMethodForm.value.device_name, this.contributionData.amount).then(montantsansFees => {
                if (montantsansFees) {
                    const paramsData = {
                        list_swap_request_id: this.contributionData.list_swap_request_id,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        currency_depart: this.userPayMethodForm.value.device_name,
                        currency_arrivee: this.contributionData.currency,
                        montant_total_depart_sans_handling_fees: montantsansFees ? montantsansFees : 0,
                        montant_total_depart_avec_handling_fees: this.getAmountFees(montantsansFees, this.userPayMethodForm.value.device_name),
                        montant_total_arrivee_sans_handling_fees: this.contributionData.amount,
                        pay_token: payToken,
                        operator: 'paypal'
                    };
                    this.paidWithConversionOperator(paramsData);
                }
            });
        }
    }
    /******************************** END PAYPAL PAYMENT *********************************************/
    /******************************** START MTN PAYMENT *********************************************/
    // Update parameters  Mtn payment
    updateParametersMtn() {
        const params = this.swapService.getCurrentSwapData();
        const amount = this.getAmountFees(this.contributionData.amount, params.currency);
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (params.currency !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(params.currency, this.userPayMethodForm.value.device_name, this.contributionData.amount).then(montantsansFees => {
                if (montantsansFees) {
                    const dataParams = {
                        list_swap_request_id: this.contributionData.list_swap_request_id,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        currency_depart: this.userPayMethodForm.value.device_name,
                        currency_arrivee: this.contributionData.currency,
                        montant_total_depart_sans_handling_fees: montantsansFees ? montantsansFees : 0,
                        montant_total_depart_avec_handling_fees: this.getAmountFees(montantsansFees, this.userPayMethodForm.value.device_name),
                        montant_total_arrivee_sans_handling_fees: this.contributionData.amount,
                        numero: this.userPayMethodForm.value.numero,
                        operator: 'MTN'
                    };
                    this.contributionDataParams = dataParams;
                    const messageConfirmation = {
                        title: params.title, contribution: dataParams.montant_total_depart_avec_handling_fees,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const paramsData = {
                list_swap_request_id: this.contributionData.list_swap_request_id,
                currency: this.contributionData.currency,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                montant_total_sans_handling_fees: this.contributionData.amount,
                country_id: this.userPayMethodForm.value.countryId,
                montant_total_avec_handling_fees: this.getAmountFees(this.contributionData.amount, this.contributionData.currency),
                numero: this.userPayMethodForm.value.numero,
                operator: 'MTN'
            };
            this.contributionDataParams = paramsData;
            const messageConfirmation = {
                title: params.title, contribution: this.userPayMethodForm.value.montantAvecFees,
                device_name: this.contributionData.currency, type: 'notconverted'
            };
            this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END MTN PAYMENT **************************************************/
    /******************************** START ORANGE PAYMENT *********************************************/
    // Update parameters  Orange payment
    updateParametersOrange() {
        const params = this.swapService.getCurrentSwapData();
        const amount = this.getAmountFees(this.contributionData.amount, params.currency);
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (params.currency !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(params.currency, this.userPayMethodForm.value.device_name, this.contributionData.amount).then(montantsansFees => {
                if (montantsansFees) {
                    const dataParams = {
                        list_swap_request_id: this.contributionData.list_swap_request_id,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        currency_depart: this.userPayMethodForm.value.device_name,
                        currency_arrivee: this.contributionData.currency,
                        montant_total_depart_sans_handling_fees: montantsansFees ? montantsansFees : 0,
                        montant_total_depart_avec_handling_fees: this.getAmountFees(montantsansFees, this.userPayMethodForm.value.device_name),
                        montant_total_arrivee_sans_handling_fees: this.contributionData.amount,
                        numero: this.userPayMethodForm.value.numero,
                        operator: 'orange'
                    };
                    this.contributionDataParams = dataParams;
                    const messageConfirmation = {
                        title: params.title, contribution: dataParams.montant_total_depart_avec_handling_fees,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const paramsData = {
                list_swap_request_id: this.contributionData.list_swap_request_id,
                currency: this.contributionData.currency,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                montant_total_sans_handling_fees: this.contributionData.amount,
                montant_total_avec_handling_fees: this.userPayMethodForm.value.montantAvecFees,
                numero: this.userPayMethodForm.value.numero,
                country_id: this.userPayMethodForm.value.countryId,
                operator: 'orange'
            };
            this.contributionDataParams = paramsData;
            const messageConfirmation = {
                title: params.title, contribution: this.userPayMethodForm.value.montantAvecFees,
                device_name: this.contributionData.currency, type: 'notconverted'
            };
            this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END ORANGE PAYMENT *********************************************/
    /******************************** START OZOW PAYMENT *********************************************/
    // Update parameters OZOW payment
    updateParametersOzow() {
        const params = this.swapService.getCurrentSwapData();
        const amount = this.getAmountFees(this.contributionData.amount, params.currency);
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (params.currency !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(params.currency, this.userPayMethodForm.value.device_name, this.contributionData.amount).then(montantsansFees => {
                if (montantsansFees) {
                    const dataParams = {
                        list_swap_request_id: this.contributionData.list_swap_request_id,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        currency_depart: this.userPayMethodForm.value.device_name,
                        currency_arrivee: this.contributionData.currency,
                        montant_total_depart_sans_handling_fees: montantsansFees ? montantsansFees : 0,
                        montant_total_depart_avec_handling_fees: this.getAmountFees(montantsansFees, this.userPayMethodForm.value.device_name),
                        montant_total_arrivee_sans_handling_fees: this.contributionData.amount,
                        numero: this.userPayMethodForm.value.numero,
                        operator: 'ozow'
                    };
                    this.contributionDataParams = dataParams;
                    const messageConfirmation = {
                        title: params.title, contribution: dataParams.montant_total_depart_avec_handling_fees,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const paramsData = {
                list_swap_request_id: this.contributionData.list_swap_request_id,
                currency: this.contributionData.currency,
                country_id: this.userPayMethodForm.value.countryId,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                montant_total_sans_handling_fees: this.contributionData.amount,
                montant_total_avec_handling_fees: this.getAmountFees(this.contributionData.amount, this.contributionData.currency),
                numero: this.userPayMethodForm.value.numero,
                operator: 'ozow'
            };
            this.contributionDataParams = paramsData;
            const messageConfirmation = {
                title: params.title, contribution: this.userPayMethodForm.value.montantAvecFees,
                device_name: this.contributionData.currency, type: 'notconverted'
            };
            this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END OZOW PAYMENT *********************************************/
    /******************************** COMMON PAYMENT  SERVICES **************************************/
    showConfirmationMessage(messageConfirmation, contributionDataParams) {
        const translation = [];
        this.translate.get(['CONFIRM_PAY_CONTRIBUTION_SUBTEXT1', 'CONFIRM_PAY_CONTRIBUTION_SUBTEXT2', 'CANCEL_TEXT', 'YES_TEXT', 'SWAPPING_TEXT']).subscribe(trans => {
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT1);
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT2);
            translation.push(trans.CANCEL_TEXT);
            translation.push(trans.YES_TEXT);
            translation.push(trans.SWAPPING_TEXT);
            this.paymentOperatorConfirm(messageConfirmation, contributionDataParams, translation);
        });
    }
    paymentOperatorConfirm(dataMessage, contributionDataParams, translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${translation[4]} :   ${dataMessage.title}`,
                message: `${translation[0]} ${dataMessage.contribution}
    ${dataMessage.device_name}  ${translation[1]}`,
                buttons: [
                    {
                        text: `${translation[2]}`,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                        }
                    }, {
                        text: `${translation[3]}`,
                        handler: () => {
                            if (dataMessage.type === 'converted') {
                                this.paidWithConversionOperator(contributionDataParams);
                            }
                            else if (dataMessage.type === 'notconverted') {
                                this.paidWithoutConversionOperator(contributionDataParams);
                            }
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
    // Paid swap request without conversion
    paidWithoutConversionOperator(contributionData) {
        this.loading = true;
        this.showLoadingMessage(contributionData);
        this.swapService.paySwapRequestWithOperatorWithoutConversion(contributionData).subscribe((reponse) => {
            if (reponse && reponse.message === 'success') {
                this.sendResponsePerOperator(reponse, contributionData.operator);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithoutConversionOperator(contributionData);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    // Paid swap request with Paypal after conversion
    paidWithConversionOperator(contributionData) {
        this.loading = true;
        this.showLoadingMessage(contributionData);
        this.swapService.paySwapRequestWithOperatorWithConversion(contributionData).subscribe((reponse) => {
            if (reponse && reponse.message === 'success') {
                this.sendResponsePerOperator(reponse, contributionData.operator);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithConversionOperator(contributionData);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    // Send message per operator
    sendResponsePerOperator(data, operator) {
        this.checkPaymentStatusOperator(data.pay_token, operator);
        const reference = data && data.refID ? data.refID : '';
        this.refernceId = reference;
        this.cancelPaymentResult(reference);
        switch (operator) {
            case 'ozow':
                window.open(data.url, '_blank');
                break;
            default:
                break;
        }
    }
    // show the loading message
    showLoadingMessage(data) {
        switch (data.operator) {
            case 'orange':
                this.translate.get('ORANGE_PAYMENT_MESSAGE').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'MTN':
                this.translate.get('MTN_PAYMENT_MESSAGE').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'paypal':
                this.translate.get('TOPUP_TEXT1').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'ozow':
                this.translate.get('TOPUP_TEXT1').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            default:
                break;
        }
    }
    // step 2 :  Check the status via Ozow
    checkPaymentStatusOperator(payToken, operator) {
        this.cron = setInterval(() => {
            this.checkPaymentStatusOperatorServer(payToken, operator);
        }, 20000);
    }
    // SHOW THE SUCCES MESSAGE
    showSuccesMessage() {
        this.translate.get('SWAP_PAYMENT_SUCCESS').subscribe(value => {
            this.ui.presentToast(value);
        });
    }
    // clear the time out
    clearTimeoutData() {
        if (this.timeOut) {
            clearTimeout(this.timeOut);
            this.timeOut = null;
        }
    }
    // clear the set interval
    clearSetIntervalData() {
        if (this.cron) {
            clearInterval(this.cron);
        }
        this.cron = null;
        for (let i = 0; i < 1000; i++) {
            clearInterval(i);
        }
    }
    // Check the payment Status
    checkPaymentStatusOperatorServer(payToken, operator) {
        this.wallet.getStatusPaymentOperator(payToken, operator).subscribe((reponse) => {
            if (reponse && reponse.message === 'OK') {
                this.showPaymentResult();
                this.showSuccesMessage();
            }
        }, error => {
            if (error && error.error && error.error.message === 'FAIL') {
                this.exitPayment();
                this.translate.get('PAYMENT_FAIL_MSG').subscribe(value => {
                    this.ui.presentToast(value);
                });
            }
            else {
                this.exitPayment();
                this.translate.get('PAYMENT_FAIL_MSG').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.errorService.manageError(error);
            }
        });
    }
    // Show payment confirmation dialog
    showPaymentResult() {
        this.loading = false;
        this.ui.dismissLoading();
        this.initPaymentForm();
        this.clearTimeoutData();
        this.clearSetIntervalData();
        this.events.publish('modal-close', { result: 'complete' });
    }
    // Cancel the payment
    cancelPaymentResult(refence) {
        this.timeOut = setTimeout(() => {
            this.exitPayment();
            this.translate.get(['TRANSACTION_CANCEL', 'TOPUP_MSG9']).subscribe(trans => {
                this.ui.presentAlert(`${trans.TRANSACTION_CANCEL}`, `${trans.TOPUP_MSG9} ${refence}`);
            });
        }, 300000);
    }
    // exit the payment directly
    exitPayment() {
        this.loading = false;
        this.ui.dismissLoading();
        this.getAllMethodPaymentType();
        this.initFormMessage();
        this.initPaymentForm();
        this.clearTimeoutData();
        this.clearSetIntervalData();
    }
    ionicViewDidLeave() {
        if (this.loading) {
            this.exitPayment();
        }
    }
    // listen to back button
    hardwareBackButton() {
        this.platform.backButton.subscribe(() => {
            const url = this.router.url;
            if (url === '/dashboard/pesuswap/swap-not-paid') {
                if (this.refernceId) {
                    this.cancelPaymentResult(this.refernceId);
                }
                else {
                    this.exitPayment();
                }
            }
        });
    }
};
PaidmodeSwapComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_20__["UserService"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_19__["EventService"] },
    { type: _service_ui_service__WEBPACK_IMPORTED_MODULE_21__["UiService"] },
    { type: _service_api_service__WEBPACK_IMPORTED_MODULE_9__["ApiService"] },
    { type: _service_currency_service__WEBPACK_IMPORTED_MODULE_10__["CurrencyService"] },
    { type: _service_payment_global_data_service__WEBPACK_IMPORTED_MODULE_18__["PaymentGlobalDataService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_16__["Router"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_6__["Platform"] },
    { type: _service_form_utils_service__WEBPACK_IMPORTED_MODULE_12__["FormUtilsService"] },
    { type: src_app_dashboard_pesuswap_services_swap_service__WEBPACK_IMPORTED_MODULE_14__["SwapService"] },
    { type: _dashboard_pesuswap_services_swap_error_service__WEBPACK_IMPORTED_MODULE_15__["SwapErrorService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_6__["AlertController"] },
    { type: src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_17__["TontineService"] },
    { type: _service_payment_error_service__WEBPACK_IMPORTED_MODULE_13__["PaymentErrorService"] },
    { type: src_app_dashboard_my_wallet_service_wallet_service__WEBPACK_IMPORTED_MODULE_11__["WalletService"] },
    { type: _service_error_service__WEBPACK_IMPORTED_MODULE_5__["ErrorService"] },
    { type: _service_location_service__WEBPACK_IMPORTED_MODULE_7__["LocationService"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__["TranslateService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] }
];
PaidmodeSwapComponent.propDecorators = {
    amountPay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    paypalbuttoncontainer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: ['paypalbuttoncontainer', { static: false },] }]
};
PaidmodeSwapComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-paidmode-swap',
        template: _raw_loader_paidmode_swap_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_paidmode_swap_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], PaidmodeSwapComponent);



/***/ }),

/***/ "KGAx":
/*!*******************************************************!*\
  !*** ./src/app/shared/paidmode/paidmode.component.ts ***!
  \*******************************************************/
/*! exports provided: PaidmodeComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaidmodeComponent", function() { return PaidmodeComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_paidmode_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./paidmode.component.html */ "LdEE");
/* harmony import */ var _paidmode_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./paidmode.component.scss */ "lgQC");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var _service_error_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../service/error.service */ "TkUd");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _service_location_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../service/location.service */ "e009");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/tontine.service */ "/WEl");
/* harmony import */ var src_app_dashboard_my_tontines_services_contribution_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/contribution.service */ "US41");
/* harmony import */ var _service_api_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../service/api.service */ "6rCG");
/* harmony import */ var _service_currency_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../service/currency.service */ "GmDD");
/* harmony import */ var src_app_dashboard_my_wallet_service_wallet_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! src/app/dashboard/my-wallet/service/wallet.service */ "68js");
/* harmony import */ var _service_form_utils_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../service/form-utils.service */ "14LV");
/* harmony import */ var _service_payment_error_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../service/payment-error.service */ "FLu1");
/* harmony import */ var _service_payment_global_data_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../service/payment-global-data.service */ "T8hk");
/* harmony import */ var src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! src/app/dashboard/user/service/user.service */ "6Hie");
/* harmony import */ var _service_ui_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../service/ui.service */ "QB/Y");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../service/events.service */ "r5fM");
/* harmony import */ var src_app_auth_service_auth_service__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! src/app/auth/service/auth.service */ "RmnQ");






















let PaidmodeComponent = class PaidmodeComponent {
    constructor(fb, userService, api, ui, auth, currency, events, contribution, platform, alertController, wallet, tontine, errorService, location, translate, formUtil, paymentData, router, zone, navController, paymentError) {
        this.fb = fb;
        this.userService = userService;
        this.api = api;
        this.ui = ui;
        this.auth = auth;
        this.currency = currency;
        this.events = events;
        this.contribution = contribution;
        this.platform = platform;
        this.alertController = alertController;
        this.wallet = wallet;
        this.tontine = tontine;
        this.errorService = errorService;
        this.location = location;
        this.translate = translate;
        this.formUtil = formUtil;
        this.paymentData = paymentData;
        this.router = router;
        this.zone = zone;
        this.navController = navController;
        this.paymentError = paymentError;
        this.cron = null;
        this.timeOut = null;
        this.loadingOperator = false;
        this.loading = false;
        this.errorPhone = false;
        this.states = [];
        this.paymentMethods = [];
        this.paypalMessage = '';
        this.reference = this.formUtil.getRandomId();
        this.tontineData = this.tontine.getCurrentTontineData();
        this.allPaymentMethods = [];
        this.paypalLoading = false;
        this.paypal_initialized = false;
        this.contributionData = this.contribution.getContributionData();
        this.refernceId = '';
        this.hardwareBackButton();
    }
    ngOnInit() {
        this.getAllMethodPaymentType();
        this.initFormMessage();
        this.initPaymentForm();
    }
    /******************************** START FORM SERVICES *********************************************/
    // Form getters
    get phone() {
        return this.userPayMethodForm.get('phone');
    }
    get amountError() {
        return this.userPayMethodForm.get('montantWithFees');
    }
    get country() {
        return this.userPayMethodForm.get('country_id');
    }
    get device_name() {
        return this.userPayMethodForm.get('device_name');
    }
    get payementtype() {
        return this.userPayMethodForm.get('typePaymentIndex');
    }
    // Init form message 
    initFormMessage() {
        this.translate.get(['REGISTER_PHONE_REQUIRED', 'M_COUNTRY_REQUIRED', 'AMOUNT_REQUIRED', 'PAID_MODE_REQUIRED'])
            .subscribe(value => {
            this.validationMessages = {
                payementtype: [
                    { type: 'required', message: value.PAID_MODE_REQUIRED }
                ],
                phone: [
                    { type: 'required', message: value.REGISTER_PHONE_REQUIRED },
                ],
                amount: [
                    { type: 'required', message: value.AMOUNT_REQUIRED }
                ],
                country_id: [
                    { type: 'required', message: value.M_COUNTRY_REQUIRED }
                ]
            };
        });
    }
    // Init form
    initPaymentForm() {
        const currentPayment = this.paymentData.getDefaultPaymentMethod();
        this.userPayMethodForm = this.fb.group({
            country_id: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            country_prefix: [''],
            countryId: [''],
            handleFees: [''],
            handleFeesType: [''],
            device_name: [''],
            currency: [''],
            currencyLabel: [''],
            pay_token: [''],
            url: [''],
            montant: [''],
            montantWithFees: ['0'],
            montantTotal: ['0'],
            type_payment_id: [currentPayment ? currentPayment.typepaiement_id : ''],
            type_payment_name: [currentPayment ? currentPayment.name : ''],
            typePaymentIndex: [0, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            phone: [currentPayment && this.formUtil.validatePhone(currentPayment.numero_compte) ? currentPayment.numero_compte : ''],
            numero: ['']
        });
    }
    // Remove space
    removeSpace() {
        this.userPayMethodForm.get('phone').setValue(this.paymentData.removeInputSpace(this.userPayMethodForm.value.phone));
    }
    // check if emial or phone is valid
    checckEmailOrPhone(inputValue, index) {
        this.removeSpace();
        this.userPayMethodForm.get('type_payment_id').setValue(this.paymentMethods[index].id);
        switch (this.paymentMethods[index].name) {
            case 'ORANGE MONEY':
                this.errorPhone = !this.formUtil.validatePhone(inputValue);
                if (!this.errorPhone) {
                    this.userPayMethodForm.get('numero').setValue(this.userPayMethodForm.value.country_prefix +
                        '' + this.userPayMethodForm.value.phone);
                }
                break;
            case 'MTN MOBILE MONEY':
                this.errorPhone = !this.formUtil.validatePhone(inputValue);
                if (!this.errorPhone) {
                    this.userPayMethodForm.get('numero').setValue(this.userPayMethodForm.value.country_prefix +
                        '' + this.userPayMethodForm.value.phone);
                }
                break;
            default:
                break;
        }
    }
    // check if it is not  mobile operator
    checkMobileOperator() {
        return this.paymentData.isMobileOperator(this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can show paypal message
    canShowPaypalMessage() {
        return this.paymentData.hasPaypalMessage(this.paypalMessage, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can show  paypal button
    canShowPaypalButton() {
        return this.paymentData.hasPaypalButton(this.paypal_initialized, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can make payment 
    canPay() {
        return this.paymentData.canShowPayment(this.userPayMethodForm.valid, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex], this.userPayMethodForm.value.phone, this.errorPhone);
    }
    // get all payment method
    getAllMethodPaymentType() {
        this.loadingOperator = true;
        this.userService.getAllMethodPaymentType().subscribe((reponse) => {
            this.loadingOperator = false;
            this.paymentMethods = [];
            if (reponse && reponse.typePayment && reponse.typePayment.length > 0) {
                this.paymentMethods = this.paymentData.formatPaymentMethodResponseContribution(reponse.typePayment);
            }
            const defaultMethod = [{
                    id: 0, country_id: 0, logo: 'assets/pesuwallet.jpg',
                    currency: this.tontineData.tontine.monnaie, name: 'WALLET', placeholder: '',
                    handling_fees: 0,
                    type_handling_fees: 'valeur'
                }];
            this.paymentMethods = defaultMethod.concat(this.paymentMethods);
            this.allPaymentMethods = this.paymentMethods;
            this.getCountries(false);
        }, error => {
            this.loadingOperator = false;
            this.paymentMethods.push({
                id: 0, country_id: 0, logo: 'assets/pesuwallet.jpg',
                currency: this.tontineData.tontine.monnaie, name: 'WALLET', placeholder: '',
                handling_fees: 0,
                type_handling_fees: 'valeur'
            });
            this.allPaymentMethods = this.paymentMethods;
            this.getCountries(false);
            this.errorService.manageError(error);
        });
    }
    // Get all countries
    getCountries(refresher) {
        this.location.getAllCountries(refresher).then((countries) => {
            this.states = this.paymentData.formatCountriesData(countries);
            if (this.states && this.states.length > 0) {
                setTimeout(() => {
                    this.states.forEach(country => {
                        if (country.country_key === this.tontineData.tontine.country_key) {
                            this.updateFormData(country);
                        }
                    });
                }, 200);
            }
        });
    }
    // update the form data
    updateFormData(country) {
        if (country) {
            this.userPayMethodForm.get('countryId').setValue(country.country_id);
            this.userPayMethodForm.get('country_prefix').setValue(country.country_prefixe);
            this.userPayMethodForm.get('currency').setValue(country.device_name);
            this.userPayMethodForm.get('handleFees').setValue(country.handling_fees);
            this.userPayMethodForm.get('handleFeesType').setValue(country.type_handling_fees);
            this.userPayMethodForm.get('currencyLabel').setValue(country.currency_label);
            this.zone.run(() => {
                this.userPayMethodForm.get('country_id').setValue(country.country_id);
            });
            this.updatePaymentsMethods(country.country_id);
        }
    }
    // Update the payment method
    updatePaymentMethod(index) {
        if (this.paymentMethods[index]) {
            this.userPayMethodForm.get('type_payment_id').setValue(this.paymentMethods[index].id);
            this.userPayMethodForm.get('type_payment_name').setValue(this.paymentMethods[index].name);
            this.userPayMethodForm.get('device_name').setValue(this.paymentMethods[index].currency);
            this.userPayMethodForm.get('handleFees').setValue(this.paymentMethods[index].handling_fees);
            this.userPayMethodForm.get('handleFeesType').setValue(this.paymentMethods[index].type_handling_fees);
            this.zone.run(() => {
                this.userPayMethodForm.get('typePaymentIndex').setValue(index);
            });
        }
        if (this.paymentMethods && this.paymentMethods[index] &&
            this.paymentMethods[index].name === 'PAYPAL') {
            this.paypal_initialized = false;
            this.updatePaypalAmount();
        }
    }
    // update the payment methods
    updatePaymentsMethods(countryId) {
        // update the payment method
        const paymentsMethods = [];
        this.paymentMethods = [];
        this.allPaymentMethods.forEach(payment => {
            if (payment.country_id === countryId || payment.country_id === 0) {
                paymentsMethods.push(payment);
            }
        });
        this.paymentMethods = paymentsMethods;
        if (this.paymentMethods && this.paymentMethods.length > 0) {
            this.updatePaymentMethod(0);
        }
    }
    // Calucalte the payment with handlfees
    getAmountWithFees(amountShare, device) {
        return this.paymentData.getHandleFeesWithDevise(amountShare, device, this.userPayMethodForm.value.handleFees, this.userPayMethodForm.value.handleFeesType);
    }
    // Update the country info country prfix
    updateCurrencyCountry(countryId) {
        this.zone.run(() => {
            this.paymentMethods = [];
        });
        setTimeout(() => {
            this.states.forEach(state => {
                if (state.country_id === countryId) {
                    this.updateFormData(state);
                }
            });
        }, 300);
    }
    // Show the payment mode
    showPayment(mode) {
        switch (mode.type_payment_name) {
            case 'ORANGE MONEY':
                this.updateParametersOrange();
                break;
            case 'OZOW':
                this.updateParametersOzow();
                break;
            case 'MTN MOBILE MONEY':
                this.updateParametersMtn();
                break;
            case 'WALLET':
                this.updateParametersWallet();
                break;
            default:
                break;
        }
    }
    /******************************** END FORM SERVICES *********************************************/
    /******************************** START WALLET PAYMENT *********************************************/
    paymentWalletConfirm(dataMessage, translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${dataMessage.title}`,
                message: `${translation[0]} ${dataMessage.contribution}
        ${dataMessage.device_name} ${translation[1]}`,
                buttons: [
                    {
                        text: `${translation[2]}`,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                        }
                    }, {
                        text: `${translation[3]}`,
                        handler: () => {
                            this.paidWithWallet();
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
    // update the wallet params
    updateParametersWallet() {
        const translation = [];
        this.translate.get(['CONFIRM_PAY_CONTRIBUTION_SUBTEXT1', 'CONFIRM_PAY_CONTRIBUTION_SUBTEXT2', 'CANCEL_TEXT', 'YES_TEXT']).subscribe(trans => {
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT1);
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT2);
            translation.push(trans.CANCEL_TEXT);
            translation.push(trans.YES_TEXT);
            this.paymentWalletConfirm(this.contributionData, translation);
        });
    }
    // Send the user contribution
    paidWithWallet() {
        this.loading = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        this.contribution.contributionAllShareWithWallet(this.contributionData)
            .subscribe((reponse) => {
            this.loading = false;
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG1').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.events.publish('modal-pay-close');
                // check if it a penality
                if (this.contributionData && this.contributionData.typecontribution_id && this.contributionData.typecontribution_id === 2) {
                    this.events.publish('new-tontine');
                    this.navController.setDirection('root');
                    this.router.navigate(['dashboard/my-tontines']);
                }
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithWallet();
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    /******************************** START WALLET PAYMENT *********************************************/
    /******************************** START PAYPAL PAYMENT *********************************************/
    // update the paypal total amount
    updatePaypalAmount() {
        if (this.userPayMethodForm.value.type_payment_name === 'PAYPAL') {
            const amount = this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name) * this.contributionData.liste_part.length;
            this.userPayMethodForm.get('montantWithFees').setValue(amount);
            if (this.contributionData.device_name !== this.userPayMethodForm.value.device_name) {
                this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.contributionData.montant).then(montSansFees => {
                    if (montSansFees) {
                        const montantFees = this.getAmountWithFees(montSansFees, this.userPayMethodForm.value.device_name) * this.contributionData.liste_part.length;
                        this.userPayMethodForm.get('montantTotal').setValue(montantFees);
                        this.translate.get('PAIDMODE_MSG2').subscribe(value => {
                            this.paypalMessage = `${value} ${this.userPayMethodForm.value.montantWithFees}
                 ${this.contributionData.device_name} =
                ${this.userPayMethodForm.value.montantTotal}
                ${this.userPayMethodForm.value.device_name}`;
                            this.setupPayPay();
                        });
                    }
                    else {
                        this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                            this.paypalMessage = value;
                        });
                    }
                });
            }
            else {
                this.userPayMethodForm.get('montantTotal').setValue(this.userPayMethodForm.value.montantWithFees);
                this.translate.get('PAIDMODE_MSG2').subscribe(value => {
                    this.paypalMessage = `${value}  ${this.userPayMethodForm.value.montantTotal}
            ${this.userPayMethodForm.value.device_name}`;
                    this.setupPayPay();
                });
            }
        }
    }
    setupPayPay() {
        if (!this.paypal_initialized) {
            this.initPayPal();
        }
    }
    initPayPal() {
        if (this.userPayMethodForm.value.montantTotal > 0) {
            this.paypalLoading = true;
            this.paypal_initialized = true;
            let paypalbuttoncontainer = this.paypalbuttoncontainer.nativeElement;
            let _this = this;
            paypal.Button.render({
                env: 'production',
                style: {
                    size: 'responsive',
                    color: 'gold',
                    shape: 'pill',
                    label: 'checkout',
                    tagline: false
                },
                client: {
                    sandbox: 'ARIMcMamksC74CLp7Zavgn62RsKK0XDfjePxjU9gsWmcdzyI3AYz3PwADIktvUgCdhAwWCXPaBzCckOC',
                    production: 'AVdCN0ymBsPer15VtLbeNoZ3vkjkhap6vXoxwsWF3B0H4GM_mVQ5GVpJ2h4-G_AlVVIsBYWx4JpVVxLT'
                },
                // Show the buyer a 'Pay Now' button in the checkout flow
                commit: true,
                payment: function (data, actions) {
                    return actions.payment.create({
                        payment: {
                            transactions: [
                                {
                                    amount: {
                                        total: _this.userPayMethodForm.value.montantTotal,
                                        currency: _this.userPayMethodForm.value.device_name
                                    },
                                    description: 'Toupesu'
                                }
                            ]
                        }
                    });
                },
                // onAuthorize() is called when the buyer approves the payment
                onAuthorize: function (data, actions, error) {
                    if (error) {
                        _this.exitPayment();
                    }
                    if (error === 'INSTRUMENT_DECLINED') {
                        _this.exitPayment();
                    }
                    // Make a call to the REST ui to execute the payment
                    return actions.payment.execute().then(function () {
                        const params = {
                            refID: _this.reference,
                            amount: _this.userPayMethodForm.value.montantTotal,
                            moneyCode: _this.userPayMethodForm.value.device_name,
                            product: 'Toupesu',
                            paypalID: data.paymentToken.split('-')[1]
                        };
                        // Save and check the payment result
                        _this.userPayMethodForm.get('pay_token').setValue(data.paymentToken.split('-')[1]);
                        _this.api.post('livepaygateway/paypal/savePayRequest', JSON.stringify(params)).subscribe((ans) => {
                            if (ans && ans.success) {
                                _this.updateParametersPaypal(data.paymentToken.split('-')[1]);
                            }
                        }, error => {
                            _this.updateParametersPaypal(data.paymentToken.split('-')[1]);
                        });
                    });
                },
                onCancel: function (data, actions) {
                    _this.exitPayment();
                },
                onClick: (data, actions) => {
                    _this.translate.get('TOPUP_TEXT1').subscribe(value => {
                        _this.ui.presentToast(value);
                    });
                }
            }, paypalbuttoncontainer);
            setTimeout(() => {
                this.paypalLoading = false;
            }, 2000);
        }
    }
    // Update parameters PAYPAL
    updateParametersPaypal(payToken) {
        // Add the handlefees to the amount
        if (this.contributionData.device_name === this.userPayMethodForm.value.device_name) {
            const params = {
                seance_id: this.contributionData.seance_id,
                country_id: this.userPayMethodForm.value.countryId,
                typecontribution_id: this.contributionData.typecontribution_id,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                montant_d_une_part_sans_handing_fees: this.contributionData.montant,
                montant_d_une_part_avec_handling_fees: this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name),
                device_name: this.contributionData.device_name,
                sens_contribution: 'entrant',
                liste_part: this.contributionData.liste_part,
                pay_token: payToken,
                operator: 'paypal',
                pin: this.contributionData.pin
            };
            this.paidWithoutConversionOperator(params);
        }
        else {
            this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.contributionData.montant).then(montSansFees => {
                if (montSansFees) {
                    const params = {
                        seance_id: this.contributionData.seance_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        typecontribution_id: this.contributionData.typecontribution_id,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        device_depart: this.userPayMethodForm.value.device_name,
                        device_arrivee: this.contributionData.device_name,
                        montant_device_depart_d_une_part_sans_handling_fees: montSansFees ? montSansFees : 0,
                        montant_device_depart_d_une_part_avec_handling_fees: this.getAmountWithFees(montSansFees, this.userPayMethodForm.value.device_name),
                        montant_device_arrivee_d_une_part_sans_handling_fees: this.contributionData.montant,
                        sens_contribution: 'entrant',
                        liste_part: this.contributionData.liste_part,
                        pay_token: payToken,
                        operator: 'paypal',
                        pin: this.contributionData.pin
                    };
                    this.paidWithConversionOperator(params);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
    }
    /******************************** END PAYPAL PAYMENT *********************************************/
    /******************************** START MTN PAYMENT *********************************************/
    // Update parameters  Mtn payment
    updateParametersMtn() {
        const amount = this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name) * this.contributionData.liste_part.length;
        this.userPayMethodForm.get('montantWithFees').setValue(amount);
        if (this.contributionData.device_name !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.contributionData.montant).then(montantSansFees => {
                if (montantSansFees) {
                    const params = {
                        seance_id: this.contributionData.seance_id,
                        typecontribution_id: this.contributionData.typecontribution_id,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        device_depart: this.userPayMethodForm.value.device_name,
                        device_arrivee: this.contributionData.device_name,
                        montant_device_depart_d_une_part_sans_handling_fees: montantSansFees ? montantSansFees : 0,
                        montant_device_depart_d_une_part_avec_handling_fees: this.getAmountWithFees(montantSansFees, this.userPayMethodForm.value.device_name),
                        montant_device_arrivee_d_une_part_sans_handling_fees: this.contributionData.montant,
                        sens_contribution: 'entrant',
                        numero: this.userPayMethodForm.value.country_prefix + this.userPayMethodForm.value.phone,
                        liste_part: this.contributionData.liste_part,
                        pin: this.contributionData.pin,
                        operator: 'MTN'
                    };
                    this.contributionDataParams = params;
                    const messageConfirmation = {
                        title: this.contributionData.title, contribution: this.contributionDataParams * this.contributionData.liste_part.length,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const params = {
                seance_id: this.contributionData.seance_id,
                typecontribution_id: this.contributionData.typecontribution_id,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                device_name: this.contributionData.device_name,
                country_id: this.userPayMethodForm.value.countryId,
                montant_d_une_part_sans_handing_fees: this.contributionData.montant,
                montant_d_une_part_avec_handling_fees: this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name),
                sens_contribution: 'entrant',
                numero: this.userPayMethodForm.value.country_prefix + this.userPayMethodForm.value.phone,
                liste_part: this.contributionData.liste_part,
                pin: this.contributionData.pin,
                operator: 'MTN'
            };
            this.contributionDataParams = params;
            const messageConfirmation = {
                title: this.contributionData.title, contribution: this.userPayMethodForm.value.montantWithFees,
                device_name: this.contributionData.device_name, type: 'notconverted'
            };
            this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END MTN PAYMENT *********************************************/
    /******************************** START ORANGE PAYMENT *********************************************/
    // Update parameters  Orange payment
    updateParametersOrange() {
        const amount = this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name) * this.contributionData.liste_part.length;
        this.userPayMethodForm.get('montantWithFees').setValue(amount);
        if (this.contributionData.device_name !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.contributionData.montant).then(montantSansFees => {
                if (montantSansFees) {
                    const params = {
                        seance_id: this.contributionData.seance_id,
                        typecontribution_id: this.contributionData.typecontribution_id,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        device_depart: this.userPayMethodForm.value.device_name,
                        device_arrivee: this.contributionData.device_name,
                        montant_device_depart_d_une_part_sans_handling_fees: montantSansFees ? montantSansFees : 0,
                        montant_device_depart_d_une_part_avec_handling_fees: this.getAmountWithFees(montantSansFees, this.userPayMethodForm.value.device_name),
                        montant_device_arrivee_d_une_part_sans_handling_fees: this.contributionData.montant,
                        montant_device_arrivee_d_une_part_avec_handling_fees: this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name),
                        sens_contribution: 'entrant',
                        numero: this.userPayMethodForm.value.country_prefix + this.userPayMethodForm.value.phone,
                        liste_part: this.contributionData.liste_part,
                        pin: this.contributionData.pin,
                        operator: 'orange'
                    };
                    this.contributionDataParams = params;
                    const messageConfirmation = {
                        title: this.contributionData.title, contribution: this.contributionDataParams.montant_device_depart_d_une_part_avec_handling_fees * this.contributionData.liste_part.length,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const params = {
                seance_id: this.contributionData.seance_id,
                typecontribution_id: this.contributionData.typecontribution_id,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                device_name: this.contributionData.device_name,
                country_id: this.userPayMethodForm.value.countryId,
                montant_d_une_part_sans_handing_fees: this.contributionData.montant,
                montant_d_une_part_avec_handling_fees: this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name),
                sens_contribution: 'entrant',
                numero: this.userPayMethodForm.value.country_prefix + this.userPayMethodForm.value.phone,
                liste_part: this.contributionData.liste_part,
                pin: this.contributionData.pin,
                operator: 'orange'
            };
            this.contributionDataParams = params;
            const messageConfirmation = {
                title: this.contributionData.title, contribution: this.userPayMethodForm.value.montantWithFees,
                device_name: this.contributionData.device_name, type: 'notconverted'
            };
            this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END ORANGE PAYMENT *********************************************/
    /******************************** START OZOW PAYMENT *********************************************/
    // Update parameters OZOW payment
    updateParametersOzow() {
        const amount = this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name) * this.contributionData.liste_part.length;
        this.userPayMethodForm.get('montantWithFees').setValue(amount);
        if (this.contributionData.device_name !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.contributionData.montant).then(montantSansFees => {
                if (montantSansFees) {
                    const params = {
                        seance_id: this.contributionData.seance_id,
                        typecontribution_id: this.contributionData.typecontribution_id,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        device_depart: this.userPayMethodForm.value.device_name,
                        device_arrivee: this.contributionData.device_name,
                        montant_device_depart_d_une_part_sans_handling_fees: montantSansFees ? montantSansFees : 0,
                        montant_device_depart_d_une_part_avec_handling_fees: this.getAmountWithFees(montantSansFees, this.userPayMethodForm.value.device_name),
                        montant_device_arrivee_d_une_part_sans_handling_fees: this.contributionData.montant,
                        sens_contribution: 'entrant',
                        numero: this.userPayMethodForm.value.country_prefix + this.userPayMethodForm.value.phone,
                        liste_part: this.contributionData.liste_part,
                        pin: this.contributionData.pin,
                        operator: 'ozow'
                    };
                    this.contributionDataParams = params;
                    const messageConfirmation = {
                        title: this.contributionData.title, contribution: this.contributionDataParams.montant_device_depart_d_une_part_avec_handling_fees * this.contributionData.liste_part.length,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const params = {
                seance_id: this.contributionData.seance_id,
                typecontribution_id: this.contributionData.typecontribution_id,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                device_name: this.contributionData.device_name,
                country_id: this.userPayMethodForm.value.countryId,
                montant_d_une_part_sans_handing_fees: this.contributionData.montant,
                montant_d_une_part_avec_handling_fees: this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name),
                sens_contribution: 'entrant',
                numero: this.userPayMethodForm.value.country_prefix + this.userPayMethodForm.value.phone,
                liste_part: this.contributionData.liste_part,
                pin: this.contributionData.pin,
                operator: 'ozow'
            };
            this.contributionDataParams = params;
            const messageConfirmation = {
                title: this.contributionData.title, contribution: this.userPayMethodForm.value.montantWithFees,
                device_name: this.contributionData.device_name, type: 'notconverted'
            };
            this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END OZOW PAYMENT *********************************************/
    /******************************** START COMMON PAYMENT SERVICES *********************************************/
    showConfirmationMessage(messageConfirmation, contributionDataParams) {
        const translation = [];
        this.translate.get(['CONFIRM_PAY_CONTRIBUTION_SUBTEXT1', 'CONFIRM_PAY_CONTRIBUTION_SUBTEXT2', 'CANCEL_TEXT', 'YES_TEXT']).subscribe(trans => {
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT1);
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT2);
            translation.push(trans.CANCEL_TEXT);
            translation.push(trans.YES_TEXT);
            this.paymentOperatorConfirm(messageConfirmation, contributionDataParams, translation);
        });
    }
    paymentOperatorConfirm(dataMessage, contributionDataParams, translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${dataMessage.title}`,
                message: `${translation[0]} ${dataMessage.contribution}
    ${dataMessage.device_name}  ${translation[1]}`,
                buttons: [
                    {
                        text: `${translation[2]}`,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                        }
                    }, {
                        text: `${translation[3]}`,
                        handler: () => {
                            if (dataMessage.type === 'converted') {
                                this.paidWithConversionOperator(contributionDataParams);
                            }
                            else if (dataMessage.type === 'notconverted') {
                                this.paidWithoutConversionOperator(contributionDataParams);
                            }
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
    // Paid the user contribution with Ozow after conversion
    paidWithConversionOperator(contributionData) {
        this.loading = true;
        this.showLoadingMessage(contributionData);
        this.contribution.contributeAndconvertWithoutWalletAllshare(contributionData).subscribe((reponse) => {
            if (reponse && reponse.message === 'success') {
                this.sendResponsePerOperator(reponse, contributionData.operator);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithConversionOperator(contributionData);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    // Paid the user contribution with Ozow without conversion
    paidWithoutConversionOperator(contributionData) {
        this.loading = true;
        this.showLoadingMessage(contributionData);
        this.contribution.contributeWithoutWalletAndConversionAllshare(contributionData).subscribe((reponse) => {
            if (reponse && reponse.message === 'success') {
                this.sendResponsePerOperator(reponse, contributionData.operator);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithoutConversionOperator(contributionData);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    // Send message per operator
    sendResponsePerOperator(data, operator) {
        this.checkPaymentStatusOperator(data.pay_token, operator);
        const reference = data && data.refID ? data.refID : '';
        this.refernceId = reference;
        this.cancelPaymentResult(reference);
        switch (operator) {
            case 'ozow':
                window.open(data.url, '_blank');
                break;
            default:
                break;
        }
    }
    // show the loading message
    showLoadingMessage(data) {
        switch (data.operator) {
            case 'orange':
                this.translate.get('ORANGE_PAYMENT_MESSAGE').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'MTN':
                this.translate.get('MTN_PAYMENT_MESSAGE').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'paypal':
                this.translate.get('TOPUP_TEXT1').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'ozow':
                this.translate.get('TOPUP_TEXT1').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            default:
                break;
        }
    }
    // step 2 :  Check the status via Ozow
    checkPaymentStatusOperator(payToken, operator) {
        this.cron = setInterval(() => {
            this.checkPaymentStatusOperatorServer(payToken, operator);
        }, 20000);
    }
    // SHOW THE SUCCES MESSAGE
    showSuccesMessage() {
        this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG1').subscribe(value => {
            this.ui.presentToast(value);
        });
    }
    // clear the time out
    clearTimeoutData() {
        if (this.timeOut) {
            clearTimeout(this.timeOut);
            this.timeOut = null;
        }
    }
    // clear the set interval
    clearSetIntervalData() {
        if (this.cron) {
            clearInterval(this.cron);
        }
        this.cron = null;
        for (let i = 0; i < 1000; i++) {
            clearInterval(i);
        }
    }
    // Check the payment Status
    checkPaymentStatusOperatorServer(payToken, operator) {
        this.wallet.getStatusPaymentOperator(payToken, operator).subscribe((reponse) => {
            if (reponse && reponse.message === 'OK') {
                this.showPaymentResult();
                this.showSuccesMessage();
            }
        }, error => {
            if (error && error.error && error.error.message === 'FAIL') {
                this.exitPayment();
                this.translate.get('ERROR_PAY_CONTRIBUTION_MSG').subscribe(value => {
                    this.ui.presentToast(value);
                });
            }
            else {
                this.exitPayment();
                this.translate.get('ERROR_PAY_CONTRIBUTION_MSG').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.errorService.manageError(error);
            }
        });
    }
    // Show payment confirmation dialog
    showPaymentResult() {
        this.loading = false;
        this.ui.dismissLoading();
        this.initPaymentForm();
        this.clearSetIntervalData();
        this.clearTimeoutData();
        const currentDate = new Date();
        this.auth.setAppLastSession(currentDate.getTime());
        this.events.publish('modal-pay-close');
        // Check if it's a penality
        if (this.contributionData.typecontribution_id && this.contributionData.typecontribution_id === 2) {
            this.events.publish('new-tontine');
            this.navController.setDirection('root');
            this.router.navigate(['dashboard/my-tontines']);
        }
    }
    // Cancel the payment
    cancelPaymentResult(refence) {
        this.timeOut = setTimeout(() => {
            this.exitPayment();
            this.translate.get(['TRANSACTION_CANCEL', 'TOPUP_MSG9']).subscribe(trans => {
                this.ui.presentAlert(`${trans.TRANSACTION_CANCEL}`, `${trans.TOPUP_MSG9} ${refence}`);
            });
        }, 300000);
    }
    // exit the payment directly
    exitPayment() {
        this.loading = false;
        this.ui.dismissLoading();
        this.getAllMethodPaymentType();
        this.initFormMessage();
        this.initPaymentForm();
        this.clearTimeoutData();
        this.clearSetIntervalData();
        this.events.publish('modal-pay-close');
    }
    // clear all timer when exit the page
    ionicViewDidLeave() {
        if (this.loading) {
            this.exitPayment();
        }
    }
    // listen to back button
    hardwareBackButton() {
        this.platform.backButton.subscribe(() => {
            const url = this.router.url;
            if (url === '/dashboard/my-tontines/' + this.tontineData.tontine.tontine_id) {
                if (this.refernceId) {
                    this.cancelPaymentResult(this.refernceId);
                }
                else {
                    this.exitPayment();
                }
            }
        });
    }
};
PaidmodeComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_18__["UserService"] },
    { type: _service_api_service__WEBPACK_IMPORTED_MODULE_12__["ApiService"] },
    { type: _service_ui_service__WEBPACK_IMPORTED_MODULE_19__["UiService"] },
    { type: src_app_auth_service_auth_service__WEBPACK_IMPORTED_MODULE_21__["AuthService"] },
    { type: _service_currency_service__WEBPACK_IMPORTED_MODULE_13__["CurrencyService"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_20__["EventService"] },
    { type: src_app_dashboard_my_tontines_services_contribution_service__WEBPACK_IMPORTED_MODULE_11__["ContributionService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__["Platform"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__["AlertController"] },
    { type: src_app_dashboard_my_wallet_service_wallet_service__WEBPACK_IMPORTED_MODULE_14__["WalletService"] },
    { type: src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_10__["TontineService"] },
    { type: _service_error_service__WEBPACK_IMPORTED_MODULE_5__["ErrorService"] },
    { type: _service_location_service__WEBPACK_IMPORTED_MODULE_8__["LocationService"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_9__["TranslateService"] },
    { type: _service_form_utils_service__WEBPACK_IMPORTED_MODULE_15__["FormUtilsService"] },
    { type: _service_payment_global_data_service__WEBPACK_IMPORTED_MODULE_17__["PaymentGlobalDataService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__["NavController"] },
    { type: _service_payment_error_service__WEBPACK_IMPORTED_MODULE_16__["PaymentErrorService"] }
];
PaidmodeComponent.propDecorators = {
    amountPay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    paypalbuttoncontainer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: ['paypalbuttoncontainer', { static: false },] }]
};
PaidmodeComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-paidmode',
        template: _raw_loader_paidmode_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_paidmode_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], PaidmodeComponent);



/***/ }),

/***/ "KNHg":
/*!*********************************************************!*\
  !*** ./src/app/shared/countries/countries.component.ts ***!
  \*********************************************************/
/*! exports provided: CountriesComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CountriesComponent", function() { return CountriesComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_countries_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./countries.component.html */ "H1su");
/* harmony import */ var _countries_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./countries.component.scss */ "nyb6");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var src_app_shared_service_location_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/shared/service/location.service */ "e009");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _service_util_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../service/util.service */ "6wVa");







let CountriesComponent = class CountriesComponent {
    constructor(location, util, modal) {
        this.location = location;
        this.util = util;
        this.modal = modal;
        this.filterData = [];
        this.states = [];
        this.loading = false;
        this.filter = false;
        this.allData = [];
        this.nbItems = 15;
    }
    ngOnInit() {
        this.loading = true;
        this.getWordCountries(false, null);
    }
    // Filter the list of tontines
    searchForInvitation(ev) {
        this.infiniteScroll.disabled = false;
        this.filter = true;
        const val = ev.target.value;
        if (val && val.trim() !== '') {
            this.allData = this.filterData.filter((country) => {
                if (country) {
                    return (country.country_label.toLowerCase().indexOf(val.toLowerCase()) > -1);
                }
            });
            if (this.allData.length > this.nbItems) {
                for (let i = 0; i < this.nbItems; i++) {
                    this.states.push(this.allData[this.states.length]);
                }
            }
            else {
                this.states = this.allData;
            }
        }
        else {
            this.states = this.filterData;
        }
    }
    // Get all the word countries
    getWordCountries(refresh, event) {
        this.location.getWordCountries(refresh).then((countries) => {
            if (countries && countries.length > 0) {
                const states = this.util.orderByKey(countries, 'country_label');
                this.allData = states;
                this.filterData = states;
                if (this.allData.length > this.nbItems) {
                    for (let i = 0; i < this.nbItems; i++) {
                        this.states.push(this.allData[this.states.length]);
                    }
                }
                else {
                    this.states = this.allData;
                }
            }
            if (event) {
                setTimeout(() => {
                    event.target.complete();
                }, 200);
            }
            this.loading = false;
        });
    }
    // Refresh the list
    refreSher(event) {
        this.infiniteScroll.disabled = false;
        this.getWordCountries(true, event);
    }
    // Infinite scroll data
    infinteScrollData(event) {
        setTimeout(() => {
            for (let i = 0; i < this.nbItems; i++) {
                if (this.states.length < this.allData.length) {
                    this.states.push(this.allData[this.states.length]);
                }
                else if (this.states.length === this.allData.length) {
                    event.target.disabled = true;
                }
            }
            event.target.complete();
        }, 2000);
    }
    // select a country
    selectCountry(event) {
        this.modal.dismiss(event.detail.value, 'select');
    }
    // close modal
    closeCountries() {
        this.modal.dismiss(null, 'cancel');
    }
};
CountriesComponent.ctorParameters = () => [
    { type: src_app_shared_service_location_service__WEBPACK_IMPORTED_MODULE_4__["LocationService"] },
    { type: _service_util_service__WEBPACK_IMPORTED_MODULE_6__["UtilService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_5__["ModalController"] }
];
CountriesComponent.propDecorators = {
    infiniteScroll: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: [_ionic_angular__WEBPACK_IMPORTED_MODULE_5__["IonInfiniteScroll"], { static: false },] }]
};
CountriesComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-countries',
        template: _raw_loader_countries_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_countries_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], CountriesComponent);



/***/ }),

/***/ "L7TT":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/cashmode-loan/cashmode-loan.component.html ***!
  \*********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<form [formGroup]=\"paymentForm\">\r\n  <ion-grid>\r\n    <ion-row>\r\n      <ion-col size=\"12\">        \r\n        <ion-card class=\"paidmode\">\r\n          <ion-card-content class=\"ion-text-center\">\r\n              <ion-row class=\"ion-padding-bottom\">\r\n                <ion-col size=\"12\">\r\n                  <ion-item>\r\n                    <ion-label position=\"floating\">{{ 'AMOUNT_PAY_TEXT' | translate }}</ion-label>\r\n                    <ion-input type=\"number\" formControlName=\"montant_total\"></ion-input>\r\n                    <span slot=\"end\" class=\"slot-prefix ion-no-margin\"> {{ paymentForm.value.currency }} </span>\r\n                  </ion-item> \r\n                  <div class=\"validation-errors\">\r\n                    <ng-container *ngFor=\"let validation of validationMessages.amount\">\r\n                      <div class=\"error-message\" *ngIf=\"amount.hasError(validation.type) && (amount.dirty || amount.touched)\">\r\n                        <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                        {{ validation.message }}\r\n                      </div>\r\n                    </ng-container>\r\n                  </div>          \r\n                </ion-col>    \r\n              </ion-row>                            \r\n          </ion-card-content>\r\n        </ion-card>\r\n      </ion-col>      \r\n    </ion-row>\r\n    <ion-row class=\"ion-justify-content-center\">\r\n      <ion-col size=\"auto\">\r\n        <ion-button expand=\"full\" [disabled]=\"paymentForm.invalid || loadingPay\"\r\n              (click)=\"paidWithCash(contributionData)\"\r\n              color=\"warning\" \r\n              class=\"ion-text-uppercase\"\r\n              shape=\"round\"\r\n              [class.ion-hide]=\"amountPay - (type !== 'interest' ? paymentForm.value.montant_total : amountPay) === 0\"\r\n              >\r\n         {{ 'SAVE_PARTIAL_PAYMENT' | translate }}\r\n        </ion-button>\r\n        <ion-button expand=\"full\" [disabled]=\"paymentForm.invalid || loadingPay\"\r\n              (click)=\"paidWithCash(contributionData)\"\r\n              color=\"warning\" \r\n              class=\"ion-text-uppercase\"\r\n              shape=\"round\"\r\n              [class.ion-hide]=\"amountPay - (type !== 'interest' ? paymentForm.value.montant_total : amountPay)  !== 0\"\r\n              >\r\n         {{ 'SUBMIT_FOR_APPROVAL' | translate }}\r\n        </ion-button>\r\n      </ion-col>\r\n      <p class=\"ion-text-center\" *ngIf=\"loadingPay\">\r\n        <ion-spinner  name=\"circles\"></ion-spinner> \r\n      </p>\r\n    </ion-row>  \r\n  </ion-grid>\r\n  </form> \r\n  ");

/***/ }),

/***/ "LdEE":
/*!***********************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/paidmode/paidmode.component.html ***!
  \***********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<form [formGroup]=\"userPayMethodForm\">\n  <p class=\"ion-text-center\"  *ngIf=\"loadingOperator\">\n    <ion-spinner  name=\"circles\"></ion-spinner>\n  </p>\n<ion-grid>\n  <ion-row>\n    <ion-col size=\"12\">\n      <ion-card class=\"paidmode\">\n        <ion-card-content class=\"ion-text-center\">    \n          <ion-row>\n            <ion-col size=\"12\">\n              <ion-item>\n                <ion-label>{{'COUNTRY_TEXT' | translate}}</ion-label>\n                <ion-select (ionChange)=\"updateCurrencyCountry(userPayMethodForm.value.country_id)\" name=\"country_id\" formControlName=\"country_id\">\n                  <ion-select-option [value]=\"country.country_id\" *ngFor=\"let country of states\">{{ country.country_label }}</ion-select-option>          \n                </ion-select>\n              </ion-item>   \n              <div class=\"validation-errors\">\n                <ng-container *ngFor=\"let validation of validationMessages.country_id\">\n                  <div class=\"error-message\" *ngIf=\"country.hasError(validation.type) && (country.dirty || country.touched)\">\n                    <ion-icon name=\"information-circle-outline\" ></ion-icon>\n                    {{ validation.message }}\n                  </div>\n                </ng-container>\n              </div>     \n            </ion-col>\n          </ion-row>       \n            <ion-row class=\"ion-justify-content-end\" *ngIf=\"userPayMethodForm.value.country_id && paymentMethods && paymentMethods.length > 0\">\n              <ion-col size=\"4\">\n                <ion-img [src]=\"paymentMethods && paymentMethods[userPayMethodForm.value.typePaymentIndex] ? paymentMethods[userPayMethodForm.value.typePaymentIndex].logo : ' '\" class=\"logooperator\"></ion-img>\n              </ion-col>\n            </ion-row>  \n            <ion-row  *ngIf=\"userPayMethodForm.value.country_id && paymentMethods && paymentMethods.length > 0\">\n              <ion-col size=\"12\">\n                <ion-item>\n                  <ion-label>{{ 'USER_PROFILE_TEXT4' | translate }}</ion-label>\n                  <ion-select (ionChange)=\"updatePaymentMethod(userPayMethodForm.value.typePaymentIndex)\" name=\"typePaymentIndex\" formControlName=\"typePaymentIndex\">\n                    <ion-select-option *ngFor=\"let operator of paymentMethods; let operatorId = index\"\n                    [value]=\"operatorId\">{{ operator.name }}</ion-select-option>           \n                  </ion-select>\n                </ion-item>   \n                <div class=\"validation-errors\">\n                  <ng-container *ngFor=\"let validation of validationMessages.payementtype\">\n                    <div class=\"error-message\" *ngIf=\"payementtype.hasError(validation.type) && (payementtype.dirty || payementtype.touched)\">\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\n                      {{ validation.message }}\n                    </div>\n                  </ng-container>\n                </div>   \n              </ion-col>\n            </ion-row> \n            <ion-row   *ngIf=\"checkMobileOperator()\">\n              <ion-col size=\"4\">\n                <ion-item >\n                  <ion-label position=\"floating\">+</ion-label>\n                  <ion-input placeholder=\"{{userPayMethodForm.value.country_prefix}}\" type=\"text\"></ion-input>\n                </ion-item>        \n              </ion-col>\n              <ion-col size=\"8\">\n                <ion-item >\n                  <ion-label position=\"floating\">{{ 'REGISTER_MPHONE' | translate }}</ion-label>\n                  <ion-input (ionChange)=\"checckEmailOrPhone(userPayMethodForm.value.phone,userPayMethodForm.value.typePaymentIndex)\" type=\"tel\" formControlName=\"phone\"></ion-input>\n                </ion-item> \n              </ion-col>\n              <ion-col size=\"12\">\n                <div class=\"validation-errors\" *ngIf=\"errorPhone\">\n                    <div class=\"error-message\">\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\n                      <span [innerHTML]=\"'USER_DETAIL_TEXT11' | translate\"></span>\n                    </div>\n                </div>\n              </ion-col>\n            </ion-row> \n            <ion-row  *ngIf=\"canShowPaypalMessage()\">\n              <ion-col>\n                <div class=\"padding\">\n                <p style=\"color: red\">{{paypalMessage}}</p>\n              </div>\n              </ion-col>\n            </ion-row>                           \n        </ion-card-content>\n      </ion-card>\n    </ion-col>      \n  </ion-row>\n  <ion-row>\n    <svg height=\"0\" width=\"0\" viewBox=\"0 0 27.7 28.93\">\n      <defs>\n        <clipPath id=\"pay-btn-shape\" >\n          <path d=\"M2.57,17.21A11.18,11.18,0,0,1,9.17,5.77h.06l.17-.22.11-.23c-1-.73-1.56-1.42-1.39-2,.42-1.32,5-1.17,10.22.33S27.43,7.47,27,8.81c-.16.48-.86.76-1.88.86h0v.1a5,5,0,0,0,.08.66,3.77,3.77,0,0,0,.1.46l.07.23c2,4,1.7,8.37-1.73,12.53a12.23,12.23,0,0,1-18.42-.1A11.55,11.55,0,0,1,2.57,17.21Z\" />            \n        </clipPath>        \n      </defs>\n    </svg>\n    <ion-col size=\"12\" class=\"ion-text-center wrap-pay-btn\" *ngIf=\"canPay()\"  (click)=\"showPayment(userPayMethodForm.value)\">\n      <svg id=\"pay-btn\" preserveAspectRatio=\"xMidYMid slice\" viewBox=\"0 0 27.7 28.93\">\n        <path  class=\"arc-part\" d=\"M5.91,6.89a12.25,12.25,0,0,0-4.14,9.27,11.14,11.14,0,0,0,.16,1.7,12.82,12.82,0,0,0,.42,1.66c.08.27.19.54.29.8A8.24,8.24,0,0,0,3,21.1a14.85,14.85,0,0,0,.82,1.5,12.25,12.25,0,0,0,3.5,3.62,13.49,13.49,0,0,0,8,2.21,15.81,15.81,0,0,0,1.7-.17,13.74,13.74,0,0,0,1.69-.37,12.79,12.79,0,0,0,5.65-3.5,11.63,11.63,0,0,0,1.88-2.83,12.11,12.11,0,0,0,1.06-3.27,11,11,0,0,0-.94-6.84A10.42,10.42,0,0,1,27.23,13a10.65,10.65,0,0,1,.63,1.71,11.3,11.3,0,0,1,.22,3.64,12.78,12.78,0,0,1-.94,3.56,12.11,12.11,0,0,1-1.88,3.17,12.84,12.84,0,0,1-1.31,1.33,13.32,13.32,0,0,1-1.49,1.12,14,14,0,0,1-3.37,1.59,13,13,0,0,1-1.82.43,17.17,17.17,0,0,1-1.88.21,14.31,14.31,0,0,1-3.77-.27,14.55,14.55,0,0,1-5.12-2.19,11.53,11.53,0,0,1-1.41-1.17A13.92,13.92,0,0,1,.92,18a10.3,10.3,0,0,1-.08-1.88A12.36,12.36,0,0,1,3.31,9.34,10.42,10.42,0,0,1,5.91,6.89ZM7.27,3.35a1.52,1.52,0,0,1-.08-.78,1.82,1.82,0,0,1,.32-.76A2.29,2.29,0,0,1,9,1,6.31,6.31,0,0,1,9.78.89h2.36a25.76,25.76,0,0,1,6.19,1,23.94,23.94,0,0,1,5.74,2.5,20.58,20.58,0,0,1,2.56,1.83,3.84,3.84,0,0,1,1,1.27,1.29,1.29,0,0,1,.08.84,1.24,1.24,0,0,1-.47.64,1.21,1.21,0,0,0,.29-.67,1,1,0,0,0-.21-.65,3.64,3.64,0,0,0-1.07-.94c-.86-.53-1.75-1-2.66-1.47A34.29,34.29,0,0,0,18,3.06,38.16,38.16,0,0,0,12,1.84c-.5-.06-1-.11-1.52-.15l-.73-.13a6.42,6.42,0,0,0-.73,0A1.88,1.88,0,0,0,7.77,2,1.57,1.57,0,0,0,7.27,3.35Z\" />\n        <g class=\"pay-btn-border\">\n          <rect x=\"1.35\" y=\"0.56\" width=\"25.09\" height=\"26.44\" class=\"inner-pot\" />\n        </g>\n        <path class=\"pot-entry\" d=\"M22,6.27c-1.13-.38-2.45-.85-3.86-1.22-1-.28-2.17-.57-3.11-.75-2.64-.47-4.52-.57-4.62-.09-.09.19.19.57.75.85A24.19,24.19,0,0,0,17.46,7.4a22.19,22.19,0,0,0,7.07,1.13c.38-.09.66-.19.66-.28C25.32,7.9,24.05,7.15,22,6.27Z\" />\n        <text class=\"pay-text\"><tspan style=\"letter-spacing: -0.05859375em\">P</tspan><tspan x=\"4.94\" y=\"0\" style=\"letter-spacing: -0.087890625em\">A</tspan><tspan x=\"10.56\" y=\"0\">Y</tspan></text>\n      </svg>       \n      <div class=\"glow-wrap\">\n        <i class=\"glow\"></i>\n      </div>          \n    </ion-col>\n  </ion-row> \n  <ion-row  *ngIf=\"paypalLoading\">\n    <ion-col>\n      <p class=\"ion-text-center ion-padding\">\n        <ion-spinner  name=\"circles\"></ion-spinner>\n      </p>\n    </ion-col>\n  </ion-row> \n  <ion-row *ngIf=\"canShowPaypalButton()\">\n    <ion-col class=\"ion-padding\" size=\"12\">\n      <div #paypalbuttoncontainer id=\"paypal-button-container\"></div> \n    </ion-col>\n  </ion-row> \n</ion-grid>\n</form> \n");

/***/ }),

/***/ "M95J":
/*!*****************************************************************!*\
  !*** ./src/app/shared/paidmode-debt/paidmode-debt.component.ts ***!
  \*****************************************************************/
/*! exports provided: PaidmodeDebtComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaidmodeDebtComponent", function() { return PaidmodeDebtComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_paidmode_debt_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./paidmode-debt.component.html */ "ZNwF");
/* harmony import */ var _paidmode_debt_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./paidmode-debt.component.scss */ "G2qg");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var _service_error_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../service/error.service */ "TkUd");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _service_location_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../service/location.service */ "e009");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/tontine.service */ "/WEl");
/* harmony import */ var _service_api_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../service/api.service */ "6rCG");
/* harmony import */ var _service_currency_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../service/currency.service */ "GmDD");
/* harmony import */ var src_app_dashboard_my_wallet_service_wallet_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/dashboard/my-wallet/service/wallet.service */ "68js");
/* harmony import */ var src_app_dashboard_my_tontines_services_debts_manager_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/debts-manager.service */ "ijC1");
/* harmony import */ var _service_form_utils_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../service/form-utils.service */ "14LV");
/* harmony import */ var _service_payment_error_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../service/payment-error.service */ "FLu1");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var _service_payment_global_data_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../service/payment-global-data.service */ "T8hk");
/* harmony import */ var src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! src/app/dashboard/user/service/user.service */ "6Hie");
/* harmony import */ var _service_ui_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../service/ui.service */ "QB/Y");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../service/events.service */ "r5fM");





















let PaidmodeDebtComponent = class PaidmodeDebtComponent {
    constructor(fb, userService, tontine, platform, router, events, ui, api, debt, paymentData, currency, formUtil, alertController, paymentError, wallet, errorService, location, translate, zone) {
        this.fb = fb;
        this.userService = userService;
        this.tontine = tontine;
        this.platform = platform;
        this.router = router;
        this.events = events;
        this.ui = ui;
        this.api = api;
        this.debt = debt;
        this.paymentData = paymentData;
        this.currency = currency;
        this.formUtil = formUtil;
        this.alertController = alertController;
        this.paymentError = paymentError;
        this.wallet = wallet;
        this.errorService = errorService;
        this.location = location;
        this.translate = translate;
        this.zone = zone;
        this.cron = null;
        this.timeOut = null;
        this.loadingOperator = false;
        this.loading = false;
        this.errorPhone = false;
        this.states = [];
        this.paymentMethods = [];
        this.paypalMessage = '';
        this.reference = this.formUtil.getRandomId();
        this.tontineData = this.tontine.getCurrentTontineData();
        this.userData = this.userService.getUserData();
        this.allPaymentMethods = [];
        const params = this.debt.getDebtsData();
        this.contributionData = params.facture;
        this.paypalLoading = false;
        this.paypal_initialized = false;
        this.refernceId = '';
        this.hardwareBackButton();
    }
    ngOnInit() {
        this.getAllMethodPaymentType();
        this.initFormMessage();
        this.initPaymentForm();
    }
    /******************************** END FORM SERVICES *********************************************/
    // Form getters
    get phone() {
        return this.userPayMethodForm.get('phone');
    }
    get amountError() {
        return this.userPayMethodForm.get('montantAvecFees');
    }
    get country() {
        return this.userPayMethodForm.get('country_id');
    }
    get device_name() {
        return this.userPayMethodForm.get('device_name');
    }
    get payementtype() {
        return this.userPayMethodForm.get('typePaymentIndex');
    }
    get montantContributeError() {
        return this.userPayMethodForm.get('montant');
    }
    // init form message 
    initFormMessage() {
        this.translate.get(['REGISTER_PHONE_REQUIRED', 'AMOUNT_REQUIRED', 'PAID_MODE_REQUIRED', 'M_COUNTRY_REQUIRED'])
            .subscribe(value => {
            this.validationMessages = {
                payementtype: [
                    { type: 'required', message: value.PAID_MODE_REQUIRED }
                ],
                phone: [
                    { type: 'required', message: value.REGISTER_PHONE_REQUIRED },
                ],
                amount: [
                    { type: 'required', message: value.AMOUNT_REQUIRED }
                ],
                country_id: [
                    { type: 'required', message: value.M_COUNTRY_REQUIRED }
                ]
            };
        });
    }
    // Init form message
    initPaymentForm() {
        const currentPayment = this.paymentData.getDefaultPaymentMethod();
        this.userPayMethodForm = this.fb.group({
            country_id: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            country_prefix: [''],
            countryId: [''],
            handleFees: [''],
            handleFeesType: [''],
            device_name: [''],
            currency: [''],
            currencyLabel: [''],
            pay_token: [''],
            url: [''],
            montant: [this.balance, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].min(1)])],
            montantAvecFees: ['0'],
            montantTotal: ['0'],
            type_payment_id: [currentPayment ? currentPayment.typepaiement_id : ''],
            type_payment_name: [currentPayment ? currentPayment.name : ''],
            typePaymentIndex: [0, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            phone: [currentPayment && this.formUtil.validatePhone(currentPayment.numero_compte) ? currentPayment.numero_compte : ''],
            numero: ['']
        });
    }
    // Remove space
    removeSpace() {
        this.userPayMethodForm.get('phone').setValue(this.paymentData.removeInputSpace(this.userPayMethodForm.value.phone));
    }
    // Check if it's not  mobile operator
    checkMobileOperator() {
        return this.paymentData.isMobileOperator(this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // Can show paypal message
    canShowPaypalMessage() {
        return this.userPayMethodForm.value.montant && this.paymentData.hasPaypalMessage(this.paypalMessage, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can show  paypal button
    canShowPaypalButton() {
        return this.paymentData.hasPaypalButton(this.paypal_initialized, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can make payment 
    canPay() {
        return this.paymentData.canShowPayment(this.userPayMethodForm.valid, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex], this.userPayMethodForm.value.phone, this.errorPhone);
    }
    // check if emial or phone is valid
    checckEmailOrPhone(inputValue, index) {
        this.removeSpace();
        this.userPayMethodForm.get('type_payment_id').setValue(this.paymentMethods[index].id);
        switch (this.paymentMethods[index].name) {
            case 'ORANGE MONEY':
                this.errorPhone = !this.formUtil.validatePhone(inputValue);
                if (!this.errorPhone) {
                    this.userPayMethodForm.get('numero').setValue(this.userPayMethodForm.value.country_prefix +
                        '' + this.userPayMethodForm.value.phone);
                }
                break;
            case 'MTN MOBILE MONEY':
                this.errorPhone = !this.formUtil.validatePhone(inputValue);
                if (!this.errorPhone) {
                    this.userPayMethodForm.get('numero').setValue(this.userPayMethodForm.value.country_prefix +
                        '' + this.userPayMethodForm.value.phone);
                }
                break;
            default:
                break;
        }
    }
    // get all payment method
    getAllMethodPaymentType() {
        this.loadingOperator = true;
        this.userService.getAllMethodPaymentType().subscribe((reponse) => {
            this.paymentMethods = [];
            this.loadingOperator = false;
            if (reponse && reponse.typePayment && reponse.typePayment.length > 0) {
                this.paymentMethods = this.paymentData.formatPaymentMethodResponseContribution(reponse.typePayment);
            }
            const defaultMethod = [{
                    id: 0, country_id: 0, logo: 'assets/pesuwallet.jpg',
                    currency: this.contributionData.device_name, name: 'WALLET', placeholder: '',
                    handling_fees: 0,
                    type_handling_fees: 'valeur'
                }];
            this.paymentMethods = defaultMethod.concat(this.paymentMethods);
            this.allPaymentMethods = this.paymentMethods;
            this.getCountries(false);
        }, error => {
            this.loadingOperator = false;
            this.paymentMethods.push({
                id: 0, country_id: 0, logo: 'assets/pesuwallet.jpg',
                currency: this.contributionData.device_name, name: 'WALLET', placeholder: '',
                handling_fees: 0,
                type_handling_fees: 'valeur'
            });
            this.allPaymentMethods = this.paymentMethods;
            this.getCountries(false);
            this.errorService.manageError(error);
        });
    }
    // Get all countries
    getCountries(refresher) {
        this.location.getAllCountries(refresher).then((countries) => {
            this.states = this.paymentData.formatCountriesData(countries);
            // Set the country of the tontine
            if (this.states && this.states.length > 0) {
                setTimeout(() => {
                    this.states.forEach(country => {
                        if (country.country_key === this.tontineData.tontine.country_key) {
                            this.updateFormData(country);
                        }
                    });
                }, 200);
            }
        });
    }
    // update the form data
    updateFormData(country) {
        if (country) {
            this.userPayMethodForm.get('countryId').setValue(country.country_id);
            this.userPayMethodForm.get('country_prefix').setValue(country.country_prefixe);
            this.userPayMethodForm.get('currency').setValue(country.device_name);
            this.userPayMethodForm.get('handleFees').setValue(country.handling_fees);
            this.userPayMethodForm.get('handleFeesType').setValue(country.type_handling_fees);
            this.userPayMethodForm.get('currencyLabel').setValue(country.currency_label);
            this.zone.run(() => {
                this.userPayMethodForm.get('country_id').setValue(country.country_id);
            });
            this.updatePaymentsMethods(country.country_id);
        }
    }
    // Update the payment method
    updatePaymentMethod(index) {
        if (this.paymentMethods[index]) {
            this.userPayMethodForm.get('type_payment_id').setValue(this.paymentMethods[index].id);
            this.userPayMethodForm.get('type_payment_name').setValue(this.paymentMethods[index].name);
            this.userPayMethodForm.get('device_name').setValue(this.paymentMethods[index].currency);
            this.userPayMethodForm.get('handleFees').setValue(this.paymentMethods[index].handling_fees);
            this.userPayMethodForm.get('handleFeesType').setValue(this.paymentMethods[index].type_handling_fees);
            this.zone.run(() => {
                this.userPayMethodForm.get('typePaymentIndex').setValue(index);
            });
        }
        if (this.paymentMethods && this.paymentMethods[index] &&
            this.paymentMethods[index].name === 'PAYPAL') {
            this.paypal_initialized = false;
            this.updatePaypalAmount();
        }
    }
    updatePaymentsMethods(countryId) {
        // update the payment method
        const paymentsMethods = [];
        this.paymentMethods = [];
        this.allPaymentMethods.forEach(payment => {
            if (payment.country_id === countryId || payment.country_id === 0) {
                paymentsMethods.push(payment);
            }
        });
        this.paymentMethods = paymentsMethods;
        if (this.paymentMethods && this.paymentMethods.length > 0) {
            this.updatePaymentMethod(0);
        }
    }
    // Calucalte the payment with handlfees
    geetAmountWithFees(amountShare, devise) {
        return this.paymentData.getHandleFeesWithDevise(amountShare, devise, this.userPayMethodForm.value.handleFees, this.userPayMethodForm.value.handleFeesType);
    }
    // Update the country info country prfix
    updateCurrencyCountry(countryId) {
        this.zone.run(() => {
            this.paymentMethods = [];
        });
        setTimeout(() => {
            this.states.forEach(state => {
                if (state.country_id === countryId) {
                    this.updateFormData(state);
                }
            });
        }, 300);
    }
    // Show the payment mode
    showPayment(mode) {
        switch (mode.type_payment_name) {
            case 'ORANGE MONEY':
                this.updateParametersOrange();
                break;
            case 'OZOW':
                this.updateParametersOzow();
                break;
            case 'MTN MOBILE MONEY':
                this.updateParametersMtn();
                break;
            case 'WALLET':
                this.updateParametersWallet();
                break;
            default:
                break;
        }
    }
    /******************************** END FORM SERVICES *********************************************/
    /******************************** START WALLET PAYMENT *********************************************/
    paymentWalletConfirm(dataMessage, translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${dataMessage.title}`,
                message: `${translation[0]} ${dataMessage.montant}
        ${dataMessage.device_name} ${translation[1]}`,
                buttons: [
                    {
                        text: `${translation[2]}`,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                        }
                    }, {
                        text: `${translation[3]}`,
                        handler: () => {
                            this.paidWithWallet(dataMessage);
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
    updateParametersWallet() {
        const translation = [];
        this.translate.get(['CONFIRM_PAY_CONTRIBUTION_SUBTEXT1', 'CONFIRM_PAY_CONTRIBUTION_SUBTEXT2', 'CANCEL_TEXT', 'YES_TEXT']).subscribe(trans => {
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT1);
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT2);
            translation.push(trans.CANCEL_TEXT);
            translation.push(trans.YES_TEXT);
            const params = this.debt.getDebtsData();
            const items = params.items;
            const itemsParams = [];
            items.forEach(item => {
                itemsParams.push({ seance_id: item.seance_id, numero_part: item.numero_part, montant: item.montant, typecontribution_id: item.typecontribution_id });
            });
            const data = {
                title: this.tontineData.tontine.name,
                reference_facture: params.facture ? params.facture.reference : '',
                device_name: params.facture ? params.facture.device_name : '',
                montant_total_facture: params.facture ? params.facture.montant : 0,
                montant: this.userPayMethodForm.value.montant,
                country_id: this.userPayMethodForm.value.countryId,
                liste_item: itemsParams,
                tontine_id: params.facture ? params.facture.tontine_id : ''
            };
            this.paymentWalletConfirm(data, translation);
        });
    }
    // Paid the contribution with wallet
    paidWithWallet(contributionData) {
        this.loading = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        this.debt.paidMemberBillOnlineWallet(contributionData)
            .subscribe((reponse) => {
            this.loading = false;
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG1').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.initPaymentForm();
                if (this.balance - this.userPayMethodForm.value.montant === 0) {
                    this.events.publish('modal-close', { result: 'complete-all' });
                }
                else {
                    this.events.publish('modal-close', { result: 'partial' });
                }
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithWallet(contributionData);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    /******************************** START WALLET PAYMENT *********************************************/
    /******************************** START PAYPAL PAYMENT *********************************************/
    // update the paypal total amount
    updatePaypalAmount() {
        if (this.userPayMethodForm.value.montant > 0) {
            if (this.userPayMethodForm.value.type_payment_name === 'PAYPAL') {
                const amount = this.geetAmountWithFees(this.userPayMethodForm.value.montant, this.contributionData.device_name);
                this.userPayMethodForm.get('montantAvecFees').setValue(amount);
                if (this.contributionData.device_name !== this.userPayMethodForm.value.device_name) {
                    this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.userPayMethodForm.value.montant)
                        .then(montantSansFees => {
                        if (montantSansFees) {
                            const amountWithFees = this.geetAmountWithFees(montantSansFees, this.userPayMethodForm.value.device_name);
                            this.userPayMethodForm.get('montantTotal').setValue(amountWithFees);
                            this.translate.get('PAIDMODE_MSG2').subscribe(value => {
                                this.paypalMessage = `${value} ${this.userPayMethodForm.value.montantAvecFees}
                 ${this.contributionData.device_name} =
                ${this.userPayMethodForm.value.montantTotal}
                ${this.userPayMethodForm.value.device_name}`;
                                this.setupPayPay();
                            });
                        }
                        else {
                            this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                                this.paypalMessage = value;
                            });
                        }
                    });
                }
                else {
                    this.userPayMethodForm.get('montantTotal').setValue(this.userPayMethodForm.value.montantAvecFees);
                    this.translate.get('PAIDMODE_MSG2').subscribe(value => {
                        this.paypalMessage = `${value}  ${this.userPayMethodForm.value.montantTotal}
            ${this.userPayMethodForm.value.device_name}`;
                        this.setupPayPay();
                    });
                }
            }
        }
    }
    setupPayPay() {
        if (!this.paypal_initialized) {
            this.initPayPal();
        }
    }
    initPayPal() {
        if (this.userPayMethodForm.value.montantTotal > 0) {
            this.paypalLoading = true;
            this.paypal_initialized = true;
            let paypalbuttoncontainer = this.paypalbuttoncontainer.nativeElement;
            let _this = this;
            paypal.Button.render({
                env: 'production',
                style: {
                    size: 'responsive',
                    color: 'gold',
                    shape: 'pill',
                    label: 'checkout',
                    tagline: false
                },
                client: {
                    sandbox: 'ARIMcMamksC74CLp7Zavgn62RsKK0XDfjePxjU9gsWmcdzyI3AYz3PwADIktvUgCdhAwWCXPaBzCckOC',
                    production: 'AVdCN0ymBsPer15VtLbeNoZ3vkjkhap6vXoxwsWF3B0H4GM_mVQ5GVpJ2h4-G_AlVVIsBYWx4JpVVxLT'
                },
                // Show the buyer a 'Pay Now' button in the checkout flow
                commit: true,
                payment: function (data, actions) {
                    return actions.payment.create({
                        payment: {
                            transactions: [
                                {
                                    amount: {
                                        total: _this.userPayMethodForm.value.montantTotal,
                                        currency: _this.userPayMethodForm.value.device_name
                                    },
                                    description: 'Toupesu'
                                }
                            ]
                        }
                    });
                },
                // onAuthorize() is called when the buyer approves the payment
                onAuthorize: function (data, actions, error) {
                    if (error) {
                        _this.exitPayment();
                    }
                    if (error === 'INSTRUMENT_DECLINED') {
                        _this.exitPayment();
                    }
                    // Make a call to the REST ui to execute the payment
                    return actions.payment.execute().then(function () {
                        const params = {
                            refID: _this.reference,
                            amount: _this.userPayMethodForm.value.montantTotal,
                            moneyCode: _this.userPayMethodForm.value.device_name,
                            product: 'Toupesu',
                            paypalID: data.paymentToken.split('-')[1]
                        };
                        // Save and check the payment result
                        _this.userPayMethodForm.get('pay_token').setValue(data.paymentToken.split('-')[1]);
                        _this.api.post('livepaygateway/paypal/savePayRequest', JSON.stringify(params)).subscribe((ans) => {
                            if (ans && ans.success) {
                                _this.updateParametersPaypal(data.paymentToken.split('-')[1]);
                            }
                        }, error => {
                            _this.updateParametersPaypal(data.paymentToken.split('-')[1]);
                        });
                    });
                },
                onCancel: function (data, actions) {
                    _this.exitPayment();
                },
                onClick: (data, actions) => {
                    _this.translate.get('TOPUP_TEXT1').subscribe(value => {
                        _this.ui.presentToast(value);
                    });
                }
            }, paypalbuttoncontainer);
            setTimeout(() => {
                this.paypalLoading = false;
            }, 2000);
        }
    }
    // Update parameters PAYPAL
    updateParametersPaypal(payToken) {
        const params = this.debt.getDebtsData();
        const items = params.items;
        const itemsParams = [];
        items.forEach(item => {
            itemsParams.push({ seance_id: item.seance_id, numero_part: item.numero_part, montant: item.montant, typecontribution_id: item.typecontribution_id });
        });
        const amount = this.geetAmountWithFees(this.userPayMethodForm.value.montant, params.facture.device_name);
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (params.facture.device_name === this.userPayMethodForm.value.device_name) {
            const paramsData = {
                reference_facture: params.facture ? params.facture.reference : '',
                device_name: params.facture ? params.facture.device_name : '',
                montant_total_facture: params.facture ? params.facture.montant : 0,
                montant_avec_handling_fees: this.userPayMethodForm.value.montantAvecFees,
                montant_sans_handling_fees: this.userPayMethodForm.value.montant,
                numero: this.userData.phone_with_prefix,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                country_id: this.userPayMethodForm.value.countryId,
                liste_item: itemsParams,
                tontine_id: params.facture ? params.facture.tontine_id : '',
                pay_token: payToken,
                operator: 'paypal'
            };
            this.paidWithoutConversionOperator(paramsData);
        }
        else {
            this.currency.convert(params.facture.device_name, this.userPayMethodForm.value.device_name, this.userPayMethodForm.value.montant).then(montantsansFees => {
                if (montantsansFees) {
                    const paramsData = {
                        reference_facture: params.facture ? params.facture.reference : '',
                        device_depart_name: this.userPayMethodForm.value.device_name,
                        device_arrivee_name: params.facture ? params.facture.device_name : '',
                        montant_total_facture: params.facture ? params.facture.montant : 0,
                        montant_depart_avec_handling_fees: this.geetAmountWithFees(montantsansFees, this.userPayMethodForm.value.device_name),
                        montant_depart_sans_handling_fees: montantsansFees ? montantsansFees : 0,
                        montant_arrivee_avec_handling_fees: this.userPayMethodForm.value.montantAvecFees,
                        montant_arrivee_sans_handling_fees: this.userPayMethodForm.value.montant,
                        numero: this.userData.phone_with_prefix,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        liste_item: itemsParams,
                        tontine_id: params.facture ? params.facture.tontine_id : '',
                        pay_token: payToken,
                        operator: 'paypal'
                    };
                    this.paidWithConversionOperator(paramsData);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
    }
    /******************************** END PAYPAL PAYMENT *********************************************/
    /******************************** START MTN PAYMENT *********************************************/
    // Update parameters  Mtn payment
    updateParametersMtn() {
        const params = this.debt.getDebtsData();
        const items = params.items;
        const itemsParams = [];
        items.forEach(item => {
            itemsParams.push({ seance_id: item.seance_id, numero_part: item.numero_part, montant: item.montant, typecontribution_id: item.typecontribution_id });
        });
        const amount = this.geetAmountWithFees(this.userPayMethodForm.value.montant, params.facture.device_name);
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (params.facture.device_name !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(params.facture.device_name, this.userPayMethodForm.value.device_name, this.userPayMethodForm.value.montant).then(montantsansFees => {
                if (montantsansFees) {
                    const dataParams = {
                        reference_facture: params.facture ? params.facture.reference : '',
                        device_depart_name: this.userPayMethodForm.value.device_name,
                        device_arrivee_name: params.facture ? params.facture.device_name : '',
                        montant_total_facture: params.facture ? params.facture.montant : 0,
                        montant_depart_avec_handling_fees: this.geetAmountWithFees(montantsansFees, this.userPayMethodForm.value.device_name),
                        montant_depart_sans_handling_fees: montantsansFees ? montantsansFees : 0,
                        montant_arrivee_avec_handling_fees: this.userPayMethodForm.value.montantAvecFees,
                        montant_arrivee_sans_handling_fees: this.userPayMethodForm.value.montant,
                        numero: this.userPayMethodForm.value.numero,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        liste_item: itemsParams,
                        tontine_id: params.facture ? params.facture.tontine_id : '',
                        operator: 'MTN'
                    };
                    this.contributionDataParams = dataParams;
                    const messageConfirmation = {
                        title: params.title, contribution: this.contributionDataParams.montant_depart_avec_handling_fees,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const paramsData = {
                reference_facture: params.facture ? params.facture.reference : '',
                device_name: params.facture ? params.facture.device_name : '',
                montant_total_facture: params.facture ? params.facture.montant : 0,
                montant_avec_handling_fees: this.userPayMethodForm.value.montantAvecFees,
                montant_sans_handling_fees: this.userPayMethodForm.value.montant,
                numero: this.userPayMethodForm.value.numero,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                country_id: this.userPayMethodForm.value.countryId,
                liste_item: itemsParams,
                tontine_id: params.facture ? params.facture.tontine_id : '',
                operator: 'MTN'
            };
            this.contributionDataParams = paramsData;
            const messageConfirmation = {
                title: params.title, contribution: this.userPayMethodForm.value.montantAvecFees,
                device_name: params.facture ? params.facture.device_name : '', type: 'notconverted'
            };
            this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END MTN PAYMENT *********************************************/
    /******************************** START ORANGE PAYMENT *********************************************/
    // Update parameters  Orange payment
    updateParametersOrange() {
        const params = this.debt.getDebtsData();
        const items = params.items;
        const itemsParams = [];
        items.forEach(item => {
            itemsParams.push({ seance_id: item.seance_id, numero_part: item.numero_part, montant: item.montant, typecontribution_id: item.typecontribution_id });
        });
        const amount = this.geetAmountWithFees(this.userPayMethodForm.value.montant, params.facture.device_name);
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (params.facture.device_name !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(params.facture.device_name, this.userPayMethodForm.value.device_name, this.userPayMethodForm.value.montant).then(montantsansFees => {
                if (montantsansFees) {
                    const dataParams = {
                        reference_facture: params.facture ? params.facture.reference : '',
                        device_depart_name: this.userPayMethodForm.value.device_name,
                        device_arrivee_name: params.facture ? params.facture.device_name : '',
                        montant_total_facture: params.facture ? params.facture.montant : 0,
                        montant_depart_avec_handling_fees: this.geetAmountWithFees(montantsansFees, this.userPayMethodForm.value.device_name),
                        montant_depart_sans_handling_fees: montantsansFees ? montantsansFees : 0,
                        montant_arrivee_avec_handling_fees: this.userPayMethodForm.value.montantAvecFees,
                        montant_arrivee_sans_handling_fees: this.userPayMethodForm.value.montant,
                        numero: this.userPayMethodForm.value.numero,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        liste_item: itemsParams,
                        tontine_id: params.facture ? params.facture.tontine_id : '',
                        operator: 'orange'
                    };
                    this.contributionDataParams = dataParams;
                    const messageConfirmation = {
                        title: params.title, contribution: this.contributionDataParams.montant_depart_avec_handling_fees,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const paramsData = {
                reference_facture: params.facture ? params.facture.reference : '',
                device_name: params.facture ? params.facture.device_name : '',
                montant_total_facture: params.facture ? params.facture.montant : 0,
                montant_avec_handling_fees: this.userPayMethodForm.value.montantAvecFees,
                montant_sans_handling_fees: this.userPayMethodForm.value.montant,
                numero: this.userPayMethodForm.value.numero,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                country_id: this.userPayMethodForm.value.countryId,
                liste_item: itemsParams,
                tontine_id: params.facture ? params.facture.tontine_id : '',
                operator: 'orange'
            };
            this.contributionDataParams = paramsData;
            const messageConfirmation = {
                title: params.title, contribution: this.userPayMethodForm.value.montantAvecFees,
                device_name: params.facture ? params.facture.device_name : '', type: 'notconverted'
            };
            this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END ORANGE PAYMENT *********************************************/
    /******************************** START OZOW PAYMENT *********************************************/
    // Update parameters OZOW payment
    updateParametersOzow() {
        const params = this.debt.getDebtsData();
        const items = params.items;
        const itemsParams = [];
        items.forEach(item => {
            itemsParams.push({ seance_id: item.seance_id, numero_part: item.numero_part, montant: item.montant, typecontribution_id: item.typecontribution_id });
        });
        const amount = this.geetAmountWithFees(this.userPayMethodForm.value.montant, params.facture.device_name);
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (params.facture.device_name !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(params.facture.device_name, this.userPayMethodForm.value.device_name, this.userPayMethodForm.value.montant).then(montantsansFees => {
                if (montantsansFees) {
                    const dataParams = {
                        reference_facture: params.facture ? params.facture.reference : '',
                        device_depart_name: this.userPayMethodForm.value.device_name,
                        device_arrivee_name: params.facture ? params.facture.device_name : '',
                        montant_total_facture: params.facture ? params.facture.montant : 0,
                        montant_depart_avec_handling_fees: this.geetAmountWithFees(montantsansFees, this.userPayMethodForm.value.device_name),
                        montant_depart_sans_handling_fees: montantsansFees ? montantsansFees : 0,
                        montant_arrivee_avec_handling_fees: this.userPayMethodForm.value.montantAvecFees,
                        montant_arrivee_sans_handling_fees: this.userPayMethodForm.value.montant,
                        numero: this.userData.phone_with_prefix,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        liste_item: itemsParams,
                        tontine_id: params.facture ? params.facture.tontine_id : '',
                        operator: 'ozow'
                    };
                    this.contributionDataParams = dataParams;
                    const messageConfirmation = {
                        title: params.title, contribution: this.contributionDataParams.montant_depart_avec_handling_fees,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const paramsData = {
                reference_facture: params.facture ? params.facture.reference : '',
                device_name: params.facture ? params.facture.device_name : '',
                montant_total_facture: params.facture ? params.facture.montant : 0,
                montant_avec_handling_fees: this.userPayMethodForm.value.montantAvecFees,
                montant_sans_handling_fees: this.userPayMethodForm.value.montant,
                numero: this.userData.phone_with_prefix,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                country_id: this.userPayMethodForm.value.countryId,
                liste_item: itemsParams,
                tontine_id: params.facture ? params.facture.tontine_id : '',
                operator: 'ozow'
            };
            this.contributionDataParams = paramsData;
            const messageConfirmation = {
                title: params.title, contribution: this.userPayMethodForm.value.montantAvecFees,
                device_name: params.facture ? params.facture.device_name : '', type: 'notconverted'
            };
            this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END OZOW PAYMENT *********************************************/
    /******************************** START COMMON PAYMENT SERVICES *********************************************/
    showConfirmationMessage(messageConfirmation, contributionDataParams) {
        const translation = [];
        this.translate.get(['CONFIRM_PAY_CONTRIBUTION_SUBTEXT1', 'CONFIRM_PAY_CONTRIBUTION_SUBTEXT2', 'CANCEL_TEXT', 'YES_TEXT']).subscribe(trans => {
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT1);
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT2);
            translation.push(trans.CANCEL_TEXT);
            translation.push(trans.YES_TEXT);
            this.paymentOperatorConfirm(messageConfirmation, contributionDataParams, translation);
        });
    }
    paymentOperatorConfirm(dataMessage, contributionDataParams, translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${dataMessage.title}`,
                message: `${translation[0]} ${dataMessage.contribution}
    ${dataMessage.device_name}  ${translation[1]}`,
                buttons: [
                    {
                        text: `${translation[2]}`,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                        }
                    }, {
                        text: `${translation[3]}`,
                        handler: () => {
                            if (dataMessage.type === 'converted') {
                                this.paidWithConversionOperator(contributionDataParams);
                            }
                            else if (dataMessage.type === 'notconverted') {
                                this.paidWithoutConversionOperator(contributionDataParams);
                            }
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
    // Paid the user contribution with operator after conversion
    paidWithConversionOperator(contributionData) {
        this.loading = true;
        this.showLoadingMessage(contributionData);
        this.debt.paidMemberBillOnlineWithConversion(contributionData).subscribe((reponse) => {
            if (reponse && reponse.message === 'success') {
                this.sendResponsePerOperator(reponse, contributionData.operator);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithConversionOperator(contributionData);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    // Paid the user contribution with operator without conversion
    paidWithoutConversionOperator(contributionData) {
        this.loading = true;
        this.showLoadingMessage(contributionData);
        this.debt.paidMemberBillOnlineWithoutConversion(contributionData).subscribe((reponse) => {
            if (reponse && reponse.message === 'success') {
                this.sendResponsePerOperator(reponse, contributionData.operator);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithoutConversionOperator(contributionData);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    // Send message per operator
    sendResponsePerOperator(data, operator) {
        this.checkPaymentStatusOperator(data.pay_token, operator);
        const reference = data && data.refID ? data.refID : '';
        this.refernceId = reference;
        this.cancelPaymentResult(reference);
        switch (operator) {
            case 'ozow':
                window.open(data.url, '_blank');
                break;
            default:
                break;
        }
    }
    // show the loading message
    showLoadingMessage(data) {
        switch (data.operator) {
            case 'orange':
                this.translate.get('ORANGE_PAYMENT_MESSAGE').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'MTN':
                this.translate.get('MTN_PAYMENT_MESSAGE').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'paypal':
                this.translate.get('TOPUP_TEXT1').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'ozow':
                this.translate.get('TOPUP_TEXT1').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            default:
                break;
        }
    }
    // step 2 :  Check the status via Ozow
    checkPaymentStatusOperator(payToken, operator) {
        this.cron = setInterval(() => {
            this.checkPaymentStatusOperatorServer(payToken, operator);
        }, 20000);
    }
    // SHOW THE SUCCES MESSAGE
    showSuccesMessage() {
        this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG1').subscribe(value => {
            this.ui.presentToast(value);
        });
    }
    // clear the time out
    clearTimeoutData() {
        if (this.timeOut) {
            clearTimeout(this.timeOut);
            this.timeOut = null;
        }
    }
    // clear the set interval
    clearSetIntervalData() {
        if (this.cron) {
            clearInterval(this.cron);
        }
        this.cron = null;
        for (let i = 0; i < 1000; i++) {
            clearInterval(i);
        }
    }
    // Check the payment Status
    checkPaymentStatusOperatorServer(payToken, operator) {
        this.wallet.getStatusPaymentOperator(payToken, operator).subscribe((reponse) => {
            if (reponse && reponse.message === 'OK') {
                this.showPaymentResult();
                this.showSuccesMessage();
            }
        }, error => {
            if (error && error.error && error.error.message === 'FAIL') {
                this.exitPayment();
                this.translate.get('ERROR_PAY_CONTRIBUTION_MSG').subscribe(value => {
                    this.ui.presentToast(value);
                });
            }
            else {
                this.exitPayment();
                this.translate.get('ERROR_PAY_CONTRIBUTION_MSG').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.errorService.manageError(error);
            }
        });
    }
    // Show payment confirmation dialog
    showPaymentResult() {
        this.loading = false;
        this.ui.dismissLoading();
        this.initPaymentForm();
        this.clearTimeoutData();
        this.clearSetIntervalData();
        if (this.balance - this.userPayMethodForm.value.montant === 0) {
            this.events.publish('modal-close', { result: 'complete-all' });
        }
        else {
            this.events.publish('modal-close', { result: 'partial' });
        }
    }
    // Cancel the payment
    cancelPaymentResult(refence) {
        this.timeOut = setTimeout(() => {
            this.exitPayment();
            this.translate.get(['TRANSACTION_CANCEL', 'TOPUP_MSG9']).subscribe(trans => {
                this.ui.presentAlert(`${trans.TRANSACTION_CANCEL}`, `${trans.TOPUP_MSG9} ${refence}`);
            });
        }, 300000);
    }
    // exit the payment directly
    exitPayment() {
        this.loading = false;
        this.ui.dismissLoading();
        this.getAllMethodPaymentType();
        this.initPaymentForm();
        this.initFormMessage();
        this.clearTimeoutData();
        this.clearSetIntervalData();
    }
    ionicViewDidLeave() {
        if (this.loading) {
            this.exitPayment();
        }
    }
    // listen to back button
    hardwareBackButton() {
        this.platform.backButton.subscribe(() => {
            const url = this.router.url;
            if (url === '/dashboard/my-tontines/' + this.tontineData.tontine.tontine_id + '/debts/in-progress-paiement') {
                if (this.refernceId) {
                    this.cancelPaymentResult(this.refernceId);
                }
                else {
                    this.exitPayment();
                }
            }
        });
    }
};
PaidmodeDebtComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_18__["UserService"] },
    { type: src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_9__["TontineService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_6__["Platform"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_16__["Router"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_20__["EventService"] },
    { type: _service_ui_service__WEBPACK_IMPORTED_MODULE_19__["UiService"] },
    { type: _service_api_service__WEBPACK_IMPORTED_MODULE_10__["ApiService"] },
    { type: src_app_dashboard_my_tontines_services_debts_manager_service__WEBPACK_IMPORTED_MODULE_13__["DebtsManagerService"] },
    { type: _service_payment_global_data_service__WEBPACK_IMPORTED_MODULE_17__["PaymentGlobalDataService"] },
    { type: _service_currency_service__WEBPACK_IMPORTED_MODULE_11__["CurrencyService"] },
    { type: _service_form_utils_service__WEBPACK_IMPORTED_MODULE_14__["FormUtilsService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_6__["AlertController"] },
    { type: _service_payment_error_service__WEBPACK_IMPORTED_MODULE_15__["PaymentErrorService"] },
    { type: src_app_dashboard_my_wallet_service_wallet_service__WEBPACK_IMPORTED_MODULE_12__["WalletService"] },
    { type: _service_error_service__WEBPACK_IMPORTED_MODULE_5__["ErrorService"] },
    { type: _service_location_service__WEBPACK_IMPORTED_MODULE_7__["LocationService"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__["TranslateService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] }
];
PaidmodeDebtComponent.propDecorators = {
    amountPay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    balance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    paypalbuttoncontainer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: ['paypalbuttoncontainer', { static: false },] }]
};
PaidmodeDebtComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-paidmode-debt',
        template: _raw_loader_paidmode_debt_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_paidmode_debt_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], PaidmodeDebtComponent);



/***/ }),

/***/ "NvQy":
/*!*************************************************************!*\
  !*** ./src/app/shared/select-data/select-data.component.ts ***!
  \*************************************************************/
/*! exports provided: SelectDataComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectDataComponent", function() { return SelectDataComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_select_data_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./select-data.component.html */ "hy5b");
/* harmony import */ var _select_data_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./select-data.component.scss */ "1H77");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ "TEn/");





let SelectDataComponent = class SelectDataComponent {
    constructor(modal, navParams) {
        this.modal = modal;
        this.navParams = navParams;
        this.filterData = [];
        this.listData = [];
        this.loading = false;
        this.filter = false;
        this.allData = [];
        this.nbItems = 15;
        this.param = this.navParams.get('tontine');
        this.type = this.navParams.get('type');
    }
    ngOnInit() {
        this.loading = true;
        this.getData(this.param);
    }
    // Filter the list of tontines
    searchForInvitation(ev) {
        this.infiniteScroll.disabled = false;
        this.filter = true;
        const val = ev.target.value;
        if (val && val.trim() !== '') {
            this.allData = this.filterData.filter((data) => {
                if (data) {
                    return (data.name.toLowerCase().indexOf(val.toLowerCase()) > -1);
                }
            });
            if (this.allData.length > this.nbItems) {
                for (let i = 0; i < this.nbItems; i++) {
                    this.listData.push(this.allData[this.listData.length]);
                }
            }
            else {
                this.listData = this.allData;
            }
        }
        else {
            this.listData = this.filterData;
        }
    }
    // Get all data
    getData(data) {
        this.allData = [];
        if (this.type === 'tontine') {
            data.forEach(element => {
                this.allData.push({ id: element.tontine.tontine_id, name: element.tontine.name });
            });
        }
        else if (this.type === 'invitation' || this.type === 'notification') {
            let index = 0;
            data.forEach(element => {
                this.allData.push({ id: index, name: element.tontine.name });
                index++;
            });
        }
        this.filterData = this.allData;
        if (this.allData.length > this.nbItems) {
            for (let i = 0; i < this.nbItems; i++) {
                this.listData.push(this.allData[this.listData.length]);
            }
        }
        else {
            this.listData = this.allData;
        }
    }
    // Infinite scroll data
    infinteScrollData(event) {
        setTimeout(() => {
            for (let i = 0; i < this.nbItems; i++) {
                if (this.listData.length < this.allData.length) {
                    this.listData.push(this.allData[this.listData.length]);
                }
                else if (this.listData.length === this.allData.length) {
                    event.target.disabled = true;
                }
            }
            event.target.complete();
        }, 2000);
    }
    // select a country
    selectData(event) {
        this.modal.dismiss(event.detail.value, 'select');
    }
    // close modal
    closeModal() {
        this.modal.dismiss(null, 'cancel');
    }
};
SelectDataComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["ModalController"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["NavParams"] }
];
SelectDataComponent.propDecorators = {
    infiniteScroll: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: [_ionic_angular__WEBPACK_IMPORTED_MODULE_4__["IonInfiniteScroll"], { static: false },] }]
};
SelectDataComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-select-data',
        template: _raw_loader_select_data_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_select_data_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], SelectDataComponent);



/***/ }),

/***/ "Nxiy":
/*!*******************************************************************************!*\
  !*** ./src/app/shared/paidmode-debt-order/paidmode-debt-order.component.scss ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwYWlkbW9kZS1kZWJ0LW9yZGVyLmNvbXBvbmVudC5zY3NzIn0= */");

/***/ }),

/***/ "NxmL":
/*!**************************************************!*\
  !*** ./src/app/shared/service/plugin.service.ts ***!
  \**************************************************/
/*! exports provided: PluginService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PluginService", function() { return PluginService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var _ionic_native_camera_ngx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ionic-native/camera/ngx */ "a/9d");
/* harmony import */ var _ionic_native_social_sharing_ngx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic-native/social-sharing/ngx */ "/XPu");
/* harmony import */ var _ionic_native_onesignal_ngx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ionic-native/onesignal/ngx */ "wljF");






let PluginService = class PluginService {
    constructor(camera, socialSharing, onesignal) {
        this.camera = camera;
        this.socialSharing = socialSharing;
        this.onesignal = onesignal;
        this.shareData = [];
    }
    // Get a picture
    getPicture() {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"]((subscriber) => {
            const options = {
                quality: 50,
                destinationType: this.camera.DestinationType.DATA_URL,
                mediaType: this.camera.MediaType.PICTURE,
                encodingType: this.camera.EncodingType.JPEG,
                sourceType: this.camera.PictureSourceType.PHOTOLIBRARY
            };
            this.camera.getPicture(options).then((imageData) => {
                let base64Image = 'data:image/jpeg;base64,' + imageData;
                subscriber.next(base64Image);
            }, (err) => {
                subscriber.next(null);
            });
        });
    }
    // Take a picture
    takePicture() {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"]((subscriber) => {
            const options = {
                quality: 50,
                cameraDirection: this.camera.Direction.FRONT,
                destinationType: this.camera.DestinationType.DATA_URL,
                encodingType: this.camera.EncodingType.JPEG,
                sourceType: this.camera.PictureSourceType.CAMERA
            };
            this.camera.getPicture(options).then((imageData) => {
                let base64Image = 'data:image/jpeg;base64,' + imageData;
                subscriber.next(base64Image);
            }, (err) => {
                subscriber.next(err);
            });
        });
    }
    // share fucntion
    share(message, title, link) {
        this.socialSharing.share(message, title, '', link).then(() => {
        }).catch(() => {
        });
    }
    // Get the user Id
    getIds() {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"]((subscriber) => {
            this.onesignal.getIds().then(ids => {
                if (ids && ids.userId) {
                    subscriber.next(ids.userId);
                }
                else {
                    subscriber.next(null);
                }
            });
        });
    }
};
PluginService.ctorParameters = () => [
    { type: _ionic_native_camera_ngx__WEBPACK_IMPORTED_MODULE_3__["Camera"] },
    { type: _ionic_native_social_sharing_ngx__WEBPACK_IMPORTED_MODULE_4__["SocialSharing"] },
    { type: _ionic_native_onesignal_ngx__WEBPACK_IMPORTED_MODULE_5__["OneSignal"] }
];
PluginService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], PluginService);



/***/ }),

/***/ "Oh87":
/*!*********************************************************************!*\
  !*** ./src/app/shared/payment-proofs/payment-proofs.component.scss ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwYXltZW50LXByb29mcy5jb21wb25lbnQuc2NzcyJ9 */");

/***/ }),

/***/ "P+IX":
/*!************************************!*\
  !*** ./src/app/auth/auth.guard.ts ***!
  \************************************/
/*! exports provided: AuthGuard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthGuard", function() { return AuthGuard; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var _dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dashboard/user/service/user.service */ "6Hie");




let AuthGuard = class AuthGuard {
    constructor(userService, route) {
        this.userService = userService;
        this.route = route;
    }
    canLoad(route, segments) {
        if (this.userService.getUserToken()) {
            return true;
        }
        else {
            this.route.navigateByUrl('/auth');
            return false;
        }
    }
};
AuthGuard.ctorParameters = () => [
    { type: _dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_3__["UserService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] }
];
AuthGuard = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], AuthGuard);



/***/ }),

/***/ "PCNd":
/*!*****************************************!*\
  !*** ./src/app/shared/shared.module.ts ***!
  \*****************************************/
/*! exports provided: SharedModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedModule", function() { return SharedModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ "ofXK");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var _paidmode_paidmode_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./paidmode/paidmode.component */ "KGAx");
/* harmony import */ var _paidmode_event_paidmode_event_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./paidmode-event/paidmode-event.component */ "ppek");
/* harmony import */ var _tontine_invited_tontine_invited_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tontine-invited/tontine-invited.component */ "jQH+");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var _tontine_invited_event_tontine_invited_event_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./tontine-invited-event/tontine-invited-event.component */ "RG3m");
/* harmony import */ var _service_encheres_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./service/encheres.service */ "PqeH");
/* harmony import */ var _pipes_comma_dumper_pipe__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./pipes/comma-dumper.pipe */ "0ZiF");
/* harmony import */ var _pipes_counter_format_pipe__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./pipes/counter-format.pipe */ "9xGT");
/* harmony import */ var _pipes_filter_data_pipe__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./pipes/filter-data.pipe */ "3PYJ");
/* harmony import */ var _pipes_to_date_obj_pipe__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./pipes/to-date-obj.pipe */ "f1+L");
/* harmony import */ var _countries_countries_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./countries/countries.component */ "KNHg");
/* harmony import */ var _prefix_prefix_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./prefix/prefix.component */ "5JTu");
/* harmony import */ var _bankmode_bankmode_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./bankmode/bankmode.component */ "peF1");
/* harmony import */ var _contribution_contribution_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./contribution/contribution.component */ "ZjA/");
/* harmony import */ var _paidmode_debt_paidmode_debt_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./paidmode-debt/paidmode-debt.component */ "M95J");
/* harmony import */ var _view_proof_view_proof_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./view-proof/view-proof.component */ "xVFS");
/* harmony import */ var _paidmode_debt_order_paidmode_debt_order_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./paidmode-debt-order/paidmode-debt-order.component */ "hrWk");
/* harmony import */ var _contribution_order_contribution_order_component__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./contribution-order/contribution-order.component */ "r0Dw");
/* harmony import */ var _initiate_pay_initiate_pay_component__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./initiate-pay/initiate-pay.component */ "Pb1I");
/* harmony import */ var _paidmode_tontine_paidmode_tontine_component__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./paidmode-tontine/paidmode-tontine.component */ "vXkO");
/* harmony import */ var _payment_proofs_payment_proofs_component__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./payment-proofs/payment-proofs.component */ "RyLw");
/* harmony import */ var _wallet_order_wallet_order_component__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./wallet-order/wallet-order.component */ "mSu/");
/* harmony import */ var _pipes_string_truncate_pipe__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./pipes/string-truncate.pipe */ "dotL");
/* harmony import */ var _service_form_utils_service__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./service/form-utils.service */ "14LV");
/* harmony import */ var _cashmode_cashmode_component__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./cashmode/cashmode.component */ "4BT3");
/* harmony import */ var _paidmode_seance_paidmode_seance_component__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./paidmode-seance/paidmode-seance.component */ "sU7R");
/* harmony import */ var _contribution_loan_contribution_loan_component__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./contribution-loan/contribution-loan.component */ "iB0r");
/* harmony import */ var _bankmode_loan_bankmode_loan_component__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./bankmode-loan/bankmode-loan.component */ "Fqet");
/* harmony import */ var _paidmode_loan_paidmode_loan_component__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./paidmode-loan/paidmode-loan.component */ "B4o1");
/* harmony import */ var _cashmode_loan_cashmode_loan_component__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./cashmode-loan/cashmode-loan.component */ "a0Du");
/* harmony import */ var _paidmode_swap_paidmode_swap_component__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./paidmode-swap/paidmode-swap.component */ "I13D");
/* harmony import */ var _select_data_select_data_component__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./select-data/select-data.component */ "NvQy");
/* harmony import */ var _pipes_remove_occurence__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./pipes/remove-occurence */ "rYWg");
/* harmony import */ var _paidmode_seance_caution_paidmode_seance_caution_component__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./paidmode-seance-caution/paidmode-seance-caution.component */ "EjoE");







































let SharedModule = class SharedModule {
};
SharedModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        declarations: [
            _paidmode_paidmode_component__WEBPACK_IMPORTED_MODULE_5__["PaidmodeComponent"],
            _tontine_invited_tontine_invited_component__WEBPACK_IMPORTED_MODULE_7__["TontineInvitedComponent"],
            _tontine_invited_event_tontine_invited_event_component__WEBPACK_IMPORTED_MODULE_9__["TontineInvitedEventComponent"],
            _paidmode_event_paidmode_event_component__WEBPACK_IMPORTED_MODULE_6__["PaidmodeEventComponent"],
            _paidmode_debt_paidmode_debt_component__WEBPACK_IMPORTED_MODULE_19__["PaidmodeDebtComponent"],
            _paidmode_debt_order_paidmode_debt_order_component__WEBPACK_IMPORTED_MODULE_21__["PaidmodeDebtOrderComponent"],
            _paidmode_seance_caution_paidmode_seance_caution_component__WEBPACK_IMPORTED_MODULE_38__["PaidmodeCautionSenceComponent"],
            _paidmode_tontine_paidmode_tontine_component__WEBPACK_IMPORTED_MODULE_24__["PaidmodeTontineComponent"],
            _payment_proofs_payment_proofs_component__WEBPACK_IMPORTED_MODULE_25__["PaymentProofsComponent"],
            _paidmode_seance_paidmode_seance_component__WEBPACK_IMPORTED_MODULE_30__["PaidmodeSenceComponent"],
            _pipes_comma_dumper_pipe__WEBPACK_IMPORTED_MODULE_11__["CommaDumperPipe"],
            _pipes_remove_occurence__WEBPACK_IMPORTED_MODULE_37__["RemoveCurrencyPipe"],
            _countries_countries_component__WEBPACK_IMPORTED_MODULE_15__["CountriesComponent"],
            _select_data_select_data_component__WEBPACK_IMPORTED_MODULE_36__["SelectDataComponent"],
            _prefix_prefix_component__WEBPACK_IMPORTED_MODULE_16__["PrefixComponent"],
            _contribution_contribution_component__WEBPACK_IMPORTED_MODULE_18__["ContributionComponent"],
            _contribution_loan_contribution_loan_component__WEBPACK_IMPORTED_MODULE_31__["ContributionLoanComponent"],
            _bankmode_loan_bankmode_loan_component__WEBPACK_IMPORTED_MODULE_32__["BankmodeLoanComponent"],
            _cashmode_loan_cashmode_loan_component__WEBPACK_IMPORTED_MODULE_34__["CashmodeLoanComponent"],
            _paidmode_loan_paidmode_loan_component__WEBPACK_IMPORTED_MODULE_33__["PaidmodeLoanComponent"],
            _contribution_order_contribution_order_component__WEBPACK_IMPORTED_MODULE_22__["ContributionOrderComponent"],
            _initiate_pay_initiate_pay_component__WEBPACK_IMPORTED_MODULE_23__["InitiatePayComponent"],
            _view_proof_view_proof_component__WEBPACK_IMPORTED_MODULE_20__["ViewProofComponent"],
            _bankmode_bankmode_component__WEBPACK_IMPORTED_MODULE_17__["BankmodeComponent"],
            _cashmode_cashmode_component__WEBPACK_IMPORTED_MODULE_29__["CashmodeComponent"],
            _wallet_order_wallet_order_component__WEBPACK_IMPORTED_MODULE_26__["WalletOrderComponent"],
            _paidmode_swap_paidmode_swap_component__WEBPACK_IMPORTED_MODULE_35__["PaidmodeSwapComponent"],
            _pipes_counter_format_pipe__WEBPACK_IMPORTED_MODULE_12__["CounterFormatPipe"],
            _pipes_filter_data_pipe__WEBPACK_IMPORTED_MODULE_13__["FilterDataPipe"],
            _pipes_to_date_obj_pipe__WEBPACK_IMPORTED_MODULE_14__["ToDateObjPipe"],
            _pipes_string_truncate_pipe__WEBPACK_IMPORTED_MODULE_27__["StringTruncatePipe"]
        ],
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_3__["CommonModule"],
            _ionic_angular__WEBPACK_IMPORTED_MODULE_2__["IonicModule"],
            _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__["TranslateModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_4__["ReactiveFormsModule"]
        ],
        exports: [
            _paidmode_paidmode_component__WEBPACK_IMPORTED_MODULE_5__["PaidmodeComponent"],
            _tontine_invited_tontine_invited_component__WEBPACK_IMPORTED_MODULE_7__["TontineInvitedComponent"],
            _tontine_invited_event_tontine_invited_event_component__WEBPACK_IMPORTED_MODULE_9__["TontineInvitedEventComponent"],
            _paidmode_event_paidmode_event_component__WEBPACK_IMPORTED_MODULE_6__["PaidmodeEventComponent"],
            _paidmode_debt_paidmode_debt_component__WEBPACK_IMPORTED_MODULE_19__["PaidmodeDebtComponent"],
            _paidmode_debt_order_paidmode_debt_order_component__WEBPACK_IMPORTED_MODULE_21__["PaidmodeDebtOrderComponent"],
            _paidmode_seance_paidmode_seance_component__WEBPACK_IMPORTED_MODULE_30__["PaidmodeSenceComponent"],
            _paidmode_seance_caution_paidmode_seance_caution_component__WEBPACK_IMPORTED_MODULE_38__["PaidmodeCautionSenceComponent"],
            _paidmode_tontine_paidmode_tontine_component__WEBPACK_IMPORTED_MODULE_24__["PaidmodeTontineComponent"],
            _initiate_pay_initiate_pay_component__WEBPACK_IMPORTED_MODULE_23__["InitiatePayComponent"],
            _countries_countries_component__WEBPACK_IMPORTED_MODULE_15__["CountriesComponent"],
            _select_data_select_data_component__WEBPACK_IMPORTED_MODULE_36__["SelectDataComponent"],
            _prefix_prefix_component__WEBPACK_IMPORTED_MODULE_16__["PrefixComponent"],
            _contribution_contribution_component__WEBPACK_IMPORTED_MODULE_18__["ContributionComponent"],
            _contribution_loan_contribution_loan_component__WEBPACK_IMPORTED_MODULE_31__["ContributionLoanComponent"],
            _bankmode_loan_bankmode_loan_component__WEBPACK_IMPORTED_MODULE_32__["BankmodeLoanComponent"],
            _paidmode_loan_paidmode_loan_component__WEBPACK_IMPORTED_MODULE_33__["PaidmodeLoanComponent"],
            _cashmode_loan_cashmode_loan_component__WEBPACK_IMPORTED_MODULE_34__["CashmodeLoanComponent"],
            _contribution_order_contribution_order_component__WEBPACK_IMPORTED_MODULE_22__["ContributionOrderComponent"],
            _view_proof_view_proof_component__WEBPACK_IMPORTED_MODULE_20__["ViewProofComponent"],
            _bankmode_bankmode_component__WEBPACK_IMPORTED_MODULE_17__["BankmodeComponent"],
            _cashmode_cashmode_component__WEBPACK_IMPORTED_MODULE_29__["CashmodeComponent"],
            _wallet_order_wallet_order_component__WEBPACK_IMPORTED_MODULE_26__["WalletOrderComponent"],
            _payment_proofs_payment_proofs_component__WEBPACK_IMPORTED_MODULE_25__["PaymentProofsComponent"],
            _paidmode_swap_paidmode_swap_component__WEBPACK_IMPORTED_MODULE_35__["PaidmodeSwapComponent"],
            _pipes_comma_dumper_pipe__WEBPACK_IMPORTED_MODULE_11__["CommaDumperPipe"],
            _pipes_counter_format_pipe__WEBPACK_IMPORTED_MODULE_12__["CounterFormatPipe"],
            _pipes_remove_occurence__WEBPACK_IMPORTED_MODULE_37__["RemoveCurrencyPipe"],
            _pipes_filter_data_pipe__WEBPACK_IMPORTED_MODULE_13__["FilterDataPipe"],
            _pipes_to_date_obj_pipe__WEBPACK_IMPORTED_MODULE_14__["ToDateObjPipe"],
            _pipes_string_truncate_pipe__WEBPACK_IMPORTED_MODULE_27__["StringTruncatePipe"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_4__["ReactiveFormsModule"],
            _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__["TranslateModule"]
        ],
        providers: [
            _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__["TranslateService"],
            _service_encheres_service__WEBPACK_IMPORTED_MODULE_10__["EncheresService"],
            _service_form_utils_service__WEBPACK_IMPORTED_MODULE_28__["FormUtilsService"]
        ],
        entryComponents: [
            _countries_countries_component__WEBPACK_IMPORTED_MODULE_15__["CountriesComponent"],
            _select_data_select_data_component__WEBPACK_IMPORTED_MODULE_36__["SelectDataComponent"],
            _contribution_contribution_component__WEBPACK_IMPORTED_MODULE_18__["ContributionComponent"],
            _contribution_loan_contribution_loan_component__WEBPACK_IMPORTED_MODULE_31__["ContributionLoanComponent"],
            _initiate_pay_initiate_pay_component__WEBPACK_IMPORTED_MODULE_23__["InitiatePayComponent"],
            _contribution_order_contribution_order_component__WEBPACK_IMPORTED_MODULE_22__["ContributionOrderComponent"],
            _prefix_prefix_component__WEBPACK_IMPORTED_MODULE_16__["PrefixComponent"],
            _view_proof_view_proof_component__WEBPACK_IMPORTED_MODULE_20__["ViewProofComponent"],
            _payment_proofs_payment_proofs_component__WEBPACK_IMPORTED_MODULE_25__["PaymentProofsComponent"],
            _paidmode_swap_paidmode_swap_component__WEBPACK_IMPORTED_MODULE_35__["PaidmodeSwapComponent"]
        ]
    })
], SharedModule);



/***/ }),

/***/ "Pb1I":
/*!***************************************************************!*\
  !*** ./src/app/shared/initiate-pay/initiate-pay.component.ts ***!
  \***************************************************************/
/*! exports provided: InitiatePayComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InitiatePayComponent", function() { return InitiatePayComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_initiate_pay_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./initiate-pay.component.html */ "w2ex");
/* harmony import */ var _initiate_pay_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./initiate-pay.component.scss */ "qdIG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var src_app_dashboard_my_tontines_tontine_detail_wallet_services_wallet_tontine_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/dashboard/my-tontines/tontine-detail/wallet/services/wallet-tontine.service */ "0g9v");
/* harmony import */ var src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/tontine.service */ "/WEl");
/* harmony import */ var _service_error_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../service/error.service */ "TkUd");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var src_app_dashboard_my_tontines_services_debts_manager_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/debts-manager.service */ "ijC1");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var _service_payment_error_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../service/payment-error.service */ "FLu1");
/* harmony import */ var src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! src/app/dashboard/user/service/user.service */ "6Hie");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../service/events.service */ "r5fM");
/* harmony import */ var _service_ui_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../service/ui.service */ "QB/Y");
















let InitiatePayComponent = class InitiatePayComponent {
    constructor(modatCtrl, fb, user, router, walletTontine, navControler, event, debt, tontine, ui, translate, error, paymentError) {
        this.modatCtrl = modatCtrl;
        this.fb = fb;
        this.user = user;
        this.router = router;
        this.walletTontine = walletTontine;
        this.navControler = navControler;
        this.event = event;
        this.debt = debt;
        this.tontine = tontine;
        this.ui = ui;
        this.translate = translate;
        this.error = error;
        this.paymentError = paymentError;
        this.listCaisse = [];
        this.loading = false;
        this.currentTontine = this.tontine.getCurrentTontineData();
        this.currentPaymentData = this.debt.getDebtsData();
        this.totalAmount = 0;
        this.currentUser = this.user.getUserData();
        this.nbValidator = this.currentTontine.tontine.number_admin_that_validates_contributions ? this.currentTontine.tontine.number_admin_that_validates_contributions : 1;
    }
    ngOnInit() {
        this.getWalletData();
        this.initInitiateForm();
        this.validationMessage();
    }
    // Form getters
    get reason() {
        return this.formPayment.get('reason');
    }
    get chechoutList() {
        return this.formPayment.get('chechoutList');
    }
    // Init the validation message
    validationMessage() {
        this.translate.get(['REASON_TEXT', 'CHECKOUT_SELECT_MSG']).subscribe(trans => {
            this.validationMessages = {
                reason: [
                    { type: 'required', message: trans.REASON_TEXT }
                ],
                chechoutList: [
                    { type: 'required', message: trans.CHECKOUT_SELECT_MSG }
                ]
            };
        });
    }
    // Init the form
    initInitiateForm() {
        this.formPayment = this.fb.group({
            reason: [''],
            user_id: [this.currentUser.id],
            bouffe_id: [this.currentPaymentData.bouffe_id],
            device_id: [this.currentPaymentData.device_id],
            liste_caisse: [[], _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required],
            chechoutList: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required]
        });
    }
    // Close the contribution
    closeContribute() {
        this.modatCtrl.dismiss(null, 'cancel');
    }
    // check if we has an error
    hasError() {
        let error = false;
        let i = 0;
        while (!error && i < this.listCaisse.length) {
            if (this.listCaisse[i].online_error || this.listCaisse[i].offline_error) {
                error = true;
            }
            i++;
        }
        return error;
    }
    // Trigger form change
    hasFormChange() {
        this.formPayment.valueChanges.subscribe(allValues => {
            for (let fieldName in allValues) {
                if (fieldName != '') {
                }
            }
        });
    }
    // Update the select values
    updateChoice(choices) {
        this.totalAmount = 0;
        this.listCaisse.forEach((caisse, index) => {
            if (choices.indexOf(caisse.choice_name) > -1) {
                this.listCaisse[index].choice = true;
            }
            else {
                this.listCaisse[index].choice = false;
                this.listCaisse[index].montant_online = 0;
                this.listCaisse[index].montant_offline = 0;
            }
            this.totalAmount += caisse.montant_online;
            this.totalAmount += caisse.montant_offline;
        });
        this.formPayment.get('liste_caisse').setValue(this.listCaisse);
    }
    // Validate the initiate amount
    validateAmount(currentAount, newAmount, index, type) {
        switch (type) {
            case 'online':
                this.listCaisse[index].online_error = currentAount < newAmount;
                break;
            case 'offline':
                this.listCaisse[index].offline_error = currentAount < newAmount;
                break;
            default:
                break;
        }
    }
    // Get the wallet data
    getWalletData() {
        this.loading = true;
        const param = { tontine_id: this.currentTontine.tontine.tontine_id };
        this.walletTontine.getTontineWallet(param).subscribe((reponse) => {
            this.listCaisse = [];
            let index = 0;
            if (reponse && reponse.message === 'success') {
                reponse.detail_caisse.forEach(caisse => {
                    if (parseFloat(caisse.online_balance) > 0 || parseFloat(caisse.bank_balance) > 0) {
                        this.listCaisse.push({
                            choice: false,
                            choice_name: `caisse_${index}`,
                            currency_name: caisse.currency_name,
                            type_caisse_tontine_id: caisse.type_caisse_tontine_id,
                            type_caisse_tontine_name: caisse.caisse_name,
                            montant_online: 0,
                            online_error: false,
                            current_montant_online: caisse && caisse.online_balance ? parseFloat(caisse.online_balance) : 0,
                            montant_offline: 0,
                            current_montant_offline: caisse && caisse.bank_balance ? parseFloat(caisse.bank_balance) : 0,
                            offline_error: false
                        });
                    }
                    index++;
                    this.formPayment.get('liste_caisse').setValue(this.listCaisse);
                });
            }
            this.loading = false;
        }, error => {
            this.loading = false;
            if (error && error.error && error.error.message === 'error') {
                if (error.error.tontine_id_not_exist) {
                    this.translate.get('ADD_SHARE_MSG4').subscribe(trans => {
                        this.ui.presentToast(trans);
                    });
                }
                if (error.error.user_not_found) {
                    this.loading = true;
                    this.error.renewSession().then((data) => {
                        if (data && data.result === 'OK') {
                            this.getWalletData();
                        }
                        else {
                            this.loading = false;
                        }
                    });
                }
            }
        });
    }
    // Paid the user contribution with Ozow without conversion
    iniatePayment() {
        this.loading = true;
        this.translate.get('INITIALIZE_TEXT').subscribe(value => {
            this.ui.presentLoading(value);
        });
        this.debt.initiatePayment(this.formPayment.value).subscribe((reponse) => {
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                if (reponse.last_admin) {
                    this.translate.get('LAST_JECKPOT_VALIDATOR').subscribe(trans => {
                        this.ui.presentToast(trans);
                    });
                    this.navControler.setDirection('root');
                    if (this.nbValidator === 1) {
                        this.router.navigate(['/', 'dashboard', 'my-tontines', this.currentTontine.tontine.tontine_id, 'session-no-paid']);
                    }
                    else {
                        this.router.navigate(['/', 'dashboard', 'my-tontines', this.currentTontine.tontine.tontine_id, 'wallet']);
                    }
                }
                this.event.publish('payment-initiate');
                this.closeContribute();
            }
        }, error => {
            this.loading = false;
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.loading = true;
                    this.error.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.iniatePayment();
                        }
                        else {
                            this.ui.dismissLoading();
                            this.loading = false;
                        }
                    });
                }
                else {
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOfflineError(error);
                }
            }
            else {
                this.ui.dismissLoading();
                this.error.manageError(error);
            }
        });
    }
};
InitiatePayComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["ModalController"] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormBuilder"] },
    { type: src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_13__["UserService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_11__["Router"] },
    { type: src_app_dashboard_my_tontines_tontine_detail_wallet_services_wallet_tontine_service__WEBPACK_IMPORTED_MODULE_6__["WalletTontineService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["NavController"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_14__["EventService"] },
    { type: src_app_dashboard_my_tontines_services_debts_manager_service__WEBPACK_IMPORTED_MODULE_10__["DebtsManagerService"] },
    { type: src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_7__["TontineService"] },
    { type: _service_ui_service__WEBPACK_IMPORTED_MODULE_15__["UiService"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_9__["TranslateService"] },
    { type: _service_error_service__WEBPACK_IMPORTED_MODULE_8__["ErrorService"] },
    { type: _service_payment_error_service__WEBPACK_IMPORTED_MODULE_12__["PaymentErrorService"] }
];
InitiatePayComponent.propDecorators = {
    tontineName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};
InitiatePayComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-initiate-pay',
        template: _raw_loader_initiate_pay_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_initiate_pay_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], InitiatePayComponent);



/***/ }),

/***/ "PqeH":
/*!****************************************************!*\
  !*** ./src/app/shared/service/encheres.service.ts ***!
  \****************************************************/
/*! exports provided: EncheresService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EncheresService", function() { return EncheresService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var _api_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./api.service */ "6rCG");
/* harmony import */ var ngx_socket_io__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ngx-socket-io */ "7JkF");





let EncheresService = class EncheresService {
    constructor(api, socket) {
        this.api = api;
        this.socket = socket;
    }
    // Connect to the socket
    connexion(seanceId) {
        const connexion = this.socket.connect();
        this.socket.emit('room', seanceId);
        return connexion;
    }
    // Connect a member to tontine
    memberConnectionOld(userId, numeroPart, seanceId) {
        this.socket.emit('member-connect', [userId, numeroPart, seanceId]);
        return this;
    }
    memberConnection(userId, numeroPart, seanceId, numberLot) {
        this.socket.emit('member-connect', [userId, numeroPart, seanceId, numberLot]);
        return this;
    }
    // Get all members
    getMembers() {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
            this.socket.on('connected', (data) => {
                observer.next(data);
                return observer;
            });
        });
    }
    // Get the counter
    getCounter() {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
            this.socket.on('compter', (data) => {
                observer.next(data);
                return observer;
            });
        });
    }
    // Get Informations of a seance
    getSessionInfo() {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
            this.socket.on('session', (data) => {
                //console.log('jojosession === '+JSON.parse(data));
                observer.next(JSON.parse(data));
                return observer;
            });
        });
    }
    // Get the next amount of the bid
    getNextAmount() {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
            this.socket.on('next-amount', (data) => {
                observer.next(JSON.parse(data));
                return observer;
            });
        });
    }
    // Get the current amount of the bid
    getCurrentAmount() {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
            this.socket.on('current-amount', (data) => {
                observer.next(JSON.parse(data));
                return observer;
            });
        });
    }
    // Get the winner of the bid
    getWinnerCurrent(valueID) {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
            this.socket.on('last-bider-' + valueID, (data) => {
                observer.next(JSON.parse(data));
                return observer;
            });
        });
    }
    // Send the bid data
    biderOld(userId, numeroPart, seanceId) {
        this.socket.emit('bid', [userId, numeroPart, seanceId]);
    }
    bider(userId, numeroPart, seanceId, numeroLot, current_amount, increment) {
        this.socket.emit('bid', [userId, numeroPart, seanceId, numeroLot, current_amount, increment]);
    }
    // Get the bidder history
    getBidderHistory(seance_id, numero_lot) {
        return this.api.get('bid/get/bider/' + seance_id + '/' + numero_lot);
    }
    // Get the bid result
    getBidResult() {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
            this.socket.on('bid', (data) => {
                observer.next(JSON.parse(data));
                return observer;
            });
        });
    }
    // Get all chat messages
    getChatMessages() {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
            this.socket.on('message', (data) => {
                observer.next(data);
            });
            return () => {
                this.socket.disconnect();
            };
        });
    }
    // Send the bid amount
    getAmount() {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
            this.socket.on('emit-bid-amount', (data) => {
                observer.next(data);
            });
            return () => {
                this.socket.disconnect();
            };
        });
    }
    // Send the bid delai
    getDelai() {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
            this.socket.on('delai', (data) => {
                observer.next(data);
            });
            return () => {
                this.socket.disconnect();
            };
        });
    }
    // Get the top member of the bid
    getTopMember() {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
            this.socket.on('emit-top-member', (data) => {
                observer.next(data);
            });
            return () => {
                this.socket.disconnect();
            };
        });
    }
    // Get all chats
    getChats() {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
            this.socket.on('chats', (data) => {
                observer.next(data);
            });
            return observer;
        });
    }
    // Get chat data
    getChat() {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
            this.socket.on('chat', (data) => {
                observer.next(data);
                return observer;
            });
        });
    }
    // Set the chat message
    setChat(username, message, tontine) {
        this.socket.emit('chat', [username, message, tontine]);
    }
};
EncheresService.ctorParameters = () => [
    { type: _api_service__WEBPACK_IMPORTED_MODULE_3__["ApiService"] },
    { type: ngx_socket_io__WEBPACK_IMPORTED_MODULE_4__["Socket"] }
];
EncheresService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], EncheresService);



/***/ }),

/***/ "QB/Y":
/*!**********************************************!*\
  !*** ./src/app/shared/service/ui.service.ts ***!
  \**********************************************/
/*! exports provided: UiService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UiService", function() { return UiService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/dashboard/user/service/user.service */ "6Hie");






let UiService = class UiService {
    constructor(toastController, loadingController, alertController, userService, translate, router, platform) {
        this.toastController = toastController;
        this.loadingController = loadingController;
        this.alertController = alertController;
        this.userService = userService;
        this.translate = translate;
        this.router = router;
        this.platform = platform;
        this.isLoadingShow = false;
    }
    presentAlert(title, message) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: title,
                message: message,
                buttons: ['OK']
            });
            yield alert.present();
        });
    }
    presentLoading(messageLoading) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            this.isLoadingShow = true;
            return yield this.loadingController.create({
                message: messageLoading,
            }).then(a => {
                a.present().then(() => {
                    const timer = setInterval(() => {
                        if (!this.isLoadingShow) {
                            a.dismiss().then(() => { });
                            clearTimeout(timer);
                        }
                    }, 2000);
                });
            });
        });
    }
    dismissLoading() {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            this.isLoadingShow = false;
            return yield this.loadingController.dismiss().then(() => { });
        });
    }
    presentToast(messageParam) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const toast = yield this.toastController.create({
                message: messageParam,
                duration: 5000,
                position: 'top'
            });
            toast.present();
        });
    }
    // confirmation message
    confirmationMessage(translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${translation[0]}`,
                message: `${translation[1]}`,
                buttons: [
                    {
                        text: `${translation[2]}`,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                        }
                    }, {
                        text: `${translation[3]}`,
                        handler: () => {
                            navigator['app'].exitApp();
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
    // listen to back button
    hardwareBackButton() {
        this.platform.backButton.subscribe(() => {
            const url = this.router.url;
            if (url === '/auth' || url === '/dashboard' || url === '/dashboard/user/profil') {
                const messages = [];
                this.translate.get(['M_EXIT_TITLE', 'M_EXIT_MESSAGE', 'CANCEL_TEXT', 'YES_TEXT'])
                    .subscribe(trans => {
                    messages.push(trans.M_EXIT_TITLE);
                    messages.push(trans.M_EXIT_MESSAGE);
                    messages.push(trans.CANCEL_TEXT);
                    messages.push(trans.YES_TEXT);
                    this.confirmationMessage(messages);
                });
            }
        });
    }
    /**
    * Check the user pin and handle/cancel an action.
    * @param callBackSuccess The callback function call when the pin is correct.
    * @param callBackCancel The callback function call when the pin is incorrect. Optionnal
    * @param paramSuccess The data param of callBackSuccess. Optionnal
    * @param paramCancel The data param of callBackCancel. Optionnal
    *
    * @returns void.
    */
    confirmPin(callBackSuccess, callBackCancel, paramSuccess, paramCancel) {
        const translations = [];
        this.translate.get(['M_ENTER_YOUR_PIN', 'M_PIN', 'CANCEL_TEXT', 'YES_TEXT']).subscribe(trans => {
            translations.push(trans.M_ENTER_YOUR_PIN);
            translations.push(trans.M_PIN);
            translations.push(trans.CANCEL_TEXT);
            translations.push(trans.YES_TEXT);
            this.getUserPin(translations, callBackSuccess, callBackCancel, paramSuccess, paramCancel);
        });
    }
    // get the user pin 
    getUserPin(translations, callBackSuccess, callBackCancel, paramSuccess, paramCancel) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const userPin = this.userService.getUserSecret();
            const alert = yield this.alertController.create({
                header: `${translations[0]}`,
                inputs: [
                    {
                        name: 'pin',
                        type: 'tel',
                        placeholder: `${translations[1]}`,
                    }
                ],
                buttons: [
                    {
                        text: `${translations[2]}`,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                            callBackCancel(paramCancel);
                        }
                    }, {
                        text: `${translations[3]}`,
                        handler: (ans) => {
                            // Check if the pin is correct
                            if (parseInt(ans.pin, 10) === parseInt(userPin.password, 10)) {
                                // call function
                                callBackSuccess(paramSuccess);
                            }
                            else {
                                this.translate.get('M_PIN_INVALID').subscribe(trans => {
                                    this.presentToast(trans);
                                });
                            }
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
};
UiService.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["ToastController"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["LoadingController"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["AlertController"] },
    { type: src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_5__["UserService"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__["TranslateService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["Platform"] }
];
UiService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], UiService);



/***/ }),

/***/ "R/lJ":
/*!***********************************************************************************!*\
  !*** ./src/app/shared/tontine-invited-event/tontine-invited-event.component.scss ***!
  \***********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0b250aW5lLWludml0ZWQtZXZlbnQuY29tcG9uZW50LnNjc3MifQ== */");

/***/ }),

/***/ "RG3m":
/*!*********************************************************************************!*\
  !*** ./src/app/shared/tontine-invited-event/tontine-invited-event.component.ts ***!
  \*********************************************************************************/
/*! exports provided: TontineInvitedEventComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TontineInvitedEventComponent", function() { return TontineInvitedEventComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_tontine_invited_event_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./tontine-invited-event.component.html */ "XRpN");
/* harmony import */ var _tontine_invited_event_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tontine-invited-event.component.scss */ "R/lJ");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var _service_location_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../service/location.service */ "e009");
/* harmony import */ var src_app_dashboard_tontines_events_services_tontines_events_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/dashboard/tontines-events/services/tontines-events.service */ "eEpS");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _countries_countries_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../countries/countries.component */ "KNHg");
/* harmony import */ var _service_form_utils_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../service/form-utils.service */ "14LV");
/* harmony import */ var _dashboard_invitations_service_inivitation_error_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../dashboard/invitations/service/inivitation-error.service */ "/OOw");
/* harmony import */ var _service_error_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../service/error.service */ "TkUd");
/* harmony import */ var _service_ui_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../service/ui.service */ "QB/Y");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../service/events.service */ "r5fM");
/* harmony import */ var src_app_auth_service_auth_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! src/app/auth/service/auth.service */ "RmnQ");
















let TontineInvitedEventComponent = class TontineInvitedEventComponent {
    constructor(fb, modatCtrl, event, events, translate, error, locate, formUtil, inviteError, authService, ui) {
        this.fb = fb;
        this.modatCtrl = modatCtrl;
        this.event = event;
        this.events = events;
        this.translate = translate;
        this.error = error;
        this.locate = locate;
        this.formUtil = formUtil;
        this.inviteError = inviteError;
        this.authService = authService;
        this.ui = ui;
        this.states = [];
        this.errorPhone = false;
        this.errorEmail = false;
        this.loading = false;
        this.tontineEventData = this.event.getCurrentTontineEventData();
        this.sendListContact = [];
    }
    ngOnInit() {
        this.initFormInvitation();
        this.getValidationsMessage();
        this.getWordCountries(false);
    }
    // Form getters
    get sendMode() {
        return this.formInvited.get('sendMode');
    }
    get sendList() {
        return this.formInvited.get('sendList');
    }
    get emailOrPhone() {
        return this.formInvited.get('emailOrPhone');
    }
    get phoneId() {
        return this.formInvited.get('phoneid');
    }
    get countryId() {
        return this.formInvited.get('country_id');
    }
    // init the form 
    initFormInvitation() {
        this.formInvited = this.fb.group({
            tontine_event_id: [this.tontineEventData && this.tontineEventData.id ? this.tontineEventData.id : '', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            members: [[]],
            sendMode: ['sms', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            emailOrPhone: [''],
            sendList: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormArray"]([]),
            phoneid: [''],
            country_id: [''],
            countryName: ['']
        });
    }
    // Remove space
    removeSpace() {
        this.formInvited.get('emailOrPhone').setValue(this.formUtil.removeSpace(this.formInvited.value.emailOrPhone));
    }
    // can add member
    canAddMember() {
        return !this.formInvited.value.phoneid
            || !this.formInvited.value.emailOrPhone
            || this.formInvited.value.emailOrPhone && ((!this.errorPhone && this.sendMode.value === 'sms') || (!this.errorEmail && this.sendMode.value === 'email'));
    }
    // can show  contact message
    canShowContactMessage() {
        return this.formInvited.value.emailOrPhone && (!this.errorPhone && (this.sendMode.value === 'sms') || !this.errorEmail && (this.sendMode.value === 'email'));
    }
    // can send invitation
    canSendInvitation() {
        return this.formInvited.invalid
            || this.loading
            || this.formInvited.value.emailOrPhone && (!this.errorPhone && !this.errorEmail) || (!this.formInvited.value.emailOrPhone && this.sendList.length === 0);
    }
    // Get validations messages
    getValidationsMessage() {
        this.translate.get(['M_SEND_MODE_ERROR_MSG']).subscribe(trans => {
            this.validationMessages = {
                sendMode: [
                    { type: 'required', message: trans.M_SEND_MODE_ERROR_MSG }
                ]
            };
        });
    }
    // validate the field
    validateFields(mode) {
        this.removeSpace();
        this.errorPhone = false;
        this.errorEmail = false;
        if (mode === 'sms') {
            this.errorPhone = this.formUtil.validatePhone(this.formInvited.value.emailOrPhone);
        }
        else if (mode === 'email') {
            this.errorEmail = this.formUtil.validateEmail(this.formInvited.value.emailOrPhone);
        }
    }
    // Update the country
    updateCountryPrefix(currentCountry) {
        this.states.forEach(state => {
            if (state.country_id === currentCountry) {
                this.formInvited.get('phoneid').setValue(state.country_prefixe);
                this.formInvited.get('country_id').setValue(state.country_id);
                this.formInvited.get('countryName').setValue(state.country_label);
            }
        });
    }
    // Get all the word countries
    getWordCountries(refresh) {
        this.locate.getWordCountries(refresh).then((countries) => {
            if (countries && countries.length > 0) {
                this.states = countries;
                this.getCurrentCountry(false);
            }
        });
    }
    // Set the default country
    getCurrentCountry(refresher) {
        this.locate.getCurrentWordCountryInfo(refresher).then((country) => {
            if (country) {
                this.updateCountryPrefix(country.country_id);
            }
        }).catch(error => {
        });
    }
    // open the countries modal
    showCountries() {
        this.modatCtrl
            .create({
            component: _countries_countries_component__WEBPACK_IMPORTED_MODULE_9__["CountriesComponent"]
        })
            .then(modalEl => {
            modalEl.present();
            modalEl.onDidDismiss().then((ans) => {
                if (ans && ans.role === 'select') {
                    this.states.forEach(state => {
                        if (state.code_country === ans.data) {
                            this.formInvited.get('countryName').setValue(state.country_label);
                            this.formInvited.get('phoneid').setValue(state.country_prefixe);
                            this.formInvited.get('country_id').setValue(state.country_id);
                        }
                    });
                }
            });
        });
    }
    // add a member
    addMberContact(mberContact) {
        if (this.formUtil.validatePhone(mberContact.value)) {
            const phoneNumber = this.formInvited.value.phoneid + mberContact.value;
            this.sendList.push(new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](phoneNumber));
            this.sendListContact.push({ emailOrPhone: phoneNumber, PhoneOnly: mberContact.value, platform: 'mobile' });
        }
        else {
            this.sendList.push(new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](mberContact.value));
            this.sendListContact.push({ emailOrPhone: mberContact.value, PhoneOnly: null, platform: 'mobile' });
        }
        mberContact.value = '';
        this.formInvited.value.emailOrPhone = '';
    }
    // Remove contact
    removeContact(contact) {
        const index = this.sendList.controls.indexOf(contact);
        this.sendList.removeAt(index);
        const objIndex = this.sendListContact.findIndex(o => o.emailOrPhone === contact.value);
        if (objIndex > -1) {
            this.sendListContact.splice(objIndex, 1);
        }
    }
    // send invitations to the user
    sendInvitation() {
        this.loading = true;
        this.translate.get('SENDING_INVITATION').subscribe(trans => {
            this.ui.presentLoading(trans);
        });
        if (this.formInvited.value.emailOrPhone) {
            if (this.formInvited.value.sendMode === 'sms') {
                const phoneNumber = this.formInvited.value.phoneid + this.formInvited.value.emailOrPhone;
                this.sendListContact.push({ emailOrPhone: phoneNumber, PhoneOnly: this.formInvited.value.emailOrPhone, platform: 'mobile' });
            }
            else {
                this.sendListContact.push({ emailOrPhone: this.formInvited.value.emailOrPhone, PhoneOnly: null, platform: 'mobile' });
            }
        }
        // Remove double
        this.sendListContact = this.sendListContact.filter((elem, index, self) => self.findIndex((t) => { return (t.emailOrPhone === elem.emailOrPhone && t.PhoneOnly === elem.PhoneOnly); }) === index);
        this.formInvited.get('members').setValue(this.sendListContact);
        this.formInvited.get('tontine_event_id').setValue(this.tontineEventData.id);
        this.event.sendInvitation(this.formInvited.value)
            .subscribe((reponse) => {
            this.ui.dismissLoading();
            this.loading = false;
            this.initFormInvitation();
            this.getWordCountries(false);
            this.translate.get('TONTINE_INVITED_TEXT5').subscribe(value => {
                this.ui.presentToast(value);
            });
            const currentDate = new Date();
            this.authService.setAppLastSession(currentDate.getTime());
            this.events.publish('new-invitation-event');
        }, error => {
            this.loading = false;
            if (error && error.error && !error.error.success) {
                if (error.error.user_not_found) {
                    this.loading = true;
                    this.error.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.sendInvitation();
                        }
                        else {
                            this.loading = false;
                            this.ui.dismissLoading();
                        }
                    });
                }
                else {
                    this.ui.dismissLoading();
                    this.inviteError.manageInviteError(error);
                }
            }
            else {
                this.ui.dismissLoading();
                this.error.manageError(error);
            }
        });
    }
};
TontineInvitedEventComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_8__["ModalController"] },
    { type: src_app_dashboard_tontines_events_services_tontines_events_service__WEBPACK_IMPORTED_MODULE_7__["TontinesEventsService"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_14__["EventService"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_5__["TranslateService"] },
    { type: _service_error_service__WEBPACK_IMPORTED_MODULE_12__["ErrorService"] },
    { type: _service_location_service__WEBPACK_IMPORTED_MODULE_6__["LocationService"] },
    { type: _service_form_utils_service__WEBPACK_IMPORTED_MODULE_10__["FormUtilsService"] },
    { type: _dashboard_invitations_service_inivitation_error_service__WEBPACK_IMPORTED_MODULE_11__["InivitationErrorService"] },
    { type: src_app_auth_service_auth_service__WEBPACK_IMPORTED_MODULE_15__["AuthService"] },
    { type: _service_ui_service__WEBPACK_IMPORTED_MODULE_13__["UiService"] }
];
TontineInvitedEventComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-tontine-invited-event',
        template: _raw_loader_tontine_invited_event_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_tontine_invited_event_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], TontineInvitedEventComponent);



/***/ }),

/***/ "RMs+":
/*!***************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/view-proof/view-proof.component.html ***!
  \***************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header>\n  <ion-toolbar>\n    <ion-title class=\"ion-text-center\">{{ 'PROOF_TEXT' | translate }}</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-card>\n    <ion-card-content class=\"ion-text-center\"> \n      <ion-row *ngIf=\"proof\">\n          <ion-col size=\"12\">\n             <ion-img [src]=\"proof\"></ion-img>\n          </ion-col>\n      </ion-row>\n      <ion-row *ngIf=\"!proof\">\n        <ion-col size=\"12\">\n           <p class=\"ion-text-center\">\n             {{'BILL_PROOF_EMPTY' | translate }}\n           </p>\n        </ion-col>\n    </ion-row>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n\n<ion-footer class=\"ion-padding ion-text-center\">\n  <ion-grid>\n    <ion-row>\n      <ion-col>\n        <ion-button expand=\"full\" \n              fill=\"outline\"\n              color=\"warning\" \n              class=\"ion-text-uppercase\"\n              shape=\"round\" (click)=\"closeContribute()\">\n          {{ 'CANCEL_TEXT' | translate }}\n        </ion-button>\n    </ion-col>\n    </ion-row>\n  </ion-grid>\n</ion-footer>\n  ");

/***/ }),

/***/ "RmnQ":
/*!**********************************************!*\
  !*** ./src/app/auth/service/auth.service.ts ***!
  \**********************************************/
/*! exports provided: AuthService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthService", function() { return AuthService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/shared/service/api.service */ "6rCG");
/* harmony import */ var src_app_shared_service_location_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/shared/service/location.service */ "e009");
/* harmony import */ var src_app_shared_service_storage_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/shared/service/storage.service */ "2+UW");
/* harmony import */ var src_app_shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/shared/service/local-storage.service */ "y7ii");









let AuthService = class AuthService {
    // tslint:disable-next-line: variable-name
    constructor(platform, api, location, nav, translate, alertController, localStorage, storage, router) {
        this.platform = platform;
        this.api = api;
        this.location = location;
        this.nav = nav;
        this.translate = translate;
        this.alertController = alertController;
        this.localStorage = localStorage;
        this.storage = storage;
        this.router = router;
    }
    // Set the last open 
    setAppLastSession(dateOpen) {
        this.localStorage.setItem('last-session', String(dateOpen));
    }
    // Get the apps version
    getAppLastSession() {
        return this.localStorage.getItem('last-session');
    }
    // delete the apps
    removeAppLastSession() {
        this.localStorage.removeItem('last-session');
    }
    // Remove lang data
    removeConfigData() {
        this.localStorage.removeItem('all-countries');
        this.localStorage.removeItem('all-country-languages');
        this.localStorage.removeItem('countries');
        this.localStorage.removeItem('country_code');
        this.localStorage.removeItem('user-country');
        this.localStorage.removeItem('user-language');
        this.localStorage.removeItem('word-countries');
        this.localStorage.removeItem('language-translation');
        this.localStorage.removeItem('current-country-languages');
        this.localStorage.removeItem('default-country-languages');
        this.localStorage.removeItem('user-device');
        this.localStorage.removeItem('user-registration-data');
        this.localStorage.removeItem('user-session-language');
        this.localStorage.removeItem('first-email');
        this.removeAppLastSession();
    }
    // Remove all user data
    removeUserSession() {
        this.localStorage.removeItem('fisrt-login');
        this.localStorage.removeItem('user-token');
        this.localStorage.removeItem('user-data');
        this.localStorage.removeItem('user-role');
        this.localStorage.removeItem('user-badge');
        this.localStorage.removeItem('user-credentials');
        this.localStorage.removeItem('user-payment-method');
        this.localStorage.removeItem('startRefreshToken');
        this.localStorage.removeItem('type-contribution');
        this.localStorage.removeItem('debts-data');
        this.localStorage.removeItem('new-event');
        this.localStorage.removeItem('tontine-data');
        this.localStorage.removeItem('contrib-data');
        this.localStorage.removeItem('tontine-data-event');
        this.localStorage.removeItem('day-token');
        this.storage.remove('seance-data');
        this.storage.remove('swap-data');
        this.storage.remove('loan-data');
        this.storage.remove('app-notif');
        this.storage.remove('app-events');
        this.storage.remove('app-tontines');
        this.storage.remove('app-events-user');
        this.storage.remove('current-balance');
        this.storage.remove('app-wallet-trans');
        this.storage.remove('app-tontine-trans');
        this.storage.remove('app-wallet-tontines-trans');
        this.localStorage.setItem('startRefreshToken', 'false');
    }
    // Log out the user
    logoutMember() {
        this.removeUserSession();
        this.removeConfigData();
        this.nav.setDirection('root');
        this.router.navigate(['auth']);
    }
    // Create the user account
    createAccount(user) {
        return this.api.post('user/account/v1/createaccount', user);
    }
    // Login to the user account
    authentication(credentials) {
        return this.api.post('user/account/v1/auth', credentials);
    }
    // send a code to user for registration
    sendUserCode(data) {
        return this.api.post('user/send/v1/digitcode', data);
    }
    // Check if the user Email exist
    checkUserEmail(data) {
        return this.api.post('user/check/email', data);
    }
    // Verify the user password
    verifyUserPassword(data) {
        return this.api.post('user/check/email/match/password', data);
    }
    // Create user account or synchonize with web
    createAccountOrSynchronise(data) {
        return this.api.post('user/valid/v1/digitcode/and/createAccount/mobile', data);
    }
    // Listen to back button
    showUpdateMessage() {
        const messages = [];
        this.translate.get(['M_UPDATE_TITLE', 'M_UPDATE_MESSAGE', 'IGNORE_TEXT', 'YES_TEXT'])
            .subscribe(trans => {
            messages.push(trans.M_UPDATE_TITLE);
            messages.push(trans.M_UPDATE_MESSAGE);
            messages.push(trans.IGNORE_TEXT);
            messages.push(trans.YES_TEXT);
            this.updateMessage(messages);
        });
    }
    // Update message
    updateMessage(translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${translation[0]}`,
                message: `${translation[1]}`,
                buttons: [
                    {
                        text: `${translation[2]}`,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                        }
                    }, {
                        text: `${translation[3]}`,
                        handler: () => {
                            let link = '';
                            if (this.platform.is('android')) {
                                link = 'https://bit.ly/2Zr78Me';
                            }
                            else {
                                link = 'https://apple.co/2yrfLeM';
                            }
                            window.open(link, '_system', 'location=yes');
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
    // Get the app version 
    getVersion() {
        const platform = this.platform.is('android') ? 'android' : this.platform.is('ios') ? 'ios' : '';
        return new Promise((resolve) => {
            this.location.checkVersion(platform).then((ans) => {
                if (ans && ans.version === 'DOWN') {
                    let version = String(ans.data.version);
                    while (version.includes('.')) {
                        version = version.replace('.', '').trim();
                    }
                    if (ans && ans.data && ans.data.maintenance === 1) {
                        this.checkStatus(1);
                        resolve('OK');
                    }
                    else {
                        this.checkStatus(0);
                        if (ans && ans.data && parseInt(version) > 134) {
                            this.showUpdateMessage();
                        }
                        resolve('NONE');
                    }
                }
                else {
                    this.localStorage.setItem('maintenance', 'NONE');
                    resolve('NONE');
                }
            });
        });
    }
    // Check status
    checkStatus(maintenance) {
        if (maintenance === 1) {
            const message = [];
            this.translate.get(['MAINTENANCE_TITLE_TEXT', 'MAINTENANCE_MSG_TEXT', 'OK_TEXT']).subscribe(trans => {
                message.push(trans.MAINTENANCE_TITLE_TEXT);
                message.push(trans.MAINTENANCE_MSG_TEXT);
                message.push(trans.OK_TEXT);
                this.maintenanceMessage(message);
            });
            this.localStorage.setItem('maintenance', 'OK');
            this.logoutMember();
        }
        else {
            this.localStorage.setItem('maintenance', 'NONE');
        }
    }
    // Maintenance message
    maintenanceMessage(translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${translation[0]}`,
                message: `${translation[1]}`,
                buttons: [
                    {
                        text: `${translation[2]}`,
                        handler: () => {
                            if (navigator['app']) {
                                navigator['app'].exitApp();
                            }
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
};
AuthService.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["Platform"] },
    { type: src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_5__["ApiService"] },
    { type: src_app_shared_service_location_service__WEBPACK_IMPORTED_MODULE_6__["LocationService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["NavController"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__["TranslateService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["AlertController"] },
    { type: src_app_shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_8__["LocalStorageService"] },
    { type: src_app_shared_service_storage_service__WEBPACK_IMPORTED_MODULE_7__["StorageData"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] }
];
AuthService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], AuthService);



/***/ }),

/***/ "RuS7":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/tontine-invited/tontine-invited.component.html ***!
  \*************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-grid class=\"add-member\">\r\n  <ion-row>\r\n    <ion-col size=\"12\">\r\n      <ion-card class=\"mber-invited\">\r\n        <ion-card-content>\r\n            <form [formGroup]=\"formInvited\">\r\n              <ion-row *ngIf=\"tontines && tontines.length > 0\">\r\n                <ion-col size=\"12\">\r\n                  <ion-item (click)=\"showTontines()\">\r\n                    <ion-label>{{ 'M_TONTINE_TEXT' | translate }} : </ion-label>\r\n                    <p><strong> {{truncateName(formInvited.value.tontineName,12)}}</strong> </p>          \r\n                    <ion-icon name=\"chevron-down-outline\" slot=\"end\"></ion-icon>\r\n                  </ion-item>  \r\n                </ion-col>\r\n              </ion-row>\r\n              <ion-row>\r\n                <ion-col size=\"12\">\r\n                  <ion-item>\r\n                    <ion-label>{{ 'M_SEND_METHOD' | translate }}</ion-label>\r\n                    <ion-select  (ionChange)=\"validateFields(formInvited.value.sendMode)\" formControlName=\"sendMode\">\r\n                      <ion-select-option [value]=\"'sms'\"> {{ 'M_SMS_TEXT' | translate }}</ion-select-option>      \r\n                      <ion-select-option [value]=\"'email'\">{{ 'EMAIL_TEXT' | translate }}</ion-select-option>     \r\n                    </ion-select>\r\n                  </ion-item> \r\n \r\n                  <ion-item *ngIf=\"formInvited.value.sendMode === 'sms'\" (click)=\"showCountries()\">\r\n                    <ion-label>{{'COUNTRY_TEXT' | translate}} : </ion-label>\r\n                    <p><strong> {{ formInvited.value.countryName }} </strong> </p>          \r\n                    <ion-icon name=\"chevron-down-outline\" slot=\"end\"></ion-icon>\r\n                  </ion-item> \r\n                  <div class=\"validation-errors\">\r\n                    <ng-container *ngFor=\"let validation of validationMessages.sendMode\">\r\n                      <div class=\"error-message\" *ngIf=\"sendMode.hasError(validation.type) && (sendMode.dirty || sendMode.touched)\">\r\n                        <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                        {{ validation.message }}\r\n                      </div>\r\n                    </ng-container>\r\n                  </div>   \r\n                </ion-col>\r\n                <ion-col size=\"12\">\r\n                    <ul>\r\n                        <li *ngFor=\"let sendTo of sendList.controls\">\r\n                            {{ sendTo.value }} \r\n                            <ion-button fill=\"clear\" color=\"warning\" (click)=\"removeContact(sendTo)\">\r\n                                <ion-icon name=\"remove-circle-outline\" slot=\"icon-only\"></ion-icon>\r\n                            </ion-button>\r\n                        </li>\r\n                    </ul>\r\n                </ion-col>\r\n                <ion-col size=\"9\">\r\n                  <ion-item lines=\"none\">\r\n                    <ion-label>{{ 'TONTINE_INVITED_TEXT1' | translate }}</ion-label>\r\n                  </ion-item> \r\n                </ion-col>\r\n                <ion-col size=\"3\">\r\n                  <ion-button fill=\"clear\" [disabled]=\"canAddNewMember()\" color=\"warning\" (click)=\"addMberContact(mberContact)\">\r\n                      <ion-icon name=\"add-circle-outline\" slot=\"icon-only\"></ion-icon>\r\n                  </ion-button>                  \r\n                </ion-col>\r\n                <ion-col size=\"4\"  *ngIf=\"formInvited.value.sendMode === 'sms'\">\r\n                  <ion-item>\r\n                    <ion-label>+</ion-label>\r\n                    <ion-input   type=\"text\" placeholder=\"{{formInvited.value.phoneid}}\"></ion-input>\r\n                  </ion-item>\r\n                </ion-col>\r\n                <ion-col>\r\n                  <ion-item>\r\n                    <ion-input  (ionChange)=\"validateFields(formInvited.value.sendMode)\" formControlName=\"emailOrPhone\" [type]=\"formInvited.value.sendMode === 'sms' ? 'tel' : 'email'\" placeholder=\"{{ formInvited.value.sendMode === 'sms'  ? ('REGISTER_MPHONE' | translate) : ('M_EMAIL_MSG' | translate) }}\" \r\n                    #mberContact></ion-input>\r\n                  </ion-item> \r\n                </ion-col>\r\n                <ion-col size=\"12\" *ngIf=\"formInvited.value.emailOrPhone\">  \r\n                  <p *ngIf=\"canShowContactMember()\">{{'M_MEMBER_CONTACT' | translate}} {{ 'TONTINE_INVITED_TEXT4' | translate }}.</p>\r\n                </ion-col>\r\n              </ion-row>\r\n              <ion-row>\r\n                <ion-col>\r\n                    <ion-button expand=\"full\" \r\n                          color=\"warning\" \r\n                          class=\"ion-text-uppercase\"\r\n                          shape=\"round\" [disabled]=\"canInviteMember()\" (click)=\"sendInvitation()\">\r\n                          {{ 'TONTINE_INVITE_TEXT2' | translate }}\r\n                    </ion-button>\r\n                </ion-col>\r\n              </ion-row>\r\n            </form>\r\n        </ion-card-content>\r\n      </ion-card>\r\n    </ion-col>\r\n  </ion-row>\r\n</ion-grid>");

/***/ }),

/***/ "RyLw":
/*!*******************************************************************!*\
  !*** ./src/app/shared/payment-proofs/payment-proofs.component.ts ***!
  \*******************************************************************/
/*! exports provided: PaymentProofsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaymentProofsComponent", function() { return PaymentProofsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_payment_proofs_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./payment-proofs.component.html */ "SHjV");
/* harmony import */ var _payment_proofs_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./payment-proofs.component.scss */ "Oh87");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var src_app_shared_view_proof_view_proof_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/shared/view-proof/view-proof.component */ "xVFS");
/* harmony import */ var src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/tontine.service */ "/WEl");
/* harmony import */ var src_app_dashboard_my_tontines_services_debts_manager_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/debts-manager.service */ "ijC1");








let PaymentProofsComponent = class PaymentProofsComponent {
    constructor(modatCtrl, tontine, debt) {
        this.modatCtrl = modatCtrl;
        this.tontine = tontine;
        this.debt = debt;
        this.currentProofsData = this.debt.getDebtsData();
        this.tontineData = this.tontine.getCurrentTontineData();
        this.loading = false;
        this.myProofs = [];
        this.allData = [];
        this.nbItems = 10;
    }
    ngOnInit() {
        this.loading = true;
        this.getProofs();
    }
    // close the modal
    closeContribute() {
        this.modatCtrl.dismiss(null, 'cancel');
    }
    // Get the list of proofs of a members
    getProofs() {
        let dataResp = [];
        dataResp = dataResp.concat({ type: 'bank', data: this.currentProofsData.proof[0].liste_traditional_banking_proof });
        dataResp = dataResp.concat({ type: 'online', data: this.currentProofsData.proof[0].liste_online_wallet_proof });
        dataResp = dataResp.concat({ type: 'checkout', data: this.currentProofsData.proof[0].liste_pay_with_caisse_tontine_proof });
        this.allData = dataResp;
        if (this.allData.length > this.nbItems) {
            this.myProofs = [];
            for (let i = 0; i < this.nbItems; i++) {
                this.myProofs.push(this.allData[this.myProofs.length]);
            }
        }
        else {
            this.myProofs = this.allData;
        }
        this.loading = false;
    }
    // Infinite scroll data
    infinteScrollData(event) {
        setTimeout(() => {
            for (let i = 0; i < this.nbItems; i++) {
                if (this.myProofs.length < this.allData.length) {
                    this.myProofs.push(this.allData[this.myProofs.length]);
                }
                else if (this.myProofs.length === this.allData.length) {
                    event.target.disabled = true;
                }
            }
            event.target.complete();
        }, 500);
    }
    showProof(proofsData) {
        this.modatCtrl
            .create({
            component: src_app_shared_view_proof_view_proof_component__WEBPACK_IMPORTED_MODULE_5__["ViewProofComponent"],
            componentProps: {
                proof: proofsData
            }
        })
            .then(modalEl => modalEl.present());
    }
};
PaymentProofsComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["ModalController"] },
    { type: src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_6__["TontineService"] },
    { type: src_app_dashboard_my_tontines_services_debts_manager_service__WEBPACK_IMPORTED_MODULE_7__["DebtsManagerService"] }
];
PaymentProofsComponent.propDecorators = {
    infiniteScroll: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: [_ionic_angular__WEBPACK_IMPORTED_MODULE_4__["IonInfiniteScroll"], { static: false },] }]
};
PaymentProofsComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-payment-proofs',
        template: _raw_loader_payment_proofs_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_payment_proofs_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], PaymentProofsComponent);



/***/ }),

/***/ "SHjV":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/payment-proofs/payment-proofs.component.html ***!
  \***********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header>\r\n  <ion-toolbar>\r\n    <ion-title class=\"ion-text-center\">{{ 'LIST_OF_PROOFS' | translate }}</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"session-proof\">\r\n  <p class=\"ion-text-center\"  *ngIf=\"loading\">\r\n    <ion-spinner  name=\"circles\"></ion-spinner>\r\n  </p>\r\n  <ion-grid *ngIf=\"myProofs && myProofs.length > 0\">\r\n    <ion-row>\r\n      <ion-col>\r\n        <ion-list>     \r\n          <div *ngFor=\"let proof of myProofs\">\r\n          <ion-item  *ngIf=\"proof.type === 'bank'\">          \r\n            <ion-label>            \r\n              <p>\r\n                <ion-text class=\"ion-float-left\"><b>{{ 'DATE_TEXT' | translate }}: </b>{{ proof.data && proof.data.updated_at ? proof.updated_at.split(' ')[0] : '' }}</ion-text>\r\n                <ion-text  class=\"ion-float-right\"><b>{{'BY_TEXT' | translate}}: </b>{{ 'TRADITIONNAL_BANKING' | translate  }}</ion-text>\r\n              </p>\r\n              <p *ngIf=\"proof.description\">\r\n                <ion-text class=\"ion-float-left\"><b>{{'DESCRIPTION_TEXT' | translate}}: </b>{{ proof.data && proof.data.description ? proof.data.description : ''  }}</ion-text>\r\n              </p>\r\n              <ion-text color=\"warning\">\r\n                <h3>{{'AMOUNT_TEXT' | translate }}: {{ proof && proof.montant ? (proof.montant | commadumper) : 0  }}{{tontineData.tontine && tontineData.tontine.monnaie ? tontineData.tontine.monnaie :'' }}\r\n                </h3>\r\n              </ion-text>\r\n              <p class=\"ion-text-right\">\r\n                <a (click)=\"showProof(proof)\" class=\"ion-text-capitalize\">\r\n                  {{'DEBT_VIEW_PROOF' | translate}}\r\n                </a>\r\n              </p>            \r\n            </ion-label>\r\n          </ion-item>\r\n          <ion-item  *ngIf=\"proof.type === 'online'\">          \r\n            <ion-label>            \r\n              <p>\r\n                <ion-text class=\"ion-float-left\"><b>{{ 'DATE_TEXT' | translate }}: </b>{{ proof.data && proof.data.updated_at ? proof.data.updated_at.split(' ')[0] : '' }}</ion-text>\r\n                <ion-text *ngIf=\"proof.typepaiement_name\" class=\"ion-float-right\"><b>{{'BY_TEXT' | translate}}: </b>{{ proof.data && proof.data.typepaiement_name ? proof.data.typepaiement_name : ''  }}</ion-text>\r\n              </p>\r\n              <ion-text color=\"warning\">\r\n                <h3>{{'AMOUNT_TEXT' | translate }}: {{ proof.data && proof.data.montant ? (proof.data.montant | commadumper) : 0  }}{{tontineData.tontine && tontineData.tontine.monnaie ? tontineData.tontine.monnaie :'' }}\r\n                </h3>\r\n              </ion-text>\r\n              <p class=\"ion-text-right\">\r\n                <a (click)=\"showProof(proof.data.receipt)\" class=\"ion-text-capitalize\">\r\n                  {{'DEBT_VIEW_PROOF' | translate}}\r\n                </a>\r\n              </p>            \r\n            </ion-label>\r\n          </ion-item>\r\n\r\n          <ion-item  *ngIf=\"proof.type === 'checkout'\">          \r\n            <ion-label>            \r\n              <p>\r\n                <ion-text class=\"ion-float-left\"><b>{{ 'DATE_TEXT' | translate }}: </b>{{ proof.data && proof.data.updated_at ? proof.data.updated_at.split(' ')[0] : '' }}</ion-text>\r\n                <ion-text *ngIf=\"proof.typepaiement_name\" class=\"ion-float-right\"><b>{{'BY_TEXT' | translate}}: </b>{{ proof.data && proof.data.method_payment_name ? (proof.data.method_payment_name | translate) : ''  }}</ion-text>\r\n              </p>\r\n              <p *ngIf=\"proof.data.caisse_name\">\r\n                <ion-text class=\"ion-float-left\"><b>{{'DESCRIPTION_TEXT' | translate}}: </b>{{ proof.data && proof.data.caisse_name ? (proof.data.caisse_name | translate) : ''  }}</ion-text>\r\n              </p>\r\n              <ion-text color=\"warning\">\r\n                <h3>{{'AMOUNT_TEXT' | translate }}: {{ proof.data&& proof.data.montant ? (proof.data.montant | commadumper) : 0  }}{{tontineData.tontine && tontineData.tontine.monnaie ? tontineData.tontine.monnaie :'' }}\r\n                </h3>\r\n              </ion-text>            \r\n            </ion-label>\r\n          </ion-item>\r\n        </div>\r\n        </ion-list>\r\n      </ion-col>      \r\n    </ion-row>\r\n  </ion-grid>\r\n\r\n  <div  *ngIf=\"myProofs && myProofs.length === 0  && !loading\">\r\n    <p class=\"ion-padding ion-text-center\" >{{ 'PROOFS_EMPTY_MSG' | translate}}</p>\r\n  </div>\r\n\r\n  <ion-infinite-scroll threshold=\"100px\" (ionInfinite)=\"infinteScrollData($event)\">\r\n    <ion-infinite-scroll-content\r\n      loadingSpinner=\"bubbles\"\r\n      loadingText=\"{{ 'M_LOADING_MORE_DATA' | translate }}\">\r\n    </ion-infinite-scroll-content>\r\n  </ion-infinite-scroll>\r\n</ion-content>\r\n\r\n<ion-footer class=\"ion-padding ion-text-center\">\r\n  <ion-grid>\r\n    <ion-row>\r\n      <ion-col>\r\n          <ion-button expand=\"full\" \r\n                fill=\"outline\"\r\n                color=\"warning\" \r\n                class=\"ion-text-uppercase\"\r\n                shape=\"round\" (click)=\"closeContribute()\">\r\n            {{ 'CANCEL_TEXT' | translate }}\r\n          </ion-button>\r\n      </ion-col>\r\n    </ion-row>\r\n  </ion-grid>\r\n</ion-footer>");

/***/ }),

/***/ "SfCI":
/*!*******************************************************************!*\
  !*** ./src/app/shared/cashmode-loan/cashmode-loan.component.scss ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjYXNobW9kZS1sb2FuLmNvbXBvbmVudC5zY3NzIn0= */");

/***/ }),

/***/ "SpGO":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/paidmode-debt-order/paidmode-debt-order.component.html ***!
  \*********************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<form [formGroup]=\"userPayMethodForm\">\r\n  <p class=\"ion-text-center\"  *ngIf=\"loadingOperator\">\r\n    <ion-spinner  name=\"circles\"></ion-spinner>\r\n  </p>\r\n<ion-grid>\r\n  <ion-row>\r\n    <ion-col size=\"12\">\r\n      <ion-card class=\"paidmode\">\r\n        <ion-card-content class=\"ion-text-center\">    \r\n          <ion-row>\r\n            <ion-col size=\"12\">\r\n              <ion-item>\r\n                <ion-label>{{'COUNTRY_TEXT' | translate}}</ion-label>\r\n                <ion-select (ionChange)=\"updateCurrencyCountry(userPayMethodForm.value.country_id)\" formControlName=\"country_id\">\r\n                  <ion-select-option [value]=\"country.country_id\" *ngFor=\"let country of states\">{{ country.country_label }}</ion-select-option>          \r\n                </ion-select>\r\n              </ion-item>   \r\n              <div class=\"validation-errors\">\r\n                <ng-container *ngFor=\"let validation of validationMessages.country_id\">\r\n                  <div class=\"error-message\" *ngIf=\"country.hasError(validation.type) && (country.dirty || country.touched)\">\r\n                    <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                    {{ validation.message }}\r\n                  </div>\r\n                </ng-container>\r\n              </div>     \r\n            </ion-col>\r\n          </ion-row>       \r\n            <ion-row class=\"ion-justify-content-end\" *ngIf=\"userPayMethodForm.value.country_id && paymentMethods && paymentMethods.length > 0\">\r\n              <ion-col size=\"4\">\r\n                <ion-img [src]=\"paymentMethods&&paymentMethods[userPayMethodForm.value.typePaymentIndex] ? paymentMethods[userPayMethodForm.value.typePaymentIndex].logo : ' '\" class=\"logooperator\"></ion-img>\r\n              </ion-col>\r\n            </ion-row>  \r\n            <ion-row *ngIf=\"userPayMethodForm.value.country_id && paymentMethods && paymentMethods.length > 0\">\r\n              <ion-col size=\"12\">\r\n                <ion-item>\r\n                  <ion-label>{{ 'USER_PROFILE_TEXT4' | translate }}</ion-label>\r\n                  <ion-select (ionChange)=\"updatePaymentMethod(userPayMethodForm.value.typePaymentIndex)\" formControlName=\"typePaymentIndex\">\r\n                    <ion-select-option *ngFor=\"let operator of paymentMethods; let operatorId = index\" [value]=\"operatorId\">{{ operator.name }}</ion-select-option>           \r\n                  </ion-select>\r\n                </ion-item>   \r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.payementtype\">\r\n                    <div class=\"error-message\" *ngIf=\"payementtype.hasError(validation.type) && (payementtype.dirty || payementtype.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>   \r\n              </ion-col>\r\n            </ion-row> \r\n     \r\n            <ion-row class=\"ion-padding-bottom\">\r\n              <ion-col size=\"12\">\r\n                <ion-item>\r\n                  <ion-label position=\"floating\" >{{ 'AMOUNT_TEXT' | translate }}</ion-label>\r\n                  <ion-input  type=\"number\" formControlName=\"montant\"></ion-input>\r\n                  <span slot=\"end\" class=\"slot-prefix ion-no-margin\"> {{ contributionData.device_name }} </span>\r\n                </ion-item> \r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.amount\">\r\n                    <div class=\"error-message\" *ngIf=\"montantContributeError.hasError(validation.type) && (montantContributeError.dirty || montantContributeError.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>          \r\n              </ion-col>\r\n            </ion-row> \r\n            <ion-row class=\"ion-padding-bottom\">\r\n              <ion-col size=\"12\">\r\n                <ion-item>\r\n                  <ion-label position=\"floating\" >{{ 'REASON_TEXT' | translate }}</ion-label>\r\n                  <ion-input  type=\"text\" formControlName=\"reason\"></ion-input>\r\n                </ion-item> \r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.reason\">\r\n                    <div class=\"error-message\" *ngIf=\"reason.hasError(validation.type) && (reason.dirty || reason.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>          \r\n              </ion-col>\r\n              <ion-col  *ngIf=\"userPayMethodForm.value.receipt && userPayMethodForm.value.type_payment_name !== 'CASH'\" size=\"12\" class=\"ion-padding\"> \r\n                <ion-thumbnail>\r\n                  <img src=\"{{userPayMethodForm.value.receipt}}\">\r\n                </ion-thumbnail>\r\n              </ion-col>\r\n              <ion-col size=\"12\" class=\"ion-padding\"  *ngIf=\"userPayMethodForm.value.type_payment_name !== 'CASH'\">\r\n                <ion-button  color=\"primary\" size=\"medium\" class=\"ion-text-capitalize\" (click)=\"getProof()\">\r\n                  <ion-icon name=\"add\"></ion-icon>\r\n                  {{ 'PROF_PAYMENT' | translate }}\r\n               </ion-button>\r\n              </ion-col>\r\n            </ion-row>                       \r\n        </ion-card-content>\r\n      </ion-card>\r\n    </ion-col>      \r\n  </ion-row>\r\n  <ion-row>\r\n    <svg height=\"0\" width=\"0\" viewBox=\"0 0 27.7 28.93\">\r\n      <defs>\r\n        <clipPath id=\"pay-btn-shape1\" >\r\n          <path d=\"M2.57,17.21A11.18,11.18,0,0,1,9.17,5.77h.06l.17-.22.11-.23c-1-.73-1.56-1.42-1.39-2,.42-1.32,5-1.17,10.22.33S27.43,7.47,27,8.81c-.16.48-.86.76-1.88.86h0v.1a5,5,0,0,0,.08.66,3.77,3.77,0,0,0,.1.46l.07.23c2,4,1.7,8.37-1.73,12.53a12.23,12.23,0,0,1-18.42-.1A11.55,11.55,0,0,1,2.57,17.21Z\" />            \r\n        </clipPath>        \r\n      </defs>\r\n    </svg>\r\n    <ion-col size=\"12\" class=\"ion-text-center wrap-pay-btn\" *ngIf=\"userPayMethodForm.valid && userPayMethodForm.value.montant <=  balance\"  (click)=\"showPayment(userPayMethodForm.value)\">\r\n      <svg id=\"pay-btn1\" preserveAspectRatio=\"xMidYMid slice\" viewBox=\"0 0 27.7 28.93\">\r\n        <path  class=\"arc-part\" d=\"M5.91,6.89a12.25,12.25,0,0,0-4.14,9.27,11.14,11.14,0,0,0,.16,1.7,12.82,12.82,0,0,0,.42,1.66c.08.27.19.54.29.8A8.24,8.24,0,0,0,3,21.1a14.85,14.85,0,0,0,.82,1.5,12.25,12.25,0,0,0,3.5,3.62,13.49,13.49,0,0,0,8,2.21,15.81,15.81,0,0,0,1.7-.17,13.74,13.74,0,0,0,1.69-.37,12.79,12.79,0,0,0,5.65-3.5,11.63,11.63,0,0,0,1.88-2.83,12.11,12.11,0,0,0,1.06-3.27,11,11,0,0,0-.94-6.84A10.42,10.42,0,0,1,27.23,13a10.65,10.65,0,0,1,.63,1.71,11.3,11.3,0,0,1,.22,3.64,12.78,12.78,0,0,1-.94,3.56,12.11,12.11,0,0,1-1.88,3.17,12.84,12.84,0,0,1-1.31,1.33,13.32,13.32,0,0,1-1.49,1.12,14,14,0,0,1-3.37,1.59,13,13,0,0,1-1.82.43,17.17,17.17,0,0,1-1.88.21,14.31,14.31,0,0,1-3.77-.27,14.55,14.55,0,0,1-5.12-2.19,11.53,11.53,0,0,1-1.41-1.17A13.92,13.92,0,0,1,.92,18a10.3,10.3,0,0,1-.08-1.88A12.36,12.36,0,0,1,3.31,9.34,10.42,10.42,0,0,1,5.91,6.89ZM7.27,3.35a1.52,1.52,0,0,1-.08-.78,1.82,1.82,0,0,1,.32-.76A2.29,2.29,0,0,1,9,1,6.31,6.31,0,0,1,9.78.89h2.36a25.76,25.76,0,0,1,6.19,1,23.94,23.94,0,0,1,5.74,2.5,20.58,20.58,0,0,1,2.56,1.83,3.84,3.84,0,0,1,1,1.27,1.29,1.29,0,0,1,.08.84,1.24,1.24,0,0,1-.47.64,1.21,1.21,0,0,0,.29-.67,1,1,0,0,0-.21-.65,3.64,3.64,0,0,0-1.07-.94c-.86-.53-1.75-1-2.66-1.47A34.29,34.29,0,0,0,18,3.06,38.16,38.16,0,0,0,12,1.84c-.5-.06-1-.11-1.52-.15l-.73-.13a6.42,6.42,0,0,0-.73,0A1.88,1.88,0,0,0,7.77,2,1.57,1.57,0,0,0,7.27,3.35Z\" />\r\n        <g class=\"pay-btn-border\">\r\n          <rect x=\"1.35\" y=\"0.56\" width=\"25.09\" height=\"26.44\" class=\"inner-pot\" />\r\n        </g>\r\n        <path class=\"pot-entry\" d=\"M22,6.27c-1.13-.38-2.45-.85-3.86-1.22-1-.28-2.17-.57-3.11-.75-2.64-.47-4.52-.57-4.62-.09-.09.19.19.57.75.85A24.19,24.19,0,0,0,17.46,7.4a22.19,22.19,0,0,0,7.07,1.13c.38-.09.66-.19.66-.28C25.32,7.9,24.05,7.15,22,6.27Z\" />\r\n        <text class=\"pay-text\"><tspan style=\"letter-spacing: -0.05859375em\">P</tspan><tspan x=\"4.94\" y=\"0\" style=\"letter-spacing: -0.087890625em\">A</tspan><tspan x=\"10.56\" y=\"0\">Y</tspan></text>\r\n      </svg>     \r\n      <div class=\"glow-wrap\">\r\n        <i class=\"glow\"></i>\r\n      </div>          \r\n    </ion-col>\r\n  </ion-row>\r\n</ion-grid>\r\n</form> \r\n");

/***/ }),

/***/ "Sy1n":
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/*! exports provided: AppComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppComponent", function() { return AppComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_app_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./app.component.html */ "VzVu");
/* harmony import */ var _app_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app.component.scss */ "ynWL");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _ionic_native_splash_screen_ngx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ionic-native/splash-screen/ngx */ "54vc");
/* harmony import */ var _ionic_native_status_bar_ngx__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic-native/status-bar/ngx */ "VYYF");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var _shared_service_location_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./shared/service/location.service */ "e009");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var _dashboard_my_tontines_services_contribution_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dashboard/my-tontines/services/contribution.service */ "US41");
/* harmony import */ var _shared_service_error_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./shared/service/error.service */ "TkUd");
/* harmony import */ var _dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./dashboard/user/service/user.service */ "6Hie");
/* harmony import */ var _ionic_native_onesignal_ngx__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @ionic-native/onesignal/ngx */ "wljF");
/* harmony import */ var _auth_service_auth_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./auth/service/auth.service */ "RmnQ");
/* harmony import */ var _shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./shared/service/local-storage.service */ "y7ii");
/* harmony import */ var _ionic_native_google_analytics_ngx__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @ionic-native/google-analytics/ngx */ "hVmN");

















let AppComponent = class AppComponent {
    constructor(platform, splashScreen, userService, googleAnalytic, auth, contribution, statusBar, translate, location, router, oneSignal, error, localStorage) {
        this.platform = platform;
        this.splashScreen = splashScreen;
        this.userService = userService;
        this.googleAnalytic = googleAnalytic;
        this.auth = auth;
        this.contribution = contribution;
        this.statusBar = statusBar;
        this.translate = translate;
        this.location = location;
        this.router = router;
        this.oneSignal = oneSignal;
        this.error = error;
        this.localStorage = localStorage;
        this.navLinksArray = []; // store route links as the user navigates the app
        // set the token state
        this.localStorage.setItem('startRefreshToken', 'false');
        this.contribution.getTypeContributionTontine(true);
        // Update the current language posistion
        this.getLanguages(false);
        // set the user language
        this.setDefaultUserLang();
        // Subcribe routes
        this.router.events.subscribe(event => {
            const url = this.router.url;
            if (url === '/dashboard') {
                this.navLinksArray = [];
            }
            else {
                if (event instanceof _angular_router__WEBPACK_IMPORTED_MODULE_9__["NavigationEnd"]) {
                    const isCurrentUrlSaved = this.navLinksArray.find((item) => { return item === url; });
                    if (!isCurrentUrlSaved)
                        this.navLinksArray.push(url);
                }
            }
        });
        // Listen the hardware back button
        this.hardwareBackButton();
        // Get loctation data
        this.getCountries(true);
        this.getWordCountries(true);
        // Set app sesion timer
        const currentDate = new Date();
        this.auth.removeAppLastSession();
        this.auth.setAppLastSession(currentDate.getTime());
        this.initializeApp();
        this.platform.ready().then(() => {
            // Register to push notification on OneSignal
            this.oneSignal.startInit('0089a799-c464-46bd-b92d-a40cd6a7d5b8', '627103336519');
            this.oneSignal.inFocusDisplaying(this.oneSignal.OSInFocusDisplayOption.InAppAlert);
            this.oneSignal.handleNotificationReceived().subscribe(() => {
                // do something when notification is received
            });
            this.oneSignal.handleNotificationOpened().subscribe(() => {
                // do something when a notification is opened
            });
            this.oneSignal.endInit();
            // add the google analytics
            this.googleAnalytic.startTrackerWithId('app-analytics-30260')
                .then(() => {
                this.googleAnalytic.trackView('Toupesu app');
                alert('Google Analytic ok');
                // Tracker is ready
                // You can now track pages or set additional information such as AppVersion or UserId
            })
                .catch(e => { });
        });
    }
    // set the default user language
    setDefaultUserLang() {
        this.translate.setDefaultLang('en');
        let currentLang = this.location.getCurrentUserLanguage();
        currentLang = currentLang && currentLang.code_langue ? currentLang.code_langue.toLocaleLowerCase() : '';
        let sessionLang = '';
        sessionLang = this.userService.getCurrentUserSessionLanguage();
        let browserLang = this.translate.getBrowserLang();
        browserLang = browserLang.toLocaleLowerCase();
        this.defaultLang = sessionLang ? sessionLang : currentLang ? currentLang : browserLang;
        this.translate.use(this.defaultLang && this.defaultLang.match('en|fr|en_sa') ? this.defaultLang : 'en');
        // set the default language of the user
        if (!sessionLang && this.userService.getUserToken()) {
            this.error.updateLang(this.defaultLang);
        }
    }
    // Get the list of language of the current location
    getLanguages(refresher) {
        this.location.getLanguages(refresher).then((languagesData) => {
            const currentLang = this.location.getCurrentUserLanguage();
            const hasCurrentLang = currentLang && currentLang.code_langue ? true : false;
            this.currentLang = [];
            if (languagesData) {
                languagesData.forEach(data => {
                    if (data && data.langue) {
                        this.currentLang.push({
                            lang: data.langue.code_langue,
                            name: data.langue.name,
                            active: hasCurrentLang && data.langue.code_langue === currentLang.code_langue ?
                                true : !hasCurrentLang && data.langue.default_langue === 'yes' ? true : false,
                            countryId: data.langue.country_id,
                            langueData: data.langue,
                            translationData: data.keywords,
                            index: languagesData.indexOf(data)
                        });
                    }
                });
                this.currentLang.forEach(data => {
                    if (data && data.active) {
                        this.location.setCurrentUserLanguage(data.langueData);
                    }
                });
            }
            else {
                this.currentLang = [];
            }
        });
    }
    // Listen hardware back button
    hardwareBackButton() {
        this.platform.backButton.subscribe(() => {
            if (this.navLinksArray.length > 1) {
                this.navLinksArray.pop();
                const index = this.navLinksArray.length + 1;
                const url = this.navLinksArray[index];
                this.router.navigate([url]);
            }
        });
    }
    // Initialize the app
    initializeApp() {
        this.platform.ready().then(() => {
            this.statusBar.styleDefault();
            this.splashScreen.hide();
            // Kill all background services when the app exit
            setTimeout(() => {
                this.updateDeviceToken();
            }, 3000);
        });
    }
    // Get the list of countries
    getCountries(refresher) {
        this.location.getAllCountries(refresher).then((countries) => { });
    }
    // Get all the word countries
    getWordCountries(refresh) {
        this.location.getWordCountries(refresh).then((countries) => { });
    }
    // update the device token if a user a connection
    updateDeviceToken() {
        if (this.userService.getUserToken()) {
            this.oneSignal.getIds().then(ids => {
                if (ids && ids.userId) {
                    this.userService.saveDevice({ device_phone: ids.userId });
                }
            });
        }
    }
};
AppComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["Platform"] },
    { type: _ionic_native_splash_screen_ngx__WEBPACK_IMPORTED_MODULE_5__["SplashScreen"] },
    { type: _dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_12__["UserService"] },
    { type: _ionic_native_google_analytics_ngx__WEBPACK_IMPORTED_MODULE_16__["GoogleAnalytics"] },
    { type: _auth_service_auth_service__WEBPACK_IMPORTED_MODULE_14__["AuthService"] },
    { type: _dashboard_my_tontines_services_contribution_service__WEBPACK_IMPORTED_MODULE_10__["ContributionService"] },
    { type: _ionic_native_status_bar_ngx__WEBPACK_IMPORTED_MODULE_6__["StatusBar"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_7__["TranslateService"] },
    { type: _shared_service_location_service__WEBPACK_IMPORTED_MODULE_8__["LocationService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_9__["Router"] },
    { type: _ionic_native_onesignal_ngx__WEBPACK_IMPORTED_MODULE_13__["OneSignal"] },
    { type: _shared_service_error_service__WEBPACK_IMPORTED_MODULE_11__["ErrorService"] },
    { type: _shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_15__["LocalStorageService"] }
];
AppComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-root',
        template: _raw_loader_app_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_app_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], AppComponent);



/***/ }),

/***/ "T8hk":
/*!***************************************************************!*\
  !*** ./src/app/shared/service/payment-global-data.service.ts ***!
  \***************************************************************/
/*! exports provided: PaymentGlobalDataService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaymentGlobalDataService", function() { return PaymentGlobalDataService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/dashboard/user/service/user.service */ "6Hie");




;
let PaymentGlobalDataService = class PaymentGlobalDataService {
    constructor(translate, userService) {
        this.translate = translate;
        this.userService = userService;
    }
    // get the default payment method
    getDefaultPaymentMethod() {
        const userPayment = this.userService.getUserpaymentMethod();
        let currentPayment = null;
        if (userPayment && userPayment.length > 0) {
            userPayment.forEach(payment => {
                if (payment.isActive === 1) {
                    currentPayment = payment;
                }
            });
        }
        return currentPayment;
    }
    // remove space
    removeInputSpace(formValue) {
        const input = String(formValue);
        return input.replace(/\s/g, "");
    }
    // check if it is mobile operator
    isMobileOperator(paymentData) {
        let isMobile = false;
        if (paymentData && paymentData.name && paymentData.name !== 'PAYPAL' && paymentData.name !== 'OZOW' && paymentData.name !== 'WALLET') {
            isMobile = true;
        }
        return isMobile;
    }
    // check if paypal message is define
    hasPaypalMessage(paypalMessage, paymentData) {
        let canShow = false;
        if (paypalMessage && paymentData && paymentData.name && paymentData.name === 'PAYPAL') {
            canShow = true;
        }
        return canShow;
    }
    // check if can show paypal button
    hasPaypalButton(paypal_initialized, paymentData) {
        let canShow = false;
        if (!paypal_initialized || paymentData && paymentData.name && paymentData.name === 'PAYPAL') {
            canShow = true;
        }
        return canShow;
    }
    // can make payment 
    canShowPayment(formValid, paymentData, phone, hasPhoneError) {
        let canpay = false;
        if (formValid && paymentData && paymentData.name && (paymentData.name === 'WALLET' || paymentData.name === 'OZOW' || (phone && !hasPhoneError && (paymentData.name === 'ORANGE MONEY' || paymentData.name === 'MTN MOBILE MONEY')))) {
            canpay = true;
        }
        return canpay;
    }
    // can make recharge
    canMakeRecharge(formValid, paymentData, phone, hasPhoneError) {
        let canpay = false;
        if ((formValid && paymentData && paymentData.name &&
            (paymentData.name !== 'PAYPAL' || (phone && !hasPhoneError && (paymentData.name === 'ORANGE MONEY' || paymentData.name === 'MTN MOBILE MONEY'))))) {
            canpay = true;
        }
        return canpay;
    }
    // Format payment method response
    formatPaymentMethodResponseContribution(paymentMethodsData) {
        const paymentMethods = [];
        paymentMethodsData.forEach(payment => {
            if (payment.active === 1) {
                switch (payment.name) {
                    case 'ORANGE MONEY':
                        this.translate.get('REGISTER_MPHONE').subscribe(value => {
                            paymentMethods.push({
                                id: payment.id, country_id: payment.country_id, logo: 'assets/orange.jpg',
                                currency: payment.currency, name: payment.name, placeholder: value,
                                handling_fees: payment.handling_fees,
                                type_handling_fees: payment.type_handling_fees,
                                type: 'OPERATOR'
                            });
                        });
                        break;
                    case 'MTN MOBILE MONEY':
                        this.translate.get('REGISTER_MPHONE').subscribe(value => {
                            paymentMethods.push({
                                id: payment.id, country_id: payment.country_id, logo: 'assets/mtn.jpg',
                                currency: payment.currency, name: payment.name, placeholder: value,
                                handling_fees: payment.handling_fees,
                                type_handling_fees: payment.type_handling_fees
                            });
                        });
                        break;
                    case 'PAYPAL':
                        this.translate.get('EMAIL_TEXT').subscribe(value => {
                            paymentMethods.push({
                                id: payment.id, country_id: payment.country_id, logo: 'assets/paypal.jpg',
                                currency: payment.currency, name: payment.name, placeholder: value,
                                handling_fees: payment.handling_fees,
                                type_handling_fees: payment.type_handling_fees,
                                type: 'OPERATOR'
                            });
                        });
                        break;
                    case 'OZOW':
                        this.translate.get('EMAIL_TEXT').subscribe(value => {
                            paymentMethods.push({
                                id: payment.id, country_id: payment.country_id, logo: 'assets/ozow.png',
                                currency: payment.currency, name: payment.name, placeholder: value,
                                handling_fees: payment.handling_fees,
                                type_handling_fees: payment.type_handling_fees,
                                type: 'OPERATOR'
                            });
                        });
                        break;
                    default:
                        break;
                }
            }
        });
        return paymentMethods;
    }
    // Format the payment response for debt
    formatPaymentMethodForDebt(paymentMethodsData) {
        const paymentMethods = [];
        paymentMethodsData.forEach(payment => {
            if (payment.active === 1) {
                switch (payment.name) {
                    case 'ORANGE MONEY':
                        this.translate.get('REGISTER_MPHONE').subscribe(value => {
                            paymentMethods.push({
                                id: payment.id, country_id: payment.country_id, logo: 'assets/orange.jpg',
                                currency: payment.currency, name: payment.name, placeholder: value,
                                handling_fees: payment.handling_fees,
                                type_handling_fees: payment.type_handling_fees
                            });
                        });
                        break;
                    case 'MTN MOBILE MONEY':
                        this.translate.get('REGISTER_MPHONE').subscribe(value => {
                            paymentMethods.push({
                                id: payment.id, country_id: payment.country_id, logo: 'assets/mtn.jpg',
                                currency: payment.currency, name: payment.name, placeholder: value,
                                handling_fees: payment.handling_fees,
                                type_handling_fees: payment.type_handling_fees
                            });
                        });
                        break;
                    case 'PAYPAL':
                        this.translate.get('EMAIL_TEXT').subscribe(value => {
                            paymentMethods.push({
                                id: payment.id, country_id: payment.country_id, logo: 'assets/paypal.jpg',
                                currency: payment.currency, name: payment.name, placeholder: value,
                                handling_fees: payment.handling_fees,
                                type_handling_fees: payment.type_handling_fees
                            });
                        });
                        break;
                    case 'OZOW':
                        this.translate.get('EMAIL_TEXT').subscribe(value => {
                            paymentMethods.push({
                                id: payment.id, country_id: payment.country_id, logo: 'assets/ozow.png',
                                currency: payment.currency, name: payment.name, placeholder: value,
                                handling_fees: payment.handling_fees,
                                type_handling_fees: payment.type_handling_fees
                            });
                        });
                        break;
                    case 'CASH':
                        paymentMethods.push({
                            id: payment.id, country_id: payment.country_id, logo: 'assets/wallet-icon.svg',
                            currency: payment.currency, name: payment.name, placeholder: '',
                            handling_fees: payment.handling_fees,
                            type_handling_fees: payment.type_handling_fees
                        });
                        break;
                    default:
                        break;
                }
            }
        });
        return paymentMethods;
    }
    // format payment method for recharge
    formatPaymentMethodRecharge(paymentMethodsData, tontine) {
        const paymentMethods = [];
        paymentMethodsData.forEach(payment => {
            if (payment.active === 1) {
                switch (payment.name) {
                    case 'ORANGE MONEY':
                        this.translate.get('REGISTER_MPHONE').subscribe(value => {
                            paymentMethods.push({
                                id: payment.id, country_id: payment.country_id, logo: 'assets/orange.jpg',
                                currency: payment.currency, name: payment.name, placeholder: value,
                                handling_fees: payment.handling_fees,
                                type_handling_fees: payment.type_handling_fees,
                                type: 'OPERATOR'
                            });
                        });
                        break;
                    case 'MTN MOBILE MONEY':
                        this.translate.get('REGISTER_MPHONE').subscribe(value => {
                            paymentMethods.push({
                                id: payment.id, country_id: payment.country_id, logo: 'assets/mtn.jpg',
                                currency: payment.currency, name: payment.name, placeholder: value,
                                handling_fees: payment.handling_fees,
                                type_handling_fees: payment.type_handling_fees,
                                type: 'OPERATOR'
                            });
                        });
                        break;
                    case 'PAYPAL':
                        this.translate.get('EMAIL_TEXT').subscribe(value => {
                            paymentMethods.push({
                                id: payment.id, country_id: payment.country_id, logo: 'assets/paypal.jpg',
                                currency: payment.currency, name: payment.name, placeholder: value,
                                handling_fees: payment.handling_fees,
                                type_handling_fees: payment.type_handling_fees,
                                type: 'OPERATOR'
                            });
                        });
                        break;
                    case 'OZOW':
                        this.translate.get('EMAIL_TEXT').subscribe(value => {
                            paymentMethods.push({
                                id: payment.id, country_id: payment.country_id, logo: 'assets/ozow.png',
                                currency: payment.currency, name: payment.name, placeholder: value,
                                handling_fees: payment.handling_fees,
                                type_handling_fees: payment.type_handling_fees,
                                type: 'OPERATOR'
                            });
                        });
                        break;
                    case 'CASH':
                        if (tontine && tontine.tontine && tontine.tontine.tontine_payment_type_id === 1) {
                            paymentMethods.push({
                                id: payment.id, country_id: payment.country_id, logo: 'assets/wallet-icon.svg',
                                currency: payment.currency, name: payment.name, placeholder: '',
                                handling_fees: payment.handling_fees,
                                type_handling_fees: payment.type_handling_fees,
                                type: 'CASH'
                            });
                        }
                        break;
                    default:
                        break;
                }
            }
        });
        return paymentMethods;
    }
    // format withdraw data
    formatWithdrawData(paymentData) {
        const paymentMethods = [];
        paymentData.forEach(payment => {
            if (payment.active === 1) {
                switch (payment.name) {
                    case 'MTN MOBILE MONEY':
                        paymentMethods.push({
                            id: payment.id, country_id: payment.country_id,
                            logo: 'assets/mtn.jpg', name: payment.name, label: payment.name, currency: payment.currency
                        });
                        break;
                    case 'ORANGE MONEY':
                        paymentMethods.push({
                            id: payment.id, country_id: payment.country_id,
                            logo: 'assets/orange.jpg', name: payment.name, label: payment.name, currency: payment.currency
                        });
                        break;
                    case 'PAYPAL':
                        paymentMethods.push({
                            id: payment.id, country_id: payment.country_id,
                            logo: 'assets/paypal.jpg', name: payment.name, label: `${payment.name}(${payment.currency})`, currency: payment.currency
                        });
                        break;
                    default:
                        break;
                }
            }
        });
        return paymentMethods;
    }
    // Format countries data 
    formatCountriesData(countriesData, hasAll) {
        const states = [];
        countriesData.forEach(country => {
            if (country.active === 1 || hasAll) {
                const countryLabel = `COUNTRY_${country.code_country}`;
                this.translate.get(countryLabel).subscribe(value => {
                    states.push({
                        country_id: country.country_id,
                        country_name: country.country_name,
                        handling_fees: country.handling_fees,
                        type_handling_fees: country.type_handling_fees,
                        device_id: country.device_id,
                        device_name: country.device_name,
                        created_at: country.created_at,
                        currency_label: country.currency_label,
                        country_flag: country.country_flag,
                        country_prefixe: country.country_prefixe,
                        code_country: country.code_country,
                        default_country: country.default_country,
                        country_label: value,
                        country_key: countryLabel
                    });
                });
            }
        });
        return states;
    }
    // Calucalte the payment with handlfees
    getHandleFeesWithDevise(amountShare, devise, handleFees, handleFeesType) {
        let amount = 0;
        amount = parseFloat(amountShare) > 0 ? parseFloat(amountShare) : 0;
        if (handleFees !== 0) {
            const handlefees = handleFees ? parseFloat(handleFees) : 1;
            if (handleFeesType === 'pourcentage') {
                amount = amount * (1 + (handlefees / 100));
            }
            else {
                amount = amount + handlefees;
            }
        }
        if (devise === 'XAF' || devise === 'ZAR' || devise === 'XOF') {
            return Math.ceil(amount);
        }
        else {
            return parseFloat(Number(amount).toFixed(2));
        }
    }
    notIn(paymentMethods, paymentName) {
        let methodNotIn = true;
        paymentMethods.forEach(pay => {
            if (`${pay.name}${pay.currency}` === `${paymentName.name}${paymentName.currency}`) {
                methodNotIn = false;
            }
        });
        return methodNotIn;
    }
    // filter the payment method by currency
    filterPaymentMethodByCurrency(allPaymentMethods, userWallet) {
        let i = 0;
        const paymentMethods = [];
        while (i < userWallet.length) {
            allPaymentMethods.forEach(payment => {
                if (payment.currency === userWallet[i].device_name && this.notIn(paymentMethods, payment)) {
                    paymentMethods.push(payment);
                }
            });
            i++;
        }
        return paymentMethods;
    }
    // filter the payment method by currency
    filterPaymentMethodByDevise(allPaymentMethods, userWallet) {
        let i = 0;
        const paymentMethods = [];
        while (i < userWallet.length) {
            allPaymentMethods.forEach(payment => {
                if (payment.currency === userWallet[i].currency_name && this.notIn(paymentMethods, payment)) {
                    paymentMethods.push(payment);
                }
            });
            i++;
        }
        return paymentMethods;
    }
    // Get the payment name
    getPaymentName(paymentMethods, paymentId) {
        let paymentName = '';
        paymentMethods.forEach(method => {
            if (method && method.id === paymentId) {
                paymentName = method.name;
            }
        });
        return paymentName;
    }
};
PaymentGlobalDataService.ctorParameters = () => [
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_2__["TranslateService"] },
    { type: src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_3__["UserService"] }
];
PaymentGlobalDataService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], PaymentGlobalDataService);



/***/ }),

/***/ "TH4E":
/*!************************************************************************************!*\
  !*** ./src/app/dashboard/my-tontines/tontine-detail/loans/service/loan.service.ts ***!
  \************************************************************************************/
/*! exports provided: LoanService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoanService", function() { return LoanService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/dashboard/user/service/user.service */ "6Hie");
/* harmony import */ var src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/service/api.service */ "6rCG");
/* harmony import */ var src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/shared/service/events.service */ "r5fM");
/* harmony import */ var src_app_shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/shared/service/local-storage.service */ "y7ii");






let LoanService = class LoanService {
    constructor(api, userService, event, localStorage) {
        this.api = api;
        this.userService = userService;
        this.event = event;
        this.localStorage = localStorage;
        this.token = this.userService.getUserToken();
        this.event.subscribe('new-token', token => {
            this.token = token;
        });
    }
    // send loan data
    sendLoanData(data) {
        this.localStorage.setItem('loan-data', data);
    }
    // get loan data
    getLoanData() {
        const data = this.localStorage.getItem('loan-data');
        if (data) {
            return data;
        }
        else
            return [];
    }
    // send loan data
    RemoveLoanData() {
        this.localStorage.removeItem('loan-data');
    }
    // Edit the loans request
    editLoanRequest(data) {
        return this.api.post('loan/v1/edit/params/' + this.token, data);
    }
    // Get loan dashbord informations
    getLoansInformations(data) {
        return this.api.post('loan/v1/get/dashboard/' + this.token, data);
    }
    // Get loan cash available and  maximum current cash for loan
    getCashAvalaible() {
        return this.api.get('loan/v1/get/cash/and/current/maximum/loan/' + this.token);
    }
    // Make a loan request
    makeLoanRequest(data) {
        return this.api.post('loan/v1/request/' + this.token, data);
    }
    // Get a loan 
    getLoanRequest(data) {
        return this.api.post('loan/v1/get/all/requests/' + this.token, data);
    }
    // Approve a loan request 
    approveLoanRequest(data) {
        return this.api.post('loan/v1/approve/request/' + this.token, data);
    }
    //Reject a loan request
    rejectLoanRequest(data) {
        return this.api.post('loan/v1/reject/request/' + this.token, data);
    }
    // Get memeber loan information for a seance
    getMemberLoanDashBordSeance(data) {
        return this.api.post('loan/v1/get/detail/seance/loan/user/' + this.token, data);
    }
    // Get memeber loan information for a cycle
    getMemberLoanDashBordCycle(data) {
        return this.api.post('loan/v1/get/detail/cycle/loan/user/' + this.token, data);
    }
    // Get loan history
    getLoanHistory(cycleId) {
        return this.api.get('loan/v1/get/history/loan/user/' + cycleId + '/' + this.token);
    }
    // pay loan and interest's with wallet
    payloanAndInterest(data) {
        return this.api.post('loan/v1/repay/with/wallet/' + this.token, data);
    }
    // pay loan Interest with wallet
    payloanInterest(data) {
        return this.api.post('loan/v1/repay/just/interest/with/wallet/' + this.token, data);
    }
    // pay loan and interest's with wallet
    payManyloanAndInterestWithWallet(data) {
        return this.api.post('loan/v1/repay/many/loan/with/wallet/' + this.token, data);
    }
    // pay loan Interest with wallet
    payManyloanInterestWithWallet(data) {
        return this.api.post('loan/v1/repay/many/interest/with/wallet/' + this.token, data);
    }
    /* Pay loan and Interest's with operator without conversion */
    payloanAndInterestWithOperatorWithoutConversion(data) {
        return this.api.post('loan/v1/repay/with/payment/method/withoutConversion/' + this.token, data);
    }
    /* Pay loan and Interest's with operator without conversion */
    payloanAndInterestWithOperatorWithConversion(data) {
        return this.api.post('loan/v1/repay/with/payment/method/withConversion/' + this.token, data);
    }
    /* Pay loan Interest with operator without conversion */
    payloanInterestWithOperatorWithoutConversion(data) {
        return this.api.post('loan/v1/repay/just/interest/with/payment/method/withoutConversion/' + this.token, data);
    }
    /* Pay loan Interest with operator without conversion */
    payloanInterestWithOperatorWithConversion(data) {
        return this.api.post('loan/v1/repay/just/interest/with/payment/method/withConversion/' + this.token, data);
    }
    /* Pay many loans and Interest's with operator without conversion */
    payManyloanAndInterestWithOperatorWithoutConversion(data) {
        return this.api.post('loan/v1/repay/many/with/payment/method/withoutConversion/' + this.token, data);
    }
    /* Pay many loans and Interests with operator without conversion */
    payManyloanAndInterestWithOperatorWithConversion(data) {
        return this.api.post('loan/v1/repay/many/with/payment/method/withConversion/' + this.token, data);
    }
    /* Pay many loans Interest with operator without conversion */
    payManyloanInterestWithOperatorWithoutConversion(data) {
        return this.api.post('loan/v1/repay/many/just/interest/with/payment/method/withoutConversion/' + this.token, data);
    }
    /* Pay many loans Interest with operator without conversion */
    payManyloanInterestWithOperatorWithConversion(data) {
        return this.api.post('loan/v1/repay/many/just/interest/with/payment/method/withConversion/' + this.token, data);
    }
    /* Pay many loans and Interests with bank traditionnel */
    payManyLoanAndInterestWithBankTradi(data) {
        return this.api.post('loan/v1/repay/many/loan/with/traditional/' + this.token, data);
    }
    /* Pay many loans Interest  with bank traditionnel */
    payManyLoanInterestWithBankTradi(data) {
        return this.api.post('loan/v1/repay/many/interest/with/traditional/' + this.token, data);
    }
    /* Pay many loans and Interests with cash */
    payManyLoanAndInterestWithCash(data) {
        return this.api.post('loan/v1/repay/many/loan/with/cash/' + this.token, data);
    }
    /* Pay many loans Interest  with cash */
    payManyLoanInterestWithCash(data) {
        return this.api.post('loan/v1/repay/many/interest/with/cash/' + this.token, data);
    }
    /* Get the list of loans refund for a stokvel cycle*/
    getLoanRefundList(data) {
        return this.api.post('loan/v1/repay/get/all/requests/' + this.token, data);
    }
    /* Get the list of interest refund for a stokvel cycle */
    getInterestRefundList(data) {
        return this.api.post('loan/v1/repay/get/all/requests/interests/' + this.token, data);
    }
    /* validate a loan refund*/
    validateLoanRefund(data) {
        return this.api.post('loan/v1/validate/repay/loan/' + this.token, data);
    }
    /* Validate an interest refund*/
    validateInterestRefund(data) {
        return this.api.post('loan/v1/validate/repay/interest/' + this.token, data);
    }
    /* Reject a loan refund*/
    rejectLoanRefund(data) {
        return this.api.post('loan/v1/refuse/repay/loan/' + this.token, data);
    }
    /* Reject a interest refund*/
    rejectInterestRefund(data) {
        return this.api.post('loan/v1/refuse/repay/interest/' + this.token, data);
    }
    getPercentage(data) {
        if (data > 0 && data <= 10) {
            return 'donut donut10';
        }
        else if (data >= 11 && data <= 20) {
            return 'donut donut20';
        }
        else if (data >= 21 && data <= 30) {
            return 'donut donut30';
        }
        else if (data >= 31 && data <= 40) {
            return 'donut donut40';
        }
        else if (data >= 41 && data <= 50) {
            return 'donut donut50';
        }
        else if (data >= 51 && data <= 60) {
            return 'donut donut60';
        }
        else if (data >= 61 && data <= 70) {
            return 'donut donut70';
        }
        else if (data >= 71 && data <= 80) {
            return 'donut donut80';
        }
        else if (data >= 81 && data <= 90) {
            return 'donut donut90';
        }
        else if (data >= 91 && data <= 99) {
            return 'donut donut90';
        }
        else if (data === 100) {
            return 'donut donut100';
        }
        else {
            return 'donut donut0';
        }
    }
};
LoanService.ctorParameters = () => [
    { type: src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_3__["ApiService"] },
    { type: src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_2__["UserService"] },
    { type: src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_4__["EventService"] },
    { type: src_app_shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_5__["LocalStorageService"] }
];
LoanService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], LoanService);



/***/ }),

/***/ "Th73":
/*!*************************************************************************!*\
  !*** ./src/app/shared/paidmode-tontine/paidmode-tontine.component.scss ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwYWlkbW9kZS10b250aW5lLmNvbXBvbmVudC5zY3NzIn0= */");

/***/ }),

/***/ "TkUd":
/*!*************************************************!*\
  !*** ./src/app/shared/service/error.service.ts ***!
  \*************************************************/
/*! exports provided: ErrorService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorService", function() { return ErrorService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/dashboard/user/service/user.service */ "6Hie");
/* harmony import */ var src_app_auth_service_auth_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/auth/service/auth.service */ "RmnQ");
/* harmony import */ var _ui_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui.service */ "QB/Y");
/* harmony import */ var _local_storage_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./local-storage.service */ "y7ii");
/* harmony import */ var _events_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./events.service */ "r5fM");








let ErrorService = class ErrorService {
    constructor(ui, userService, auth, translate, event, localStorage) {
        this.ui = ui;
        this.userService = userService;
        this.auth = auth;
        this.translate = translate;
        this.event = event;
        this.localStorage = localStorage;
    }
    // update the user lang
    updateLang(lang) {
        this.userService.updateUserLang({ langue_user: lang }).subscribe((data) => {
            // set the user lang
            if (data && data.message === "success") {
                this.userService.setCurrentUserSessionLanguage(lang);
            }
        }, error => {
            if (error && error.error && error.error.user_not_found) {
                this.renewSession().then((data) => {
                    if (data && data.result === "OK") {
                        this.updateLang(lang);
                    }
                });
            }
            else {
                this.manageError(error);
            }
        });
    }
    // Renew the user session
    renewSession(showMessage) {
        return new Promise((resolve) => {
            if (this.localStorage.getItem('startRefreshToken') === 'false') {
                const credentials = this.userService.getUserSecret();
                if (credentials) {
                    this.localStorage.setItem('startRefreshToken', 'true');
                    this.auth.authentication(credentials).subscribe((reponse) => {
                        if (reponse && reponse.message === 'success') {
                            this.event.publish('new-token', reponse.token);
                            setTimeout(() => {
                                this.userService.setUserToken(reponse.token);
                                this.userService.setUserRole(reponse.role);
                                this.userService.setUserData(reponse.user);
                                this.userService.setUserBadge(reponse.badge_name);
                                // Get the current user lang
                                this.userService.setCurrentUserSessionLanguage(reponse.user.langue_user ? reponse.user.langue_user : '');
                                if (showMessage) {
                                    this.translate.get('TRY_AGAIN_MSG').subscribe(value => {
                                        this.ui.presentToast(value);
                                    });
                                }
                                this.localStorage.setItem('startRefreshToken', 'false');
                                resolve({ result: 'OK' });
                            }, 4000);
                        }
                    }, error => {
                        if (error && error.error && error.error.user_not_found) {
                            this.auth.logoutMember();
                        }
                        else {
                            if (error.status === 0) {
                                this.translate.get('ERROR_MGS3').subscribe(value => {
                                    this.ui.presentToast(value);
                                });
                            }
                        }
                        resolve({ result: 'ERROR' });
                    });
                }
                else {
                    this.auth.logoutMember();
                    resolve({ result: 'ERROR' });
                }
            }
            else {
                setTimeout(() => {
                    resolve({ result: 'OK' });
                }, 6000);
            }
        });
    }
    // Manage system error
    manageError(error) {
        if (error.status === 0) {
            this.translate.get('ERROR_MGS3').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        else if (error.status === 400) {
            this.renewSession();
        }
        else if (error.status === 401) {
            this.auth.logoutMember();
        }
        else if (error.status === 500) {
            this.translate.get('ERROR_MGS6').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
        else {
            this.translate.get('ERROR_MGS6').subscribe(value => {
                this.ui.presentToast(value);
            });
        }
    }
};
ErrorService.ctorParameters = () => [
    { type: _ui_service__WEBPACK_IMPORTED_MODULE_5__["UiService"] },
    { type: src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_3__["UserService"] },
    { type: src_app_auth_service_auth_service__WEBPACK_IMPORTED_MODULE_4__["AuthService"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_2__["TranslateService"] },
    { type: _events_service__WEBPACK_IMPORTED_MODULE_7__["EventService"] },
    { type: _local_storage_service__WEBPACK_IMPORTED_MODULE_6__["LocalStorageService"] }
];
ErrorService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], ErrorService);



/***/ }),

/***/ "To8A":
/*!*******************************************************************!*\
  !*** ./src/app/shared/bankmode-loan/bankmode-loan.component.scss ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJiYW5rbW9kZS1sb2FuLmNvbXBvbmVudC5zY3NzIn0= */");

/***/ }),

/***/ "US41":
/*!************************************************************************!*\
  !*** ./src/app/dashboard/my-tontines/services/contribution.service.ts ***!
  \************************************************************************/
/*! exports provided: ContributionService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContributionService", function() { return ContributionService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/shared/service/api.service */ "6rCG");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var src_app_shared_service_error_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/shared/service/error.service */ "TkUd");
/* harmony import */ var _user_service_user_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../user/service/user.service */ "6Hie");
/* harmony import */ var src_app_shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/shared/service/local-storage.service */ "y7ii");
/* harmony import */ var src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/shared/service/events.service */ "r5fM");








let ContributionService = class ContributionService {
    constructor(api, userService, error, event, localStorage) {
        this.api = api;
        this.userService = userService;
        this.error = error;
        this.event = event;
        this.localStorage = localStorage;
        this.subject = new rxjs__WEBPACK_IMPORTED_MODULE_3__["Subject"]();
        this.token = this.userService.getUserToken();
        this.event.subscribe('new-token', token => {
            this.token = token;
        });
    }
    sendMessageContribute(message) {
        this.subject.next({ contribute: message });
    }
    getMessageContribute() {
        return this.subject.asObservable();
    }
    // send the contribution Data
    sendContributionData(data) {
        this.localStorage.setItem('contrib-data', data);
    }
    // Get the contribution Data
    getContributionData() {
        return this.localStorage.getItem('contrib-data');
    }
    // Get all the currenies
    getCurrencies() {
        return this.api.get('contribution/v1/getAll/device');
    }
    // Show the user wallet
    getUserWallet() {
        this.token = this.userService.getUserToken();
        return this.api.get(`contribution/v1/affiche/portemonnaie/${this.token}`);
    }
    // save the conversion of a currency
    saveCurrencyConversion() {
        this.token = this.userService.getUserToken();
        return this.api.get('contribution/v1/convert/device/' + this.token);
    }
    // Get all contributions of tontines
    getTypeContributionTontine(refresh) {
        return new Promise((resolve) => {
            let typeContributions = this.localStorage.getItem('type-contribution');
            typeContributions = typeContributions ? typeContributions : [];
            if (refresh || typeContributions.length === 0) {
                this.api.get('contribution/v1/getAll/typecontribution').subscribe((reponse) => {
                    this.localStorage.setItem('type-contribution', reponse.typecontribution);
                    resolve(reponse.typecontribution);
                }, error => {
                    resolve(typeContributions);
                });
            }
            else {
                resolve(typeContributions);
            }
        });
    }
    // Get the seances that a member does not contribute
    getSeancesNotContribute(data) {
        this.token = this.userService.getUserToken();
        if (this.token) {
            return this.api.post('contribution/v1/get/seances/to/contribute/' + this.token, data);
        }
    }
    // Get the seances that has not contribute or that have penalties
    getSeancesContributeOrPenalties(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v1/get/seances/to/contribute/and/penalties/ofAMember/' + this.token, data);
    }
    // get Seances where has unpaid penalties
    getSeanceUnpaidPenality(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v1/get/seances/with/penalties/ofAMember/' + this.token, data);
    }
    // Permit to the user to contribute with wallet add pin
    contributeWithWallet(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v2/contribue/avec/portemonnaie/' + this.token, data);
    }
    // Contribute without make a conversion and without wallet
    contributeWithoutWalletAndConversion(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v2/contribue/sans/portemonnaie/NotConvertDevice/'
            + this.token, data);
    }
    // Contribute and convert without wallet
    contributeAndconvertWithoutWallet(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v2/contribue/sans/portemonnaie/WithConvertDevice/'
            + this.token, data);
    }
    // Contribute without make a conversion and without wallet
    contributeWithoutWalletAndConversionAllshare(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v2/contribue/toutes/ses/parts/sans/portemonnaie/NotConvertDevice/'
            + this.token, data);
    }
    // Contribute and convert without wallet
    contributeAndconvertWithoutWalletAllshare(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v2/contribue/toutes/ses/parts/sans/portemonnaie/WithConvertDevice/'
            + this.token, data);
    }
    // Contribute  with wallet after conversion
    contributeAndconvertWithWallet(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v2/charger/portemonnaie/afterConvertDevice/'
            + this.token, data);
    }
    // Convert a member wallet to another currency
    convertMemberWallet(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v1/convertDevice/Portemonnaie/'
            + this.token, data);
    }
    // Convert the currency automaticcaly before paid with the member wallet
    convertMemberWalletAutomatically(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v1/convertDevice/ToContribueWithPortemonnaie/'
            + this.token, data);
    }
    // Get the list of tontines  seances
    getSeanceTontine(tontineId) {
        this.token = this.userService.getUserToken();
        return this.api.get('contribution/v1/getAll/seance/' + tontineId + '/' + this.token);
    }
    // Get the current seance of a tontine
    getSeanceCurrentTontine(tontineId) {
        return this.api.get('contribution/v1/seance/courante/' + tontineId);
    }
    // Get level of member's contributions for a tontine seance
    getNiveauContributionMembreTontineForAseance(tontineId, seanceId) {
        this.token = this.userService.getUserToken();
        return this.api.get('contribution/v1/getAllMember/withContribution/' + tontineId + '/' + seanceId +
            '/' + this.token);
    }
    // Get level of member's contributions for all tontine seances
    getNiveauContributionMembreTontineForAllseance(tontineId, seanceId) {
        this.token = this.userService.getUserToken();
        return this.api.get('contribution/v1/getAllMemberTontine/withContribution/' + tontineId + '/' + seanceId +
            '/' + this.token);
    }
    // Save the seance of a tontine
    saveTontineSeance(seance) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v1/save/seance/tontine/' +
            '/' + this.token, seance);
    }
    // Get users tontines with members contribution by seance
    getMyTontineWithMembersContributionBySeance() {
        this.token = this.userService.getUserToken();
        return this.api.get('contribution/v1/getAllTontineUser/WithContributionMember' + this.token);
    }
    // Get the percentage of contributions for tontine seance
    getPercentageContributionTontineSeance(tontineId, seanceId) {
        this.token = this.userService.getUserToken();
        return this.api.get('contribution/v1/getPourcentageContributionTontine/' + tontineId + '/' + seanceId + '/' +
            this.token);
    }
    // Get the remaind amount contributions of member for a seance with token
    getRemaindContributionMemberForSeance(seanceId) {
        this.token = this.userService.getUserToken();
        return this.api.get('contribution/v1/getMontantRestantAContribuer/' + seanceId + '/' + this.token);
    }
    // Get the remaind amount contributions of member for a seance with user_id
    getEtatContributionUserTontine(seanceId, userId) {
        return this.api.get('contribution/v1/getMontantRestantAContribuerAvecUserId/' + seanceId + '/' + userId);
    }
    // Get the state of contribution of a user part
    getEtatContributionPartUserTontine(seanceId, userId, numeroPart) {
        return this.api.get('contribution/v1/getMontantRestantAContribuerPourUnePartAvecUserId/' + seanceId + '/' +
            numeroPart + '/' + userId);
    }
    // Get the amount that remaind for a contribution of a part WITH TOKEN
    remaindAmountForPartForAseance(seanceId, numeroPart, userId) {
        this.token = this.userService.getUserToken();
        return this.api.get('contribution/v1/getMontantRestantAContribuerPourUnePart/' + seanceId + '/' +
            numeroPart + '/' + this.token);
    }
    // confirm the contribution with wallet with negative balance
    confirmContributionWithWallet(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v1/confirm/contribue/avec/portemonnaie/' + this.token, data);
    }
    // confirm the contribution with wallet with without conversion
    confirmContributionWithWalletWithoutConversion(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v1/confirm/contribue/sans/portemonnaie/NotConvertDevice/'
            + this.token, data);
    }
    // confirm the contribution with wallet with  conversion
    confirmContributionWithWalletWithConversion(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v1/confirm/contribue/sans/portemonnaie/WithConvertDevice/'
            + this.token, data);
    }
    // confirm the contribution with wallet with after conversion
    confirmContributionWithWalletAfterConversion(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v1/confirm/convertDevice/ToContribueWithPortemonnaie/'
            + this.token, data);
    }
    // Get all level of  contribution of tontine  not ended
    getNiveauContributionNotEndMembreTontineSeances(tontineId) {
        this.token = this.userService.getUserToken();
        return this.api.get('contribution/v2/getAllMemberTontine/withContribution/' +
            tontineId + '/' + this.token);
    }
    // Get all level of  contribution of tontine seance not ended
    getNiveauContributionNotEndForAMembreTontineSeances(tontineId, seanceId) {
        this.token = this.userService.getUserToken();
        return this.api.get('contribution/v2/getAllMember/withContribution/' +
            tontineId + seanceId + '/' + this.token);
    }
    // contribute with wallet all part
    contributionAllShareWithWallet(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v2/contribue/toutes/parts/avec/portemonnaie/'
            + this.token, data);
    }
    // Get the list of members invite in a tontine
    getInvitationMembre() {
        this.token = this.userService.getUserToken();
        return this.api.get('tontine/invitation/v1/getAllTontineUserInvited/' + this.token);
    }
    // Get the list of member that has take seance
    getmembreJackpotSeance(seanceId) {
        this.token = this.userService.getUserToken();
        return this.api.get('bouffe/v1/getMemberAyantBouffe/' + seanceId + '/' + this.token);
    }
    // Get the cycle of current tontine
    getCycleCurrentTontine(tontineId) {
        this.token = this.userService.getUserToken();
        return this.api.get('bouffe/v1/getCycleCourantTontine/' + tontineId + '/' + this.token);
    }
    // Get the  cycle of the tontine
    getSeancesCycleTontine(cycleId) {
        this.token = this.userService.getUserToken();
        return this.api.get('bouffe/v1/getAllSeanceCycle/' + cycleId + '/' + this.token);
    }
    // Get the members that doesn't take the tontine
    getMembresPasBouffe(cycleId, tontineId) {
        this.token = this.userService.getUserToken();
        return this.api.get('bouffe/v1/getAllMemberNayantPasBouffePourUnCycle/' + tontineId + '/' + cycleId +
            '/' + this.token);
    }
    // Get the members that take the tontine
    getMembresAyantBouffe(cycleId, tontineId) {
        this.token = this.userService.getUserToken();
        if (this.token) {
            return this.api.get('bouffe/v1/getAllMemberAyantBouffePourUnCycle/' + tontineId + '/' + cycleId + '/' + this.token);
        }
    }
    // Get member who are already beneficiate
    getDataMembresAyantBouffe(cycleId, tontineId, tontineData, index) {
        return new Promise((resolve, reject) => {
            this.getMembresAyantBouffe(cycleId, tontineId).subscribe(data => {
                resolve({ ans: data, tontine: tontineData, index: index });
            }, error => {
                if (error && error.error && error.error.user_not_found) {
                    this.error.renewSession().then((data) => {
                        if (data && data.result === 'OK') {
                            this.getDataMembresAyantBouffe(cycleId, tontineId, tontineData, index);
                        }
                        else {
                            resolve([]);
                        }
                    });
                }
                else {
                    resolve([]);
                    this.error.manageError(error);
                }
            });
        });
    }
    // Get the penalities of the seance
    getPenaliteSeance(seanceId, tontineId) {
        this.token = this.userService.getUserToken();
        return this.api.get('penalite/v1/getPenaliteSeanceTontine/' + tontineId + '/' + seanceId + '/' +
            this.token);
    }
    // Get the list of penality not paid
    getPenalitesImpayeMembre(tontineId) {
        this.token = this.userService.getUserToken();
        return this.api.get('penalite/v1/getPenaliteMember/' + tontineId + '/' + this.token);
    }
    // Get the list of penality  paid
    getPenalitesPayeMembre(tontineId) {
        this.token = this.userService.getUserToken();
        return this.api.get('penalite/v1/getPenalitePayeByMember/' + tontineId + '/' + this.token);
    }
    // Get the seance penality of cycle
    getSeanceById(seanceId) {
        this.token = this.userService.getUserToken();
        return this.api.get('penalite/v1/getSeanceWithCycle/' + seanceId + '/' + this.token);
    }
    // Get all past seance contribution of a user
    getContributionSeancesPasseesPourAjoutPart(userId, numeroPart) {
        this.token = this.userService.getUserToken();
        return this.api.get('part/v1/seancePasseeTocContribueWithUserId/' + this.token + '/' +
            numeroPart + '/' + userId);
    }
    // Get all past seance contribution of a user
    getContributionSeancesPasseesPourAjoutPartUserCurrent(numeroPart, tontineId) {
        this.token = this.userService.getUserToken();
        return this.api.get('part/v1/seancePasseeTocContribue/' + tontineId + '/' + numeroPart + '/' +
            this.token);
    }
    // History of user transaction
    historiqueTransactionUtilsateurFromToken() {
        this.token = this.userService.getUserToken();
        return this.api.get('trace/v1/getAllTransactionPorteMonnaieUserWithToken/' + this.token);
    }
    // Get the amount of cotisation of a user
    getMontantCotisationSeance(seanceId) {
        return this.api.get('bouffe/v1/montant_total/byseance/' + seanceId);
    }
    // History of tontine transaction
    historiqueTransactionTontine(tontineId) {
        return this.api.get('trace/v1/getAllTransactionPorteMonnaieTontine/' + tontineId);
    }
    // Contribute without make a conversion and without wallet for event
    contributeWithoutWalletAndConversionForEvent(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v1/contribue/pour/un/event/sans/portemonnaie/NotConvertDevice/'
            + this.token, data);
    }
    // Contribute and convert without wallet for event
    contributeAndConvertWithoutWalletForEvent(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v1/contribue/pour/un/event/sans/portemonnaie/WithConvertDevice/'
            + this.token, data);
    }
    // contribute with wallet for event
    contributeEventWithWallet(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v1/contribue/pour/un/event/avec/portemonnaie/'
            + this.token, data);
    }
    /* Contribute for past seance  */
    // contribute with wallet 
    contributeWithWalletPastSeance(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v2/contribue/toutes/parts/avec/portemonnaie/old/seance/'
            + this.token, data);
    }
    // contribute with OPERATOR (Orange/ MTN / PAYPAL / OZOW) without conversion
    contributeWithOperatorWithoutConversionPastSeance(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v2/contribue/toutes/ses/parts/sans/portemonnaie/NotConvertDevice/old/seance/'
            + this.token, data);
    }
    // contribute with OPERATOR (Orange/ MTN / PAYPAL / OZOW) with conversion
    contributeWithOperatorWithConversionPastSeance(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('contribution/v2/contribue/toutes/ses/parts/sans/portemonnaie/WithConvertDevice/old/seance/'
            + this.token, data);
    }
    /* Caution management */
    // Add caution member
    payMemberCaution(data) {
        this.token = this.userService.getUserToken();
        return this.api.post('caution/member/pay/' + this.token, data);
    }
    // get members who have paid partial cautions
    paidOldSessionTontineCautionWithWallet(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`caution/contribute/all/share/withWallet/oldSeance/` + this.token, data);
    }
};
ContributionService.ctorParameters = () => [
    { type: src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_2__["ApiService"] },
    { type: _user_service_user_service__WEBPACK_IMPORTED_MODULE_5__["UserService"] },
    { type: src_app_shared_service_error_service__WEBPACK_IMPORTED_MODULE_4__["ErrorService"] },
    { type: src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_7__["EventService"] },
    { type: src_app_shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_6__["LocalStorageService"] }
];
ContributionService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], ContributionService);



/***/ }),

/***/ "UrY2":
/*!*************************************************************!*\
  !*** ./src/app/dashboard/pesuswap/services/swap.service.ts ***!
  \*************************************************************/
/*! exports provided: SwapService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SwapService", function() { return SwapService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var src_app_shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/shared/service/local-storage.service */ "y7ii");
/* harmony import */ var _user_service_user_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../user/service/user.service */ "6Hie");
/* harmony import */ var src_app_shared_service_ui_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/shared/service/ui.service */ "QB/Y");
/* harmony import */ var src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/shared/service/api.service */ "6rCG");
/* harmony import */ var src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/shared/service/events.service */ "r5fM");







let SwapService = class SwapService {
    constructor(api, ui, userService, event, localStorage) {
        this.api = api;
        this.ui = ui;
        this.userService = userService;
        this.event = event;
        this.localStorage = localStorage;
        this.token = this.userService.getUserToken();
        this.event.subscribe('new-token', token => {
            this.token = token;
        });
    }
    // Get the current swap data
    getCurrentSwapData() {
        const data = this.localStorage.getItem('swap-data');
        if (data) {
            return data;
        }
        else
            return [];
    }
    // Set the current swap data
    setCurrentSwapData(swapData) {
        this.localStorage.setItem('swap-data', swapData);
    }
    // Get the swap rate of Toupesu
    getSwapRate() {
        return this.api.get('pesu/swap/get/toupesu/rate');
    }
    // Get all the currencies available on user wallet  
    getAllWalletCurrenies() {
        this.token = this.userService.getUserToken();
        return this.api.get(`pesu/swap/get/currencies/user/${this.token}`);
    }
    // Get all the currencies available on the system
    getAllSystemCurrenies() {
        return this.api.get(`pesu/swap/get/currencies/system`);
    }
    // Get all type of swap
    getAllSwapType() {
        return this.api.get('pesu/swap/get/all/type/swap');
    }
    // make a swap request
    makeSwapRequest(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`pesu/swap/make/request/${this.token}`, data);
    }
    // Get all users swap request
    getAllUserSwapRequest() {
        this.token = this.userService.getUserToken();
        return this.api.get(`pesu/swap/get/own/requests/user/${this.token}`);
    }
    getAllUserSwapRequestV2() {
        this.token = this.userService.getUserToken();
        return this.api.get(`pesu/swap/v2/get/own/requests/user/${this.token}`);
    }
    // Get all reverse request 
    getReverseRequest(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`pesu/swap/get/inverse/requests/${this.token}`, data);
    }
    getReverseRequestV2(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`pesu/swap/v2/get/inverse/requests/${this.token}`, data);
    }
    // Get all request without filter 
    getRequestWithoutFilter() {
        this.token = this.userService.getUserToken();
        return this.api.get(`pesu/swap/get/all/requests/without/filter/currency/${this.token}`);
    }
    getRequestWithoutFilterV2() {
        this.token = this.userService.getUserToken();
        return this.api.get(`pesu/swap/v2/get/all/requests/without/filter/currency/${this.token}`);
    }
    // Disable edition
    disableSwapEdition(swapRequestId, statusEdit) {
        this.token = this.userService.getUserToken();
        return this.api.get(`pesu/swap/update/field/status/edit/swap/request/${swapRequestId}/${statusEdit}/${this.token}`);
    }
    // update swap request
    updateSwapRequest(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`pesu/swap/update/request/${this.token}`, data);
    }
    // Delete swap request
    deleteSwapRequest(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`pesu/swap/delete/request/${this.token}`, data);
    }
    // matches swap request
    mathSwapRequest(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`pesu/swap/match/request/${this.token}`, data);
    }
    // Get the swap in pending payment
    getSwapPendingRequest() {
        this.token = this.userService.getUserToken();
        return this.api.get(`pesu/swap/get/request/pending/waiting/to/pay/${this.token}`);
    }
    // Get the request that match the currencies
    getRequestMatchingCurrencies(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`pesu/swap/get/requests/inverses/with/amount/combinaisons/${this.token}`, data);
    }
    getRequestMatchingCurrenciesV2(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`pesu/swap/v2/get/requests/inverses/with/amount/combinaisons/${this.token}`, data);
    }
    // Paid pending swap request with wallet
    paidPendingSwapRequest(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`pesu/swap/pay/amount/swap/with/wallet/${this.token}`, data);
    }
    /* Make swap payment with operator without conversion */
    paySwapRequestWithOperatorWithoutConversion(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`pesu/swap/pay/amount/swap/without/wallet/withoutConversion/${this.token}`, data);
    }
    /* Make swap payment with operator with conversion */
    paySwapRequestWithOperatorWithConversion(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`pesu/swap/pay/amount/swap/without/wallet/withConversion/${this.token}`, data);
    }
    /* Make swap notifications with toke */
    getSwapNotificationsWithToken() {
        this.token = this.userService.getUserToken();
        return this.api.get(`notification/v2/pesuSwap/getAllNotificationWithToken/${this.token}`);
    }
    /* Make swap notifications with toke */
    getSwapNotificationsWithId(userId) {
        return this.api.get(`notification/v2/pesuSwap/getAllNotificationWithUserId/${userId}`);
    }
    /* Archive swap data */
    archiveSwapData(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`pesu/swap/archived/swap/user/${this.token}`, data);
    }
};
SwapService.ctorParameters = () => [
    { type: src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_5__["ApiService"] },
    { type: src_app_shared_service_ui_service__WEBPACK_IMPORTED_MODULE_4__["UiService"] },
    { type: _user_service_user_service__WEBPACK_IMPORTED_MODULE_3__["UserService"] },
    { type: src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_6__["EventService"] },
    { type: src_app_shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_2__["LocalStorageService"] }
];
SwapService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], SwapService);



/***/ }),

/***/ "VzVu":
/*!**************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/app.component.html ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-app>\n  <ion-router-outlet></ion-router-outlet>\n</ion-app>\n");

/***/ }),

/***/ "WaxE":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/contribution-loan/contribution-loan.component.html ***!
  \*****************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header>\r\n  <ion-toolbar>\r\n    <ion-title class=\"ion-text-center\">{{'DEBT_MAKE_PAYMENT' | translate }}</ion-title>\r\n  </ion-toolbar>\r\n  <ion-toolbar class=\"ion-text-left\">\r\n    <ion-segment  (ionChange)=\"segmentChanged($event)\" value=\"0\">\r\n      <ion-segment-button value=\"0\">\r\n        <ion-label class=\"ion-text-capitalize\">{{ 'ONLINE_TEXT' | translate }}</ion-label>\r\n      </ion-segment-button>\r\n\r\n      <ion-segment-button value=\"1\">\r\n        <ion-label class=\"ion-text-capitalize\">{{ 'CASH_PAYMENT' | translate }}</ion-label>\r\n      </ion-segment-button> \r\n\r\n      <ion-segment-button value=\"2\">\r\n        <ion-label class=\"ion-text-capitalize\">{{ 'BANK_TEXT' | translate }}</ion-label>\r\n      </ion-segment-button>\r\n    </ion-segment>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"tontine-contribute\">\r\n  <ion-grid>\r\n    <ion-row>\r\n      <ion-col>\r\n        <p class=\"ion-no-margin\">\r\n          {{ 'MAKING_PAYMENT_TEXT' | translate }} <b>{{ tontineName }}</b>.         \r\n        </p>\r\n        <h4 class=\"ion-no-margin\">\r\n          <small>\r\n            {{ 'LOAN_AMOUNT_TEXT' | translate }}: {{ (amountPay | commadumper)}} {{currency}} (<b class=\"text-danger\">{{ 'CURRENT_BALANCE' | translate }}:  {{ (balance | commadumper) }}  {{currency}}</b>)\r\n          </small>\r\n        </h4>\r\n      </ion-col>\r\n    </ion-row>\r\n    <ion-row>\r\n      <ion-col>\r\n\r\n        <div class=\"mobile\" *ngIf=\"isModeSelected[0]\">\r\n          <app-paidmode-loan [amountPay]=\"amountPay\" [type]=\"type\" [balance]=\"balance\"  ></app-paidmode-loan>\r\n        </div>\r\n  \r\n        <div class=\"bank\" *ngIf=\"isModeSelected[1]\">\r\n          <app-cashmode-loan [amountPay]=\"amountPay\" [type]=\"type\" [balance]=\"balance\"></app-cashmode-loan>\r\n        </div> \r\n\r\n        <div class=\"bank\" *ngIf=\"isModeSelected[2]\">\r\n          <app-bankmode-loan [amountPay]=\"amountPay\" [type]=\"type\" [balance]=\"balance\"></app-bankmode-loan>\r\n        </div>\r\n     \r\n      </ion-col>\r\n    </ion-row>\r\n  </ion-grid> \r\n</ion-content>\r\n\r\n<ion-footer class=\"ion-padding ion-text-center\">\r\n    <ion-grid>\r\n      <ion-row>\r\n        <ion-col>\r\n            <ion-button expand=\"full\" \r\n                  fill=\"outline\"\r\n                  color=\"warning\" \r\n                  class=\"ion-text-uppercase\"\r\n                  shape=\"round\" (click)=\"closeContribute('cancel')\">\r\n              {{ 'CANCEL_TEXT' | translate }}\r\n            </ion-button>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n</ion-footer>\r\n");

/***/ }),

/***/ "XRpN":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/tontine-invited-event/tontine-invited-event.component.html ***!
  \*************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-grid>\r\n  <ion-row>\r\n    <ion-col size=\"12\">\r\n      <ion-card class=\"mber-invited\">\r\n        <ion-card-content>\r\n            <form [formGroup]=\"formInvited\">\r\n              <ion-row>\r\n                <ion-col size=\"12\">\r\n                  <ion-item>\r\n                    <ion-label>{{ 'M_SEND_METHOD' | translate }}</ion-label>\r\n                    <ion-select  (ionChange)=\"validateFields(formInvited.value.sendMode)\" formControlName=\"sendMode\">\r\n                      <ion-select-option [value]=\"'sms'\">{{ 'M_SMS_TEXT' | translate }}</ion-select-option>      \r\n                      <ion-select-option [value]=\"'email'\">{{ 'EMAIL_TEXT' | translate }}</ion-select-option>     \r\n                    </ion-select>\r\n                  </ion-item> \r\n\r\n                  <ion-item *ngIf=\"formInvited.value.sendMode === 'sms'\" (click)=\"showCountries()\">\r\n                    <ion-label>{{'COUNTRY_TEXT' | translate}} : </ion-label>\r\n                    <p><strong> {{ formInvited.value.countryName }} </strong> </p>          \r\n                    <ion-icon name=\"chevron-down-outline\" slot=\"end\"></ion-icon>\r\n                  </ion-item>  \r\n                  <div class=\"validation-errors\">\r\n                    <ng-container *ngFor=\"let validation of validationMessages.sendMode\">\r\n                      <div class=\"error-message\" *ngIf=\"sendMode.hasError(validation.type) && (sendMode.dirty || sendMode.touched)\">\r\n                        <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                        {{ validation.message }}\r\n                      </div>\r\n                    </ng-container>\r\n                  </div>   \r\n                </ion-col>\r\n                <ion-col size=\"12\">\r\n                    <ul>\r\n                        <li *ngFor=\"let sendTo of sendList.controls\">\r\n                            {{ sendTo.value }} \r\n                            <ion-button fill=\"clear\" color=\"warning\" (click)=\"removeContact(sendTo)\">\r\n                                <ion-icon name=\"remove-circle-outline\" slot=\"icon-only\"></ion-icon>\r\n                            </ion-button>\r\n                        </li>\r\n                    </ul>\r\n                </ion-col>\r\n                <ion-col size=\"9\">\r\n                  <ion-item lines=\"none\">\r\n                    <ion-label>{{ 'TONTINE_INVITED_TEXT1' | translate }}</ion-label>\r\n                  </ion-item> \r\n                </ion-col>\r\n                <ion-col size=\"3\">\r\n                  <ion-button fill=\"clear\" [disabled]=\"canAddMember()\" color=\"warning\" (click)=\"addMberContact(mberContact)\">\r\n                      <ion-icon name=\"add-circle-outline\" slot=\"icon-only\"></ion-icon>\r\n                  </ion-button>                  \r\n              </ion-col>\r\n                <ion-col size=\"4\"  *ngIf=\"formInvited.value.sendMode === 'sms'\">\r\n                  <ion-item>\r\n                    <ion-label>+</ion-label>\r\n                    <ion-input   type=\"text\" placeholder=\"{{formInvited.value.phoneid}}\"></ion-input>\r\n                  </ion-item>\r\n                </ion-col>\r\n                <ion-col>\r\n                  <ion-item>\r\n                    <ion-input  (ionChange)=\"validateFields(formInvited.value.sendMode)\" formControlName=\"emailOrPhone\" [type]=\"formInvited.value.sendMode === 'sms'? 'tel' : 'email'\" placeholder=\"{{formInvited.value.sendMode === 'sms'  ? ('REGISTER_MPHONE' | translate) : ('M_EMAIL_MSG' | translate)}}\" \r\n                    #mberContact></ion-input>\r\n                  </ion-item> \r\n                </ion-col>\r\n                <ion-col size=\"12\" *ngIf=\"formInvited.value.emailOrPhone\">  \r\n                  <p *ngIf=\"canShowContactMessage()\">{{'M_MEMBER_CONTACT' | translate}} {{ 'TONTINE_INVITED_TEXT4' | translate }}.</p>\r\n                </ion-col >\r\n              </ion-row>\r\n              <ion-row>\r\n                <ion-col>\r\n                    <ion-button expand=\"full\" \r\n                          color=\"warning\" \r\n                          class=\"ion-text-uppercase\"\r\n                          shape=\"round\" [disabled]=\"canSendInvitation()\" (click)=\"sendInvitation()\">\r\n                          {{ 'TONTINE_INVITE_TEXT2' | translate }}\r\n                    </ion-button>\r\n                </ion-col>\r\n              </ion-row>\r\n            </form>\r\n        </ion-card-content>\r\n      </ion-card>\r\n    </ion-col>\r\n  </ion-row>\r\n</ion-grid>");

/***/ }),

/***/ "ZAI4":
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/*! exports provided: createTranslateLoader, AppModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createTranslateLoader", function() { return createTranslateLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppModule", function() { return AppModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/platform-browser */ "jhN1");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _ionic_native_splash_screen_ngx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ionic-native/splash-screen/ngx */ "54vc");
/* harmony import */ var _ionic_native_status_bar_ngx__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic-native/status-bar/ngx */ "VYYF");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var _ngx_translate_http_loader__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ngx-translate/http-loader */ "mqiu");
/* harmony import */ var _ionic_native_onesignal_ngx__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ionic-native/onesignal/ngx */ "wljF");
/* harmony import */ var _fortawesome_angular_fontawesome__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @fortawesome/angular-fontawesome */ "6NWb");
/* harmony import */ var _fortawesome_fontawesome_svg_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @fortawesome/fontawesome-svg-core */ "7O5W");
/* harmony import */ var _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @fortawesome/free-solid-svg-icons */ "wHSu");
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./app.component */ "Sy1n");
/* harmony import */ var _app_routing_module__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./app-routing.module */ "vY5A");
/* harmony import */ var _shared_shared_module__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./shared/shared.module */ "PCNd");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/common/http */ "tk/3");
/* harmony import */ var _ionic_native_camera_ngx__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @ionic-native/camera/ngx */ "a/9d");
/* harmony import */ var _ionic_native_unique_device_id_ngx__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @ionic-native/unique-device-id/ngx */ "/+Rg");
/* harmony import */ var _ionic_native_device_ngx__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @ionic-native/device/ngx */ "xS7M");
/* harmony import */ var _ionic_native_social_sharing_ngx__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @ionic-native/social-sharing/ngx */ "/XPu");
/* harmony import */ var _ionic_storage__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @ionic/storage */ "e8h1");
/* harmony import */ var _ionic_native_google_analytics_ngx__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @ionic-native/google-analytics/ngx */ "hVmN");
/* harmony import */ var ngx_socket_io__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ngx-socket-io */ "7JkF");
























const config = { url: 'https://dev.toupesu.com:8080', options: {} };
function createTranslateLoader(http) {
    return new _ngx_translate_http_loader__WEBPACK_IMPORTED_MODULE_8__["TranslateHttpLoader"](http, './assets/i18n/', '.json');
}
_fortawesome_fontawesome_svg_core__WEBPACK_IMPORTED_MODULE_11__["library"].add(_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_12__["faFrown"], _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_12__["faGrin"]);
let AppModule = class AppModule {
};
AppModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        declarations: [
            _app_component__WEBPACK_IMPORTED_MODULE_13__["AppComponent"]
        ],
        entryComponents: [],
        imports: [
            _angular_common_http__WEBPACK_IMPORTED_MODULE_16__["HttpClientModule"],
            ngx_socket_io__WEBPACK_IMPORTED_MODULE_23__["SocketIoModule"].forRoot(config),
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["BrowserModule"],
            _fortawesome_angular_fontawesome__WEBPACK_IMPORTED_MODULE_10__["FontAwesomeModule"],
            _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["IonicModule"].forRoot(),
            _ionic_storage__WEBPACK_IMPORTED_MODULE_21__["IonicStorageModule"].forRoot({
                name: '__toupesudb',
                driverOrder: ['indexeddb', 'sqlite', 'websql']
            }),
            _ngx_translate_core__WEBPACK_IMPORTED_MODULE_7__["TranslateModule"].forRoot({ loader: {
                    provide: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_7__["TranslateLoader"],
                    useFactory: (createTranslateLoader),
                    deps: [_angular_common_http__WEBPACK_IMPORTED_MODULE_16__["HttpClient"]]
                } }),
            _app_routing_module__WEBPACK_IMPORTED_MODULE_14__["AppRoutingModule"],
            _shared_shared_module__WEBPACK_IMPORTED_MODULE_15__["SharedModule"],
        ],
        providers: [
            _ionic_native_status_bar_ngx__WEBPACK_IMPORTED_MODULE_6__["StatusBar"],
            _ionic_native_splash_screen_ngx__WEBPACK_IMPORTED_MODULE_5__["SplashScreen"],
            _ionic_native_device_ngx__WEBPACK_IMPORTED_MODULE_19__["Device"],
            _ionic_native_unique_device_id_ngx__WEBPACK_IMPORTED_MODULE_18__["UniqueDeviceID"],
            _ionic_native_social_sharing_ngx__WEBPACK_IMPORTED_MODULE_20__["SocialSharing"],
            _ionic_native_google_analytics_ngx__WEBPACK_IMPORTED_MODULE_22__["GoogleAnalytics"],
            _ionic_native_onesignal_ngx__WEBPACK_IMPORTED_MODULE_9__["OneSignal"],
            _ionic_native_camera_ngx__WEBPACK_IMPORTED_MODULE_17__["Camera"],
            _ngx_translate_core__WEBPACK_IMPORTED_MODULE_7__["TranslateService"],
            { provide: _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouteReuseStrategy"], useClass: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["IonicRouteStrategy"] }
        ],
        bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_13__["AppComponent"]]
    })
], AppModule);



/***/ }),

/***/ "ZNwF":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/paidmode-debt/paidmode-debt.component.html ***!
  \*********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<form [formGroup]=\"userPayMethodForm\">\r\n  <p class=\"ion-text-center\"  *ngIf=\"loadingOperator\">\r\n    <ion-spinner  name=\"circles\"></ion-spinner>\r\n  </p>\r\n<ion-grid>\r\n  <ion-row>\r\n    <ion-col size=\"12\">\r\n      <ion-card class=\"paidmode\">\r\n        <ion-card-content class=\"ion-text-center\">    \r\n          <ion-row>\r\n            <ion-col size=\"12\">\r\n              <ion-item>\r\n                <ion-label>{{'COUNTRY_TEXT' | translate}}</ion-label>\r\n                <ion-select (ionChange)=\"updateCurrencyCountry(userPayMethodForm.value.country_id)\" formControlName=\"country_id\">\r\n                  <ion-select-option [value]=\"country.country_id\" *ngFor=\"let country of states\">{{ country.country_label }}</ion-select-option>          \r\n                </ion-select>\r\n              </ion-item>   \r\n              <div class=\"validation-errors\">\r\n                <ng-container *ngFor=\"let validation of validationMessages.country_id\">\r\n                  <div class=\"error-message\" *ngIf=\"country.hasError(validation.type) && (country.dirty || country.touched)\">\r\n                    <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                    {{ validation.message }}\r\n                  </div>\r\n                </ng-container>\r\n              </div>     \r\n            </ion-col>\r\n          </ion-row>       \r\n            <ion-row class=\"ion-justify-content-end\" *ngIf=\"userPayMethodForm.value.country_id && paymentMethods && paymentMethods.length > 0\">\r\n              <ion-col size=\"4\">\r\n                <ion-img [src]=\"paymentMethods&&paymentMethods[userPayMethodForm.value.typePaymentIndex] ? paymentMethods[userPayMethodForm.value.typePaymentIndex].logo : ' '\" class=\"logooperator\"></ion-img>\r\n              </ion-col>\r\n            </ion-row>  \r\n            <ion-row *ngIf=\"userPayMethodForm.value.country_id && paymentMethods && paymentMethods.length > 0\">\r\n              <ion-col size=\"12\">\r\n                <ion-item>\r\n                  <ion-label>{{ 'USER_PROFILE_TEXT4' | translate }}</ion-label>\r\n                  <ion-select (ionChange)=\"updatePaymentMethod(userPayMethodForm.value.typePaymentIndex)\" formControlName=\"typePaymentIndex\">\r\n                    <ion-select-option *ngFor=\"let operator of paymentMethods; let operatorId = index\" [value]=\"operatorId\">{{ operator.name }}</ion-select-option>           \r\n                  </ion-select>\r\n                </ion-item>   \r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.payementtype\">\r\n                    <div class=\"error-message\" *ngIf=\"payementtype.hasError(validation.type) && (payementtype.dirty || payementtype.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>   \r\n              </ion-col>\r\n            </ion-row> \r\n            <ion-row  *ngIf=\"checkMobileOperator()\">\r\n              <ion-col size=\"4\">\r\n                <ion-item  >\r\n                  <ion-label position=\"floating\">+</ion-label>\r\n                  <ion-input placeholder=\"{{userPayMethodForm.value.country_prefix}}\" type=\"text\"></ion-input>\r\n                </ion-item>        \r\n              </ion-col>\r\n              <ion-col size=\"8\">\r\n                <ion-item >\r\n                  <ion-label position=\"floating\">{{ 'REGISTER_MPHONE' | translate }}</ion-label>\r\n                  <ion-input (ionChange)=\"checckEmailOrPhone(userPayMethodForm.value.phone,userPayMethodForm.value.typePaymentIndex)\" type=\"tel\" formControlName=\"phone\"></ion-input>\r\n                </ion-item> \r\n              </ion-col>\r\n              <ion-col size=\"12\">\r\n                <div class=\"validation-errors\" *ngIf=\"errorPhone\">\r\n                  <div class=\"error-message\">\r\n                    <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                    <span [innerHTML]=\"'USER_DETAIL_TEXT11' | translate\"></span>\r\n                  </div>\r\n                </div>          \r\n              </ion-col>\r\n            </ion-row> \r\n            <ion-row class=\"ion-padding-bottom\">\r\n              <ion-col size=\"12\">\r\n                <ion-item>\r\n                  <ion-label position=\"floating\" >{{ 'AMOUNT_TEXT' | translate }}</ion-label>\r\n                  <ion-input  (ionChange)=\"updatePaypalAmount()\" type=\"number\" formControlName=\"montant\"></ion-input>\r\n                  <span slot=\"end\" class=\"slot-prefix ion-no-margin\"> {{ contributionData.device_name }} </span>\r\n                </ion-item> \r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.amount\">\r\n                    <div class=\"error-message\" *ngIf=\"montantContributeError.hasError(validation.type) && (montantContributeError.dirty || montantContributeError.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>          \r\n              </ion-col>\r\n            </ion-row>\r\n            <ion-row   *ngIf=\"canShowPaypalMessage()\">\r\n              <ion-col>\r\n                <div class=\"padding\">\r\n                  <p style=\"color: red\">{{paypalMessage}}</p>\r\n              </div>\r\n              </ion-col>\r\n            </ion-row>                        \r\n        </ion-card-content>\r\n      </ion-card>\r\n    </ion-col>      \r\n  </ion-row>\r\n  <ion-row>\r\n    <svg height=\"0\" width=\"0\" viewBox=\"0 0 27.7 28.93\">\r\n      <defs>\r\n        <clipPath id=\"pay-btn-shape1\" >\r\n          <path d=\"M2.57,17.21A11.18,11.18,0,0,1,9.17,5.77h.06l.17-.22.11-.23c-1-.73-1.56-1.42-1.39-2,.42-1.32,5-1.17,10.22.33S27.43,7.47,27,8.81c-.16.48-.86.76-1.88.86h0v.1a5,5,0,0,0,.08.66,3.77,3.77,0,0,0,.1.46l.07.23c2,4,1.7,8.37-1.73,12.53a12.23,12.23,0,0,1-18.42-.1A11.55,11.55,0,0,1,2.57,17.21Z\" />            \r\n        </clipPath>        \r\n      </defs>\r\n    </svg>\r\n    <ion-col size=\"12\" class=\"ion-text-center wrap-pay-btn\" *ngIf=\"canPay()\"  (click)=\"showPayment(userPayMethodForm.value)\">\r\n      <svg id=\"pay-btn1\" preserveAspectRatio=\"xMidYMid slice\" viewBox=\"0 0 27.7 28.93\">\r\n        <path  class=\"arc-part\" d=\"M5.91,6.89a12.25,12.25,0,0,0-4.14,9.27,11.14,11.14,0,0,0,.16,1.7,12.82,12.82,0,0,0,.42,1.66c.08.27.19.54.29.8A8.24,8.24,0,0,0,3,21.1a14.85,14.85,0,0,0,.82,1.5,12.25,12.25,0,0,0,3.5,3.62,13.49,13.49,0,0,0,8,2.21,15.81,15.81,0,0,0,1.7-.17,13.74,13.74,0,0,0,1.69-.37,12.79,12.79,0,0,0,5.65-3.5,11.63,11.63,0,0,0,1.88-2.83,12.11,12.11,0,0,0,1.06-3.27,11,11,0,0,0-.94-6.84A10.42,10.42,0,0,1,27.23,13a10.65,10.65,0,0,1,.63,1.71,11.3,11.3,0,0,1,.22,3.64,12.78,12.78,0,0,1-.94,3.56,12.11,12.11,0,0,1-1.88,3.17,12.84,12.84,0,0,1-1.31,1.33,13.32,13.32,0,0,1-1.49,1.12,14,14,0,0,1-3.37,1.59,13,13,0,0,1-1.82.43,17.17,17.17,0,0,1-1.88.21,14.31,14.31,0,0,1-3.77-.27,14.55,14.55,0,0,1-5.12-2.19,11.53,11.53,0,0,1-1.41-1.17A13.92,13.92,0,0,1,.92,18a10.3,10.3,0,0,1-.08-1.88A12.36,12.36,0,0,1,3.31,9.34,10.42,10.42,0,0,1,5.91,6.89ZM7.27,3.35a1.52,1.52,0,0,1-.08-.78,1.82,1.82,0,0,1,.32-.76A2.29,2.29,0,0,1,9,1,6.31,6.31,0,0,1,9.78.89h2.36a25.76,25.76,0,0,1,6.19,1,23.94,23.94,0,0,1,5.74,2.5,20.58,20.58,0,0,1,2.56,1.83,3.84,3.84,0,0,1,1,1.27,1.29,1.29,0,0,1,.08.84,1.24,1.24,0,0,1-.47.64,1.21,1.21,0,0,0,.29-.67,1,1,0,0,0-.21-.65,3.64,3.64,0,0,0-1.07-.94c-.86-.53-1.75-1-2.66-1.47A34.29,34.29,0,0,0,18,3.06,38.16,38.16,0,0,0,12,1.84c-.5-.06-1-.11-1.52-.15l-.73-.13a6.42,6.42,0,0,0-.73,0A1.88,1.88,0,0,0,7.77,2,1.57,1.57,0,0,0,7.27,3.35Z\" />\r\n        <g class=\"pay-btn-border\">\r\n          <rect x=\"1.35\" y=\"0.56\" width=\"25.09\" height=\"26.44\" class=\"inner-pot\" />\r\n        </g>\r\n        <path class=\"pot-entry\" d=\"M22,6.27c-1.13-.38-2.45-.85-3.86-1.22-1-.28-2.17-.57-3.11-.75-2.64-.47-4.52-.57-4.62-.09-.09.19.19.57.75.85A24.19,24.19,0,0,0,17.46,7.4a22.19,22.19,0,0,0,7.07,1.13c.38-.09.66-.19.66-.28C25.32,7.9,24.05,7.15,22,6.27Z\" />\r\n        <text class=\"pay-text\"><tspan style=\"letter-spacing: -0.05859375em\">P</tspan><tspan x=\"4.94\" y=\"0\" style=\"letter-spacing: -0.087890625em\">A</tspan><tspan x=\"10.56\" y=\"0\">Y</tspan></text>\r\n      </svg>     \r\n      <div class=\"glow-wrap\">\r\n        <i class=\"glow\"></i>\r\n      </div>          \r\n    </ion-col>\r\n  </ion-row> \r\n  <ion-row  *ngIf=\"paypalLoading\">\r\n    <ion-col>\r\n      <p class=\"ion-text-center ion-padding\">\r\n        <ion-spinner  name=\"circles\"></ion-spinner>\r\n      </p>\r\n    </ion-col>\r\n  </ion-row> \r\n  <ion-row *ngIf=\"canShowPaypalButton()\">\r\n    <ion-col class=\"ion-padding\" size=\"12\">\r\n      <div #paypalbuttoncontainer id=\"paypal-button-container\"></div> \r\n    </ion-col>\r\n  </ion-row>  \r\n</ion-grid>\r\n</form> \r\n");

/***/ }),

/***/ "ZcfY":
/*!***************************************************************************!*\
  !*** ./src/app/shared/contribution-loan/contribution-loan.component.scss ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjb250cmlidXRpb24tbG9hbi5jb21wb25lbnQuc2NzcyJ9 */");

/***/ }),

/***/ "ZjA/":
/*!***************************************************************!*\
  !*** ./src/app/shared/contribution/contribution.component.ts ***!
  \***************************************************************/
/*! exports provided: ContributionComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContributionComponent", function() { return ContributionComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_contribution_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./contribution.component.html */ "sGTw");
/* harmony import */ var _contribution_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contribution.component.scss */ "zIBB");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/tontine.service */ "/WEl");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../service/events.service */ "r5fM");







let ContributionComponent = class ContributionComponent {
    constructor(modatCtrl, tontine, event) {
        this.modatCtrl = modatCtrl;
        this.tontine = tontine;
        this.event = event;
        this.event.subscribe('modal-close', data => {
            if (data && data.result) {
                this.closeContribute(data.result);
            }
        });
        this.initSelect();
        this.currentTontine = this.tontine.getCurrentTontineData();
    }
    ngOnInit() {
        this.isModeSelected[0] = true;
    }
    // init select mode
    initSelect() {
        this.isModeSelected = [];
        for (let i = 0; i < 3; i++) {
            this.isModeSelected.push(false);
        }
    }
    segmentChanged(event) {
        let i = 0;
        while (i < this.isModeSelected.length) {
            if (i === parseInt(event.detail.value)) {
                this.isModeSelected[i] = true;
            }
            else {
                this.isModeSelected[i] = false;
            }
            i++;
        }
    }
    closeContribute(ans) {
        this.modatCtrl.dismiss(ans, 'cancel');
    }
};
ContributionComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["ModalController"] },
    { type: src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_5__["TontineService"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_6__["EventService"] }
];
ContributionComponent.propDecorators = {
    tontineName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    amountPay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    balance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    currency: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};
ContributionComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-contribution',
        template: _raw_loader_contribution_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_contribution_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], ContributionComponent);



/***/ }),

/***/ "a0Du":
/*!*****************************************************************!*\
  !*** ./src/app/shared/cashmode-loan/cashmode-loan.component.ts ***!
  \*****************************************************************/
/*! exports provided: CashmodeLoanComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CashmodeLoanComponent", function() { return CashmodeLoanComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_cashmode_loan_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./cashmode-loan.component.html */ "L7TT");
/* harmony import */ var _cashmode_loan_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cashmode-loan.component.scss */ "SfCI");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var _service_error_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../service/error.service */ "TkUd");
/* harmony import */ var src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/tontine.service */ "/WEl");
/* harmony import */ var _service_payment_error_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../service/payment-error.service */ "FLu1");
/* harmony import */ var src_app_dashboard_my_tontines_tontine_detail_loans_service_loan_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/dashboard/my-tontines/tontine-detail/loans/service/loan.service */ "TH4E");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../service/events.service */ "r5fM");
/* harmony import */ var _service_ui_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../service/ui.service */ "QB/Y");












let CashmodeLoanComponent = class CashmodeLoanComponent {
    constructor(fb, translate, events, tontine, error, loanService, ui, paymentError) {
        this.fb = fb;
        this.translate = translate;
        this.events = events;
        this.tontine = tontine;
        this.error = error;
        this.loanService = loanService;
        this.ui = ui;
        this.paymentError = paymentError;
        this.loadingPay = false;
        this.currentTontine = this.tontine.getCurrentTontineData();
        this.contributionData = this.loanService.getLoanData();
    }
    ngOnInit() {
        this.initFomMessage();
        this.initCashPayment();
    }
    // Getters
    get amount() {
        return this.paymentForm.get('montant_total');
    }
    // Init xash payment
    initCashPayment() {
        this.paymentForm = this.fb.group({
            currency: [this.contributionData.currency_name],
            montant_total: [{ value: this.amountPay, disabled: this.type === 'interest' ? true : false }, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].min(1), _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].max(this.amountPay)])],
            proofMessage: [''],
            receipt: [''],
            liste_proof: [[]]
        });
    }
    // Init the form message
    initFomMessage() {
        this.translate.get(['REGISTER_PHONE_REQUIRED', 'AMOUNT_REQUIRED', 'PAID_MODE_REQUIRED', 'M_COUNTRY_REQUIRED'])
            .subscribe(value => {
            this.validationMessages = {
                payementtype: [
                    { type: 'required', message: value.PAID_MODE_REQUIRED }
                ],
                phone: [
                    { type: 'required', message: value.REGISTER_PHONE_REQUIRED },
                ],
                amount: [
                    { type: 'required', message: value.AMOUNT_REQUIRED }
                ],
                country_id: [
                    { type: 'required', message: value.M_COUNTRY_REQUIRED }
                ]
            };
        });
    }
    // update parameters
    updateParameters(data) {
        let amountToPay = parseFloat(this.paymentForm.value.montant_total);
        const itemList = data.list_loan;
        let currentAmount = 0;
        const itemUpdates = [];
        itemList.forEach(loan => {
            currentAmount = amountToPay - parseFloat(loan.amount);
            if (currentAmount >= 0) {
                itemUpdates.push(loan);
                amountToPay = currentAmount;
            }
            else {
                if (amountToPay > 0) {
                    itemUpdates.push({ loan_request_id: loan.loan_request_id, amount: amountToPay });
                }
                amountToPay = 0;
            }
        });
        data.list_loan = itemUpdates;
        return data;
    }
    // paid loan with cash
    paidWithCash(contributionData) {
        this.paymentForm.get('liste_proof').setValue([{
                montant: contributionData.type === 'loan-interest' ? this.paymentForm.value.montant_total : this.amountPay,
                description: this.paymentForm.value.proofMessage,
                receipt: this.paymentForm.value.receipt
            }]);
        switch (contributionData.type) {
            case 'loan-interest':
                const param1 = this.updateParameters(contributionData);
                param1.liste_proof = this.paymentForm.value.liste_proof;
                param1.montant_total = this.paymentForm.value.montant_total;
                this.paidWithCashLoanAndInterest(param1);
                break;
            case 'interest':
                const param2 = contributionData;
                param2.liste_proof = this.paymentForm.value.liste_proof;
                param2.montant_total = this.amountPay;
                this.paidWithCashInterest(param2);
                break;
            default:
                break;
        }
    }
    // Paid the contribution with cash
    paidWithCashLoanAndInterest(contributionData) {
        this.loadingPay = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        this.loanService.payManyLoanAndInterestWithCash(contributionData)
            .subscribe((reponse) => {
            this.loadingPay = false;
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG1').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.initCashPayment();
                this.events.publish('modal-close', { result: 'complete' });
            }
        }, error => {
            this.loadingPay = false;
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.loadingPay = true;
                    this.error.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithCashLoanAndInterest(contributionData);
                        }
                        else {
                            this.ui.dismissLoading();
                            this.loadingPay = false;
                        }
                    });
                }
                else {
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.ui.dismissLoading();
                this.error.manageError(error);
            }
        });
    }
    paidWithCashInterest(contributionData) {
        this.loadingPay = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        this.loanService.payManyLoanInterestWithCash(contributionData)
            .subscribe((reponse) => {
            this.loadingPay = false;
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG1').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.initCashPayment();
                this.events.publish('modal-close', { result: 'complete' });
            }
        }, error => {
            this.loadingPay = false;
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.loadingPay = true;
                    this.error.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithCashInterest(contributionData);
                        }
                        else {
                            this.ui.dismissLoading();
                            this.loadingPay = false;
                        }
                    });
                }
                else {
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.ui.dismissLoading();
                this.error.manageError(error);
            }
        });
    }
};
CashmodeLoanComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_5__["TranslateService"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_10__["EventService"] },
    { type: src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_7__["TontineService"] },
    { type: _service_error_service__WEBPACK_IMPORTED_MODULE_6__["ErrorService"] },
    { type: src_app_dashboard_my_tontines_tontine_detail_loans_service_loan_service__WEBPACK_IMPORTED_MODULE_9__["LoanService"] },
    { type: _service_ui_service__WEBPACK_IMPORTED_MODULE_11__["UiService"] },
    { type: _service_payment_error_service__WEBPACK_IMPORTED_MODULE_8__["PaymentErrorService"] }
];
CashmodeLoanComponent.propDecorators = {
    amountPay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    balance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};
CashmodeLoanComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-cashmode-loan',
        template: _raw_loader_cashmode_loan_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_cashmode_loan_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], CashmodeLoanComponent);



/***/ }),

/***/ "aANF":
/*!***************************************************************************************!*\
  !*** ./src/app/shared/paidmode-seance-caution/paidmode-seance-caution.component.scss ***!
  \***************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwYWlkbW9kZS1zZWFuY2UtY2F1dGlvbi5jb21wb25lbnQuc2NzcyJ9 */");

/***/ }),

/***/ "dCHs":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/paidmode-seance/paidmode-seance.component.html ***!
  \*************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<form [formGroup]=\"userPayMethodForm\">\r\n  <p class=\"ion-text-center\"  *ngIf=\"loadingOperator\">\r\n    <ion-spinner  name=\"circles\"></ion-spinner>\r\n  </p>\r\n<ion-grid>\r\n  <ion-row>\r\n    <ion-col size=\"12\">\r\n      <ion-card class=\"paidmode\">\r\n        <ion-card-content class=\"ion-text-center\">    \r\n          <ion-row>\r\n            <ion-col size=\"12\">\r\n              <ion-item>\r\n                <ion-label>{{'COUNTRY_TEXT' | translate}}</ion-label>\r\n                <ion-select (ionChange)=\"updateCurrencyCountry(userPayMethodForm.value.country_id)\" name=\"country_id\" formControlName=\"country_id\">\r\n                  <ion-select-option [value]=\"country.country_id\" *ngFor=\"let country of states\">{{ country.country_label }}</ion-select-option>          \r\n                </ion-select>\r\n              </ion-item>   \r\n              <div class=\"validation-errors\">\r\n                <ng-container *ngFor=\"let validation of validationMessages.country_id\">\r\n                  <div class=\"error-message\" *ngIf=\"country.hasError(validation.type) && (country.dirty || country.touched)\">\r\n                    <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                    {{ validation.message }}\r\n                  </div>\r\n                </ng-container>\r\n              </div>     \r\n            </ion-col>\r\n          </ion-row>       \r\n            <ion-row class=\"ion-justify-content-end\" *ngIf=\"userPayMethodForm.value.country_id && paymentMethods && paymentMethods.length > 0\">\r\n              <ion-col size=\"4\">\r\n                <ion-img [src]=\"paymentMethods && paymentMethods[userPayMethodForm.value.typePaymentIndex] ? paymentMethods[userPayMethodForm.value.typePaymentIndex].logo : ' '\" class=\"logooperator\"></ion-img>\r\n              </ion-col>\r\n            </ion-row>  \r\n            <ion-row  *ngIf=\"userPayMethodForm.value.country_id && paymentMethods && paymentMethods.length > 0\">\r\n              <ion-col size=\"12\">\r\n                <ion-item>\r\n                  <ion-label>{{ 'USER_PROFILE_TEXT4' | translate }}</ion-label>\r\n                  <ion-select (ionChange)=\"updatePaymentMethod(userPayMethodForm.value.typePaymentIndex)\" name=\"typePaymentIndex\" formControlName=\"typePaymentIndex\">\r\n                    <ion-select-option *ngFor=\"let operator of paymentMethods; let operatorId = index\"\r\n                    [value]=\"operatorId\">{{ operator.name }}</ion-select-option>           \r\n                  </ion-select>\r\n                </ion-item>   \r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.payementtype\">\r\n                    <div class=\"error-message\" *ngIf=\"payementtype.hasError(validation.type) && (payementtype.dirty || payementtype.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>   \r\n              </ion-col>\r\n            </ion-row> \r\n            <ion-row  *ngIf=\"checkMobileOperator()\">\r\n              <ion-col size=\"4\">\r\n                <ion-item >\r\n                  <ion-label position=\"floating\">+</ion-label>\r\n                  <ion-input placeholder=\"{{userPayMethodForm.value.country_prefix}}\" type=\"text\"></ion-input>\r\n                </ion-item>        \r\n              </ion-col>\r\n              <ion-col size=\"8\">\r\n                <ion-item>\r\n                  <ion-label position=\"floating\">{{ 'REGISTER_MPHONE' | translate }}</ion-label>\r\n                  <ion-input (ionChange)=\"checckEmailOrPhone(userPayMethodForm.value.phone,userPayMethodForm.value.typePaymentIndex)\" type=\"tel\" formControlName=\"phone\"></ion-input>\r\n                </ion-item> \r\n              </ion-col>\r\n              <ion-col size=\"12\">\r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.phone\">\r\n                    <div class=\"error-message\" *ngIf=\"phone.hasError(validation.type) && (phone.dirty || phone.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>\r\n                <div class=\"validation-errors\" *ngIf=\"errorPhone\">\r\n                    <div class=\"error-message\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      <span [innerHTML]=\"'USER_DETAIL_TEXT11' | translate\"></span>\r\n                    </div>\r\n                </div>\r\n                     \r\n              </ion-col>\r\n            </ion-row> \r\n            <ion-row>\r\n              <ion-col>\r\n                <div class=\"padding\"\r\n                *ngIf=\"canShowPaypalMessage()\">\r\n                <p style=\"color: red\">{{paypalMessage}}</p>\r\n              </div>\r\n              </ion-col>\r\n            </ion-row>                           \r\n        </ion-card-content>\r\n      </ion-card>\r\n    </ion-col>      \r\n  </ion-row>\r\n  <ion-row>\r\n    <svg height=\"0\" width=\"0\" viewBox=\"0 0 27.7 28.93\">\r\n      <defs>\r\n        <clipPath id=\"pay-btn-shape\" >\r\n          <path d=\"M2.57,17.21A11.18,11.18,0,0,1,9.17,5.77h.06l.17-.22.11-.23c-1-.73-1.56-1.42-1.39-2,.42-1.32,5-1.17,10.22.33S27.43,7.47,27,8.81c-.16.48-.86.76-1.88.86h0v.1a5,5,0,0,0,.08.66,3.77,3.77,0,0,0,.1.46l.07.23c2,4,1.7,8.37-1.73,12.53a12.23,12.23,0,0,1-18.42-.1A11.55,11.55,0,0,1,2.57,17.21Z\" />            \r\n        </clipPath>        \r\n      </defs>\r\n    </svg>\r\n    <ion-col size=\"12\" class=\"ion-text-center wrap-pay-btn\" *ngIf=\"canPay()\"  (click)=\"showPayment(userPayMethodForm.value)\">\r\n      <svg id=\"pay-btn\" preserveAspectRatio=\"xMidYMid slice\" viewBox=\"0 0 27.7 28.93\">\r\n        <path  class=\"arc-part\" d=\"M5.91,6.89a12.25,12.25,0,0,0-4.14,9.27,11.14,11.14,0,0,0,.16,1.7,12.82,12.82,0,0,0,.42,1.66c.08.27.19.54.29.8A8.24,8.24,0,0,0,3,21.1a14.85,14.85,0,0,0,.82,1.5,12.25,12.25,0,0,0,3.5,3.62,13.49,13.49,0,0,0,8,2.21,15.81,15.81,0,0,0,1.7-.17,13.74,13.74,0,0,0,1.69-.37,12.79,12.79,0,0,0,5.65-3.5,11.63,11.63,0,0,0,1.88-2.83,12.11,12.11,0,0,0,1.06-3.27,11,11,0,0,0-.94-6.84A10.42,10.42,0,0,1,27.23,13a10.65,10.65,0,0,1,.63,1.71,11.3,11.3,0,0,1,.22,3.64,12.78,12.78,0,0,1-.94,3.56,12.11,12.11,0,0,1-1.88,3.17,12.84,12.84,0,0,1-1.31,1.33,13.32,13.32,0,0,1-1.49,1.12,14,14,0,0,1-3.37,1.59,13,13,0,0,1-1.82.43,17.17,17.17,0,0,1-1.88.21,14.31,14.31,0,0,1-3.77-.27,14.55,14.55,0,0,1-5.12-2.19,11.53,11.53,0,0,1-1.41-1.17A13.92,13.92,0,0,1,.92,18a10.3,10.3,0,0,1-.08-1.88A12.36,12.36,0,0,1,3.31,9.34,10.42,10.42,0,0,1,5.91,6.89ZM7.27,3.35a1.52,1.52,0,0,1-.08-.78,1.82,1.82,0,0,1,.32-.76A2.29,2.29,0,0,1,9,1,6.31,6.31,0,0,1,9.78.89h2.36a25.76,25.76,0,0,1,6.19,1,23.94,23.94,0,0,1,5.74,2.5,20.58,20.58,0,0,1,2.56,1.83,3.84,3.84,0,0,1,1,1.27,1.29,1.29,0,0,1,.08.84,1.24,1.24,0,0,1-.47.64,1.21,1.21,0,0,0,.29-.67,1,1,0,0,0-.21-.65,3.64,3.64,0,0,0-1.07-.94c-.86-.53-1.75-1-2.66-1.47A34.29,34.29,0,0,0,18,3.06,38.16,38.16,0,0,0,12,1.84c-.5-.06-1-.11-1.52-.15l-.73-.13a6.42,6.42,0,0,0-.73,0A1.88,1.88,0,0,0,7.77,2,1.57,1.57,0,0,0,7.27,3.35Z\" />\r\n        <g class=\"pay-btn-border\">\r\n          <rect x=\"1.35\" y=\"0.56\" width=\"25.09\" height=\"26.44\" class=\"inner-pot\" />\r\n        </g>\r\n        <path class=\"pot-entry\" d=\"M22,6.27c-1.13-.38-2.45-.85-3.86-1.22-1-.28-2.17-.57-3.11-.75-2.64-.47-4.52-.57-4.62-.09-.09.19.19.57.75.85A24.19,24.19,0,0,0,17.46,7.4a22.19,22.19,0,0,0,7.07,1.13c.38-.09.66-.19.66-.28C25.32,7.9,24.05,7.15,22,6.27Z\" />\r\n        <text class=\"pay-text\"><tspan style=\"letter-spacing: -0.05859375em\">P</tspan><tspan x=\"4.94\" y=\"0\" style=\"letter-spacing: -0.087890625em\">A</tspan><tspan x=\"10.56\" y=\"0\">Y</tspan></text>\r\n      </svg>       \r\n      <div class=\"glow-wrap\">\r\n        <i class=\"glow\"></i>\r\n      </div>          \r\n    </ion-col>\r\n  </ion-row> \r\n  <ion-row  *ngIf=\"paypalLoading\">\r\n    <ion-col>\r\n      <p class=\"ion-text-center ion-padding\">\r\n        <ion-spinner  name=\"circles\"></ion-spinner>\r\n      </p>\r\n    </ion-col>\r\n  </ion-row> \r\n  <ion-row *ngIf=\"canShowPaypalButton()\">\r\n    <ion-col class=\"ion-padding\" size=\"12\">\r\n      <div #paypalbuttoncontainer id=\"paypal-button-container\"></div> \r\n    </ion-col>\r\n  </ion-row> \r\n</ion-grid>\r\n</form> \r\n");

/***/ }),

/***/ "dotL":
/*!******************************************************!*\
  !*** ./src/app/shared/pipes/string-truncate.pipe.ts ***!
  \******************************************************/
/*! exports provided: StringTruncatePipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringTruncatePipe", function() { return StringTruncatePipe; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");


let StringTruncatePipe = class StringTruncatePipe {
    transform(value, param) {
        if (value) {
            const currentString = String(value);
            return currentString && currentString.length < param ? currentString : currentString.substring(0, param) + '...';
        }
        else {
            return '';
        }
    }
};
StringTruncatePipe = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"])({
        name: 'stringTruncate'
    })
], StringTruncatePipe);



/***/ }),

/***/ "e009":
/*!****************************************************!*\
  !*** ./src/app/shared/service/location.service.ts ***!
  \****************************************************/
/*! exports provided: LocationService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocationService", function() { return LocationService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common/http */ "tk/3");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var _local_storage_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./local-storage.service */ "y7ii");
/* harmony import */ var _util_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util.service */ "6wVa");
/* harmony import */ var _api_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./api.service */ "6rCG");








let LocationService = class LocationService {
    constructor(http, api, translate, localStorage, util) {
        this.http = http;
        this.api = api;
        this.translate = translate;
        this.localStorage = localStorage;
        this.util = util;
        this.baseUrl = 'https://restcountries.eu/rest/v2/';
        this.subject = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
    }
    sendTranslation(dataTranslation) {
        this.subject.next({ translation: dataTranslation });
    }
    getTranslation() {
        return this.subject.asObservable();
    }
    // set the current country code
    setAllCountriesData(countries) {
        this.localStorage.setItem('countries', countries);
    }
    // Get the currentCounty code
    getAllCountriesData() {
        const countries = this.localStorage.getItem('countries');
        return countries ? countries : [];
    }
    // set the current country code
    setCurrentCountryPrefix(code) {
        this.localStorage.setItem('country_code', code);
    }
    // Get the currentCounty code
    getCurrentCountyPrefix() {
        return this.localStorage.getItem('country_code');
    }
    // Get the current user country
    getAllCountry() {
        const countries = this.localStorage.getItem('all-countries');
        return countries ? countries : [];
    }
    // Set the current user country
    setAllCountry(countryData) {
        this.localStorage.setItem('all-countries', countryData);
    }
    // Get the current user country
    removeAllCountry() {
        this.localStorage.removeItem('all-countries');
    }
    // Get the current user country
    getCurrentUserCountry() {
        return this.localStorage.getItem('user-country');
    }
    // Set the current user country
    setCurrentUserCountry(countryData) {
        this.localStorage.setItem('user-country', countryData);
    }
    // get the current user country
    removeCurrentUserCountry() {
        this.localStorage.removeItem('user-country');
    }
    // Get the current user Language
    getCurrentUserLanguage() {
        return this.localStorage.getItem('user-language');
    }
    // Set the current user Language
    setCurrentUserLanguage(countryData) {
        this.localStorage.setItem('user-language', countryData);
    }
    // get the current user Language
    removeCurrentUserLanguage() {
        this.localStorage.removeItem('user-language');
    }
    // Get the current user Language translation
    getCurrentLanguageTranslation() {
        return this.localStorage.getItem('language-translation');
    }
    // Set the current user Language translation
    setCurrentLanguageTranslation(countryData) {
        this.localStorage.setItem('language-translation', countryData);
    }
    // get the current user Language translation
    removeCurrentLanguageTranslation() {
        this.localStorage.removeItem('language-translation');
    }
    // Get the current user Language translation
    getAllCurrentCountryLanguages() {
        return this.localStorage.getItem('all-country-languages');
    }
    // Set the current user Language translation
    setAllCurrentCountryLanguages(countryData) {
        this.localStorage.setItem('all-country-languages', countryData);
    }
    // get the current user Language translation
    removeAllCurrentCountryLanguages() {
        this.localStorage.removeItem('all-country-languages');
    }
    // Get the current user country Language
    getACurrentCountryLanguages() {
        return this.localStorage.getItem('current-country-languages');
    }
    // Set the current user country Language
    setCurrentCountryLanguages(languageData) {
        this.localStorage.setItem('current-country-languages', languageData);
    }
    // get the current user  country Language
    removeCurrentCountryLanguages() {
        this.localStorage.removeItem('current-country-languages');
    }
    // get the default country language
    getDefaultCountryLanguageData() {
        return this.localStorage.getItem('default-country-languages');
    }
    // Set the default country language
    setDefaultCountryLanguageData(languageData) {
        this.localStorage.setItem('default-country-languages', languageData);
    }
    // remove the default country language
    removeDefaultCountryLanguageData() {
        return this.localStorage.getItem('default-country-languages');
    }
    // Get all word counytries
    getwordCountriesData() {
        return this.localStorage.getItem('word-countries');
    }
    // Set all word countries
    setwordCountriesData(countries) {
        this.localStorage.setItem('word-countries', countries);
    }
    // Set all word countries
    removewordCountriesData() {
        this.localStorage.removeItem('word-countries');
    }
    // Get all country
    getAllCountriesInfos(refresher) {
        return new Promise((resolve) => {
            const countries = this.getAllCountriesData();
            if (refresher || countries.length === 0) {
                this.api.get('setting/v1/country').subscribe(data => {
                    if (data && data.liste_country && data.liste_country.length > 0) {
                        const countries = this.util.orderByPosition(data.liste_country);
                        const countriesList = [];
                        countries.forEach(country => {
                            // filter by active  && country.settings.active === 1
                            if (country && country.settings) {
                                countriesList.push(country);
                            }
                        });
                        this.setAllCountriesData(countriesList);
                        resolve(countriesList);
                    }
                    else {
                        resolve(this.getAllCountriesData());
                    }
                }, error => {
                    resolve(this.getAllCountriesData());
                });
            }
            else {
                resolve(this.getAllCountriesData());
            }
        });
    }
    // Get country information
    getLastVersion() {
        return this.api.get(`version/get`);
    }
    // check if app is the last version
    checkVersion(type) {
        return new Promise((resolve) => {
            this.getLastVersion().subscribe(reponse => {
                if (reponse && reponse.message === 'success') {
                    switch (type) {
                        case 'android':
                            resolve({ version: 'DOWN', data: reponse.version_android });
                            break;
                        case 'ios':
                            resolve({ version: 'DOWN', data: reponse.version_ios });
                            break;
                        default:
                            resolve({ version: 'OK' });
                            break;
                    }
                }
                else {
                    resolve({ version: 'OK' });
                }
            }, error => {
                resolve({ version: 'OK' });
            });
        });
    }
    // Get country information
    getInfoCountry(countryId) {
        return this.api.get(`setting/v1/forAcountry/${countryId}`);
    }
    // Get current user position
    getPositionUser() {
        return this.http.get('https://pro.ip-api.com/json/?key=OTLs8gHCV0rJyYz');
    }
    // Get the currency country data informations of word
    getCurrentWordCountryInfo(refresher) {
        return new Promise((resolve) => {
            this.getPositionUser().subscribe((position) => {
                this.getWordCountries(refresher).then((countries) => {
                    if (countries && countries.length > 0) {
                        let currentCountryData = null;
                        countries.forEach(country => {
                            if (position.countryCode === country.code_country) {
                                currentCountryData = country;
                            }
                        });
                        resolve(currentCountryData);
                    }
                    else {
                        resolve(null);
                    }
                });
            }, error => {
                resolve(null);
            });
        });
    }
    // get all countries
    getAllcountriesData() {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"]((observer) => {
            this.http.get(`${this.baseUrl}all`).subscribe((countries) => {
                observer.next(countries);
            }, error => {
                this.http.get(`assets/json/countries.json`).subscribe((countries) => { observer.next(countries); });
            });
        });
    }
    // Get all the word countries
    getWordCountries(refresh) {
        return new Promise((resolve) => {
            const countries = this.getwordCountriesData();
            if (countries && countries.length === 0 || refresh) {
                this.getAllcountriesData().subscribe((countries) => {
                    if (countries && countries.length > 0) {
                        this.api.get('setting/v1/country').subscribe(data => {
                            if (data && data.liste_country && data.liste_country.length > 0) {
                                const states = [];
                                countries.forEach(country => {
                                    const countryLabel = `COUNTRY_${country.alpha2Code}`;
                                    let countryId = 0;
                                    let defaultCountry = 'no';
                                    let active = 0;
                                    data.liste_country.forEach(currentCountry => {
                                        if (currentCountry.settings.active === 1 && currentCountry.settings.code_country === country.alpha2Code) {
                                            countryId = currentCountry.settings.country_id;
                                            active = 1;
                                        }
                                        if (currentCountry.settings.default_country === 'yes') {
                                            defaultCountry = currentCountry.settings.default_country;
                                        }
                                    });
                                    this.translate.get(countryLabel).subscribe(value => {
                                        states.push({
                                            country_id: countryId,
                                            country_name: country.name,
                                            active: active,
                                            country_flag: country.flag,
                                            country_prefixe: country.callingCodes[0],
                                            code_country: country.alpha2Code,
                                            default_country: defaultCountry,
                                            country_label: value,
                                            country_key: countryLabel
                                        });
                                    });
                                });
                                this.setwordCountriesData(states);
                                resolve(states);
                            }
                            else {
                                resolve(this.getwordCountriesData());
                            }
                        }, error => {
                            resolve(this.getwordCountriesData());
                        });
                    }
                    else {
                        resolve(this.getwordCountriesData());
                    }
                });
            }
            else {
                resolve(countries);
            }
        });
    }
    // Get all countries
    getAllCountries(refresher) {
        return new Promise((resolve) => {
            this.getAllCountriesInfos(refresher).then((countries) => {
                const countriesData = [];
                if (countries && countries.length > 0) {
                    countries.forEach(country => {
                        countriesData.push(country.settings);
                    });
                    this.setAllCountry(countriesData);
                    resolve(countriesData);
                }
                else {
                    const countriesList = this.getAllCountry();
                    if (countriesList && countriesList.length > 0) {
                        resolve(countriesList);
                    }
                    else {
                        resolve([]);
                    }
                }
            });
        });
    }
    // Get the default country
    getDefaultCountry(refresher) {
        return new Promise((resolve) => {
            this.getAllCountries(refresher).then((countries) => {
                if (countries && countries.length > 0) {
                    countries.forEach(country => {
                        if (country && country.default_country === 'yes') {
                            this.setCurrentUserCountry(country);
                            resolve(country);
                        }
                    });
                }
                else {
                    resolve(this.getCurrentUserCountry());
                }
            });
        });
    }
    // Get the currency country data informations
    getCurrentCountryInfo(refresher) {
        return new Promise((resolve) => {
            this.getPositionUser().subscribe((position) => {
                this.getAllCountriesInfos(refresher).then((countries) => {
                    if (countries && countries.length > 0) {
                        let currentCountryData = null;
                        countries.forEach(country => {
                            if (position.countryCode === country.settings.code_country) {
                                currentCountryData = country;
                            }
                        });
                        if (currentCountryData) {
                            this.setCurrentUserCountry(currentCountryData.settings);
                            resolve(currentCountryData);
                        }
                        else {
                            resolve(currentCountryData);
                        }
                    }
                    else {
                        resolve(this.getCurrentUserCountry());
                    }
                });
            }, error => {
                resolve(this.getCurrentUserCountry());
            });
        });
    }
    // Get all languages
    getACountryLanguages(countryCode, refresher) {
        return new Promise((resolve) => {
            this.getAllCountriesInfos(refresher).then((countries) => {
                let languagesData = [];
                if (countries && countries.length > 0) {
                    countries.forEach(country => {
                        if (country.settings.code_country === countryCode) {
                            languagesData = country.langues_country;
                        }
                    });
                    this.setAllCurrentCountryLanguages(languagesData);
                    resolve(languagesData);
                }
                else {
                    const languages = this.getAllCurrentCountryLanguages();
                    if (languages && languages.length > 0) {
                        resolve(languages);
                    }
                    else {
                        resolve([]);
                    }
                }
            });
        });
    }
    // Get the default country Languages
    getDefaultCountryLanguage(countryCode, refresher) {
        return new Promise((resolve) => {
            this.getACountryLanguages(countryCode, refresher).then((langues) => {
                if (langues && langues.length > 0) {
                    langues.forEach(langueData => {
                        if (langueData && langueData.langue && langueData.langue.default_langue === 'yes') {
                            this.setDefaultCountryLanguageData(langueData);
                            resolve(langueData);
                        }
                    });
                }
                else {
                    const userLanguage = this.getDefaultCountryLanguageData();
                    if (userLanguage) {
                        resolve(userLanguage);
                    }
                    else {
                        resolve(null);
                    }
                }
            });
        });
    }
    // Get Languages data Translation
    getDataTranslate(language, lang) {
        let langueData = [];
        language.forEach(langue => {
            if (langue.langue.code_langue === lang) {
                langueData = langue.keywords;
            }
        });
        return langueData;
    }
    // Get the language data
    getLanguages(refresher) {
        return new Promise((resolve) => {
            // step 1 :  Get all session Languages
            const languagesData = this.getAllCurrentCountryLanguages();
            if (languagesData && languagesData.length > 0 && !refresher) {
                resolve(languagesData);
            }
            else {
                // step 2  Get the user country languages
                const userCountry = this.getCurrentUserCountry();
                if (userCountry && userCountry.code_country) {
                    this.getACountryLanguages(userCountry.code_country, refresher).then((languages) => {
                        if (languages) {
                            this.setAllCurrentCountryLanguages(languages);
                            resolve(languages);
                        }
                        else {
                            resolve([]);
                        }
                    });
                }
                else {
                    // step 3 the current country languages
                    this.getCurrentCountryInfo(refresher).then((country) => {
                        if (country && country.settings && country.settings.code_country) {
                            this.getACountryLanguages(country.settings.code_country, refresher).then((languages) => {
                                if (languages) {
                                    this.setAllCurrentCountryLanguages(languages);
                                    resolve(languages);
                                }
                                else {
                                    resolve([]);
                                }
                            });
                        }
                        else {
                            // step 4  Get the default country languages
                            this.getDefaultCountry(refresher).then((countryDatas) => {
                                if (countryDatas) {
                                    this.getACountryLanguages(countryDatas.code_country, refresher).then((languages) => {
                                        if (languages) {
                                            this.setAllCurrentCountryLanguages(languages);
                                            resolve(languages);
                                        }
                                        else {
                                            resolve([]);
                                        }
                                    });
                                }
                            });
                        }
                    });
                }
            }
        });
    }
    // Get the value of a keyword
    getValueTranslation(key, translationDta, params) {
        const langueData = translationDta;
        let translation = '';
        if (langueData) {
            langueData.forEach(data => {
                if (data && data.keyword === key) {
                    if (data && data.params && params && params.length > 0) {
                        const tempTranslation = data.value;
                        let formatParams = [];
                        formatParams = data.params.split(';');
                        formatParams.forEach(keyParam => {
                            tempTranslation.replace(keyParam, params[formatParams.indexOf(keyParam)]);
                        });
                        translation = tempTranslation;
                    }
                    else {
                        translation = data.value;
                    }
                }
            });
        }
        return translation;
    }
    // Get the list of value of keywords
    getTranslationsData(keys) {
        const langueData = this.getCurrentLanguageTranslation();
        let i = 0;
        let found = false;
        const translation = [];
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](subscriber => {
            keys.forEach(key => {
                found = false;
                i = 0;
                while (langueData && i < langueData.length && !found) {
                    if (langueData[i] && langueData[i].keyword === key) {
                        translation[key] = langueData[i].value;
                    }
                    i++;
                }
            });
            subscriber.next(translation);
        });
    }
    // Get the value of a keyword
    getTranslationData(key, params) {
        const langueData = this.getCurrentLanguageTranslation();
        let i = 0;
        let found = false;
        let translation = {};
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](subscriber => {
            found = false;
            while (langueData && i < langueData.length && !found) {
                if (langueData[i] && langueData[i].keyword === key) {
                    if (langueData[i] && langueData[i].params && params && params.length > 0) {
                        const tempTranslation = langueData[i].value;
                        let formatParams = [];
                        formatParams = langueData[i].params.split(';');
                        formatParams.forEach(keyParam => {
                            tempTranslation.replace(keyParam, params[formatParams.indexOf(keyParam)]);
                        });
                        translation = { [key]: tempTranslation };
                    }
                    else {
                        translation = { [key]: langueData[i].value };
                    }
                }
                i++;
            }
            subscriber.next(translation);
        });
    }
    // Set the current country of the user
    setUserCountry(countryId) {
        const countries = this.getAllCountriesData();
        countries.forEach(country => {
            if (country.settings.country_id === countryId) {
                this.setCurrentUserCountry(country.settings);
            }
        });
    }
    // Get current counries Languages
    getCountryLanguages(countryCode, refresher) {
        this.getACountryLanguages(countryCode, refresher).then((languages) => {
            if (languages) {
                this.setAllCurrentCountryLanguages(languages);
            }
        });
    }
    // get default country Language
    getDefaultcountrylanguage(country, refresher) {
        this.getDefaultCountryLanguage(country.code_country, refresher).then((languages) => {
            if (languages) {
                this.setCurrentUserLanguage(languages.langues);
                this.setCurrentLanguageTranslation(languages.keywords);
                this.sendTranslation(languages.keywords);
            }
        });
    }
    // Get the defaultf country, languages and Translation
    getDefaultCountryLanguagesAndTranslation(refresher) {
        this.getDefaultCountry(refresher).then((country) => {
            if (country && country.settings) {
                this.setCurrentUserCountry(country.settings);
                this.getCountryLanguages(country.settings.code_country, refresher);
                this.getDefaultcountrylanguage(country.settings, refresher);
            }
        });
    }
    // Get the current country, languages and Translation
    getCurrentCountryLanguagesAndTranslation(refresher) {
        const currentCountry = this.getCurrentUserCountry();
        if (currentCountry) {
            this.setCurrentUserCountry(currentCountry);
            this.getCountryLanguages(currentCountry.code_country, refresher);
            this.getDefaultcountrylanguage(currentCountry, refresher);
        }
        else {
            this.getCurrentCountryInfo(refresher).then((country) => {
                if (country) {
                    this.setCurrentUserCountry(country.settings);
                    this.getCountryLanguages(country.settings.code_country, refresher);
                    this.getDefaultcountrylanguage(country.settings, refresher);
                }
                else {
                    this.getDefaultCountryLanguagesAndTranslation(refresher);
                }
            });
        }
    }
};
LocationService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpClient"] },
    { type: _api_service__WEBPACK_IMPORTED_MODULE_7__["ApiService"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__["TranslateService"] },
    { type: _local_storage_service__WEBPACK_IMPORTED_MODULE_5__["LocalStorageService"] },
    { type: _util_service__WEBPACK_IMPORTED_MODULE_6__["UtilService"] }
];
LocationService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], LocationService);



/***/ }),

/***/ "eEpS":
/*!*******************************************************************************!*\
  !*** ./src/app/dashboard/tontines-events/services/tontines-events.service.ts ***!
  \*******************************************************************************/
/*! exports provided: TontinesEventsService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TontinesEventsService", function() { return TontinesEventsService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "qCKp");
/* harmony import */ var src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/service/api.service */ "6rCG");
/* harmony import */ var src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/shared/service/events.service */ "r5fM");
/* harmony import */ var src_app_shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/shared/service/local-storage.service */ "y7ii");
/* harmony import */ var _user_service_user_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../user/service/user.service */ "6Hie");







let TontinesEventsService = class TontinesEventsService {
    constructor(api, userService, event, localStorage) {
        this.api = api;
        this.userService = userService;
        this.event = event;
        this.localStorage = localStorage;
        this.subject = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.typeTontineName = '';
        this.token = this.userService.getUserToken();
        this.event.subscribe('new-token', token => {
            this.token = token;
        });
    }
    sendMessageInvitation(message) {
        this.subject.next({ isInvitation: message });
    }
    getMessageInvitationEvent() {
        return this.subject.asObservable();
    }
    // Get the current user
    getCurrentTontineEventData() {
        return this.localStorage.getItem('tontine-data-event');
    }
    // Get the current user
    setCurrentTontineEventData(tontineEventData) {
        this.localStorage.setItem('tontine-data-event', tontineEventData);
    }
    // Create the tontine
    createTontineEventPost(tontine) {
        this.token = this.userService.getUserToken();
        return this.api.post('tontine_event/v1/create/' + this.token, JSON.stringify(tontine));
    }
    // Edit the tontine
    editTontineEventPost(tontine) {
        this.token = this.userService.getUserToken();
        return this.api.post('tontine_event/v1/edit/' + this.token, tontine);
    }
    // Get the user tontine default
    getMyTontineEventDefault() {
        this.token = this.userService.getUserToken();
        return this.api.get('tontine_event/v1/user/all_by_default/' + this.token);
    }
    // Get the user tontine
    getMyTontineEvent(idCountry) {
        this.token = this.userService.getUserToken();
        return this.api.get('tontine_event/v1/user/all/' + this.token + '/' + idCountry);
    }
    // Get all tontine events for a country
    getAllTontineEvent(idCountry) {
        this.token = this.userService.getUserToken();
        return this.api.get('tontine_event/v1/all/' + this.token + '/' + idCountry);
    }
    // Get all tontine events for a country
    getAllCountriesTontineEvent() {
        this.token = this.userService.getUserToken();
        return this.api.get('tontine_event/v1/all_events/' + this.token);
    }
    // Get the  tontine information
    getTontineDetail(tontineId) {
        return this.api.get('tontine_event/v1/detail/' + tontineId);
    }
    // Get the  tontine information
    deleteTontine(tontineId) {
        this.token = this.userService.getUserToken();
        return this.api.post('tontine_event/v1/delete/' + this.token, tontineId);
    }
    // Send the tontine invitation
    sendInvitation(invitation) {
        this.token = this.userService.getUserToken();
        return this.api.post('tontine_event/v1/invitation/participants/' + this.token, invitation);
    }
    // Get the tontine invitation code
    resendInvitationEvent(invitation) {
        this.token = this.userService.getUserToken();
        return this.api.post('tontine_event/v1/invitation/resendCode/' + this.token, invitation);
    }
    // send a notification message to TOUPESU TEAM
    sendNotification(notification) {
        return this.api.post('tontine_event/v1/send/notification', notification);
    }
    getMessagingEvent(tontineId) {
        this.token = this.userService.getUserToken();
        return this.api.get('tontine_event/v1/get/notifications/' + tontineId + '/' +
            this.token);
    }
    // Get all events for invitations
    getAllEventsForInvitations() {
        this.token = this.userService.getUserToken();
        return this.api.get(`tontine_event/v1/events/for/invitation/${this.token}`);
    }
    // ========================== Manage User Invitation ========================================= //
    // Get all invitations
    getAllEventsInvitations(eventId) {
        this.token = this.userService.getUserToken();
        return this.api.get(`tontine_event/v1/invitation/participants/all/${this.token}/${eventId}`);
    }
    // Get all userss events invitations 
    getAllEventsInvitation() {
        this.token = this.userService.getUserToken();
        return this.api.get(`tontine_event/v1/my/invitation/member/all/${this.token}`);
    }
    // Accept the request event invitation by admin
    declineEventInvitationAdmin(invitation) {
        this.token = this.userService.getUserToken();
        return this.api.post('tontine_event/v1/invitation/admin_event/refuseJoin/' + this.token, invitation);
    }
    // Decline the request event invitation by admin
    AcceptEventInvitationAdmin(invitation) {
        this.token = this.userService.getUserToken();
        return this.api.post('tontine_event/v1/invitation/admin_event/acceptJoin/' + this.token, invitation);
    }
    // Decline admin invitation by user
    declineEventInvitation(invitation) {
        this.token = this.userService.getUserToken();
        return this.api.post('tontine_event/v1/invitation/participant/refuseJoinEvent/' + this.token, invitation);
    }
    // Join an event by a user
    acceptInvitationEvent(invitation) {
        return this.api.post('tontine_event/v1/invitation/participant/acceptJoinEvent', invitation);
    }
    // Accept the admin  invitation to join an event with token 
    acceptInvitationEventWithToken(invitation) {
        const token = this.userService.getUserToken();
        return this.api.post(`tontine_event/v1/invitation/participant/acceptJoinEventToken/${token}`, invitation);
    }
};
TontinesEventsService.ctorParameters = () => [
    { type: src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_3__["ApiService"] },
    { type: _user_service_user_service__WEBPACK_IMPORTED_MODULE_6__["UserService"] },
    { type: src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_4__["EventService"] },
    { type: src_app_shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_5__["LocalStorageService"] }
];
TontinesEventsService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], TontinesEventsService);



/***/ }),

/***/ "etID":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/wallet-order/wallet-order.component.html ***!
  \*******************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<form [formGroup]=\"paymentForm\">\r\n  <ion-grid>\r\n    <ion-row>\r\n      <ion-col size=\"12\">        \r\n        <ion-card class=\"paidmode\">\r\n          <ion-card-content class=\"ion-text-center\">\r\n              <ion-row class=\"ion-padding-bottom\">\r\n                <ion-col size=\"12\">\r\n                  <ion-item>\r\n                    <ion-label position=\"floating\">{{ 'AMOUNT_PAY_TEXT' | translate }}</ion-label>\r\n                    <ion-input type=\"number\" formControlName=\"montant\"></ion-input>\r\n                  </ion-item> \r\n                </ion-col>\r\n                <ion-col size=\"12\">\r\n                  <ion-item>\r\n                    <ion-label position=\"floating\">{{ 'REASON_TEXT' | translate }}</ion-label>\r\n                    <ion-textarea  type=\"text\"  formControlName=\"reason\"></ion-textarea>\r\n                  </ion-item> \r\n                  <div class=\"validation-errors\">\r\n                    <ng-container *ngFor=\"let validation of validationMessages.reason\">\r\n                      <div class=\"error-message\" *ngIf=\"reason.hasError(validation.type) && (reason.dirty || reason.touched)\">\r\n                        <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                        {{ validation.message }}\r\n                      </div>\r\n                    </ng-container>\r\n                  </div>          \r\n                </ion-col>\r\n              </ion-row>                            \r\n          </ion-card-content>\r\n        </ion-card>\r\n      </ion-col>      \r\n    </ion-row>\r\n    <ion-row class=\"ion-justify-content-center\">\r\n      <ion-col size=\"auto\">\r\n        <ion-button expand=\"full\" [disabled]=\"paymentForm.invalid || loadingPay\"\r\n              (click)=\"makePayment()\"\r\n              color=\"warning\" \r\n              class=\"ion-text-uppercase\"\r\n              shape=\"round\"\r\n              >\r\n         {{ 'DEBT_MAKE_PAYMENT' | translate }}\r\n        </ion-button>\r\n      </ion-col>\r\n    </ion-row>  \r\n    <ion-row *ngIf=\"loadingPay\">\r\n      <p class=\"ion-text-center\" >\r\n        <ion-spinner  name=\"circles\"></ion-spinner> \r\n      </p>\r\n    </ion-row>\r\n  </ion-grid>\r\n  </form> \r\n  ");

/***/ }),

/***/ "f1+L":
/*!**************************************************!*\
  !*** ./src/app/shared/pipes/to-date-obj.pipe.ts ***!
  \**************************************************/
/*! exports provided: ToDateObjPipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToDateObjPipe", function() { return ToDateObjPipe; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");


let ToDateObjPipe = class ToDateObjPipe {
    transform(value) {
        if (value) {
            const temp = value.toString().replace(' ', 'T');
            return new Date(temp);
        }
        else {
            return null;
        }
    }
};
ToDateObjPipe = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"])({
        name: 'toDateObj'
    })
], ToDateObjPipe);



/***/ }),

/***/ "fElj":
/*!*******************************************************************!*\
  !*** ./src/app/shared/paidmode-swap/paidmode-swap.component.scss ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwYWlkbW9kZS1zd2FwLmNvbXBvbmVudC5zY3NzIn0= */");

/***/ }),

/***/ "gJwf":
/*!*****************************************************************************!*\
  !*** ./src/app/shared/contribution-order/contribution-order.component.scss ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjb250cmlidXRpb24tb3JkZXIuY29tcG9uZW50LnNjc3MifQ== */");

/***/ }),

/***/ "gWc9":
/*!*******************************************************************!*\
  !*** ./src/app/dashboard/pesuswap/services/swap-error.service.ts ***!
  \*******************************************************************/
/*! exports provided: SwapErrorService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SwapErrorService", function() { return SwapErrorService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var src_app_shared_service_ui_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/service/ui.service */ "QB/Y");




let SwapErrorService = class SwapErrorService {
    constructor(translate, ui) {
        this.translate = translate;
        this.ui = ui;
    }
    manageWalletError(error) {
        if (error.error.remplir_tous_les_champs) {
            this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG3').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.user_not_exist) {
            this.translate.get('USER_NOT_EXIST').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.currency_from_not_exist) {
            this.translate.get('CURRENCY_FROM_NOT_EXIST').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.currency_to_not_exist) {
            this.translate.get('CURRENCY_TO_NOT_EXIST').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.type_swap_id_not_exist) {
            this.translate.get('TYPE_SWAP_TO_NOT_EXIST').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.solde_wallet_is_not_sufficient) {
            this.translate.get('SOLDE_WALLET_IS_NOT_SUFFICIENT').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.swap_request_id_not_exist) {
            this.translate.get('SWAP_REQUEST_ID_NOT_EXIST').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.swap_request_id_already_matched) {
            this.translate.get('SWAP_REQUEST_ALREADY_MATCHED').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.insufficient_balance) {
            this.translate.get('SWAP_INSUFFICIENT_BALANCE', { amount: error.error.amount_to_recharge, currency: error.error.currency }).subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
        if (error.error.swap_request_id_is_still_pending) {
            this.translate.get('CAN_ARCHIVE_SWAP_TEXT').subscribe(trans => {
                this.ui.presentToast(trans);
            });
        }
    }
};
SwapErrorService.ctorParameters = () => [
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_2__["TranslateService"] },
    { type: src_app_shared_service_ui_service__WEBPACK_IMPORTED_MODULE_3__["UiService"] }
];
SwapErrorService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], SwapErrorService);



/***/ }),

/***/ "hrWk":
/*!*****************************************************************************!*\
  !*** ./src/app/shared/paidmode-debt-order/paidmode-debt-order.component.ts ***!
  \*****************************************************************************/
/*! exports provided: PaidmodeDebtOrderComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaidmodeDebtOrderComponent", function() { return PaidmodeDebtOrderComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_paidmode_debt_order_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./paidmode-debt-order.component.html */ "SpGO");
/* harmony import */ var _paidmode_debt_order_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./paidmode-debt-order.component.scss */ "Nxiy");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var _service_error_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../service/error.service */ "TkUd");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _service_location_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../service/location.service */ "e009");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/tontine.service */ "/WEl");
/* harmony import */ var _service_api_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../service/api.service */ "6rCG");
/* harmony import */ var src_app_dashboard_my_tontines_services_debts_manager_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/debts-manager.service */ "ijC1");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var _service_payment_error_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../service/payment-error.service */ "FLu1");
/* harmony import */ var _service_payment_global_data_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../service/payment-global-data.service */ "T8hk");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../service/events.service */ "r5fM");
/* harmony import */ var src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! src/app/dashboard/user/service/user.service */ "6Hie");
/* harmony import */ var _service_ui_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../service/ui.service */ "QB/Y");
/* harmony import */ var _service_plugin_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../service/plugin.service */ "NxmL");



















let PaidmodeDebtOrderComponent = class PaidmodeDebtOrderComponent {
    constructor(fb, userService, tontine, events, api, router, debt, paymentData, navController, alertController, errorService, location, translate, paymentError, zone, ui, plugin) {
        this.fb = fb;
        this.userService = userService;
        this.tontine = tontine;
        this.events = events;
        this.api = api;
        this.router = router;
        this.debt = debt;
        this.paymentData = paymentData;
        this.navController = navController;
        this.alertController = alertController;
        this.errorService = errorService;
        this.location = location;
        this.translate = translate;
        this.paymentError = paymentError;
        this.zone = zone;
        this.ui = ui;
        this.plugin = plugin;
        this.cron = null;
        this.timeOut = null;
        this.loadingOperator = false;
        this.loading = false;
        this.errorPhone = false;
        this.states = [];
        this.paymentMethods = [];
        this.paypalMessage = '';
        this.tontineData = this.tontine.getCurrentTontineData();
        this.userData = this.userService.getUserData();
        this.allPaymentMethods = [];
        this.currentDebtData = this.debt.getDebtsData();
        this.contributionData = this.currentDebtData;
        this.paypalLoading = false;
        this.paypal_initialized = false;
    }
    ngOnInit() {
        this.getAllMethodPaymentType();
        this.initFormMessage();
        this.initPaymentForm();
    }
    // Form getters
    get amountError() {
        return this.userPayMethodForm.get('montantRef');
    }
    get country() {
        return this.userPayMethodForm.get('country_id');
    }
    get device_name() {
        return this.userPayMethodForm.get('device_name');
    }
    get payementtype() {
        return this.userPayMethodForm.get('typePaymentIndex');
    }
    get montantContributeError() {
        return this.userPayMethodForm.get('montant');
    }
    get reason() {
        return this.userPayMethodForm.get('reason');
    }
    get proof() {
        return this.userPayMethodForm.get('receipt');
    }
    // form init message
    initFormMessage() {
        this.translate.get(['REGISTER_PHONE_REQUIRED', 'AMOUNT_REQUIRED', 'PAID_MODE_REQUIRED', 'M_COUNTRY_REQUIRED', 'DEBT_REASON_MSG_REQUIRED_TEXT'])
            .subscribe(value => {
            this.validationMessages = {
                payementtype: [
                    { type: 'required', message: value.PAID_MODE_REQUIRED }
                ],
                phone: [
                    { type: 'required', message: value.REGISTER_PHONE_REQUIRED },
                ],
                amount: [
                    { type: 'required', message: value.AMOUNT_REQUIRED }
                ],
                country_id: [
                    { type: 'required', message: value.M_COUNTRY_REQUIRED }
                ],
                reason: [
                    { type: 'required', message: value.DEBT_REASON_MSG_REQUIRED_TEXT }
                ]
            };
        });
    }
    // Init form
    initPaymentForm() {
        const currentPayment = this.paymentData.getDefaultPaymentMethod();
        this.userPayMethodForm = this.fb.group({
            country_id: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            country_prefix: [''],
            countryId: [''],
            device_name: [''],
            currency: [''],
            currencyLabel: [''],
            user_id: [this.userData.id, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            bouffe_id: [this.currentDebtData ? this.currentDebtData.bouffe_id : '', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            device_id: [this.currentDebtData ? this.currentDebtData.device_id : '', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            reason: [''],
            receipt: [''],
            liste_proof: [''],
            montant: [this.balance, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].min(1), _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].max(this.balance)])],
            type_payment_id: [currentPayment ? currentPayment.typepaiement_id : ''],
            type_payment_name: [currentPayment ? currentPayment.name : ''],
            typePaymentIndex: [0, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required]
        });
    }
    // Get the payment proofs
    getProof() {
        this.plugin.getPicture().subscribe((picture) => {
            if (picture) {
                setTimeout(() => {
                    this.userPayMethodForm.get('receipt').setValue(picture);
                }, 200);
            }
        });
    }
    // get all payment method
    getAllMethodPaymentType() {
        this.loadingOperator = true;
        this.userService.getAllMethodPaymentType().subscribe((reponse) => {
            this.paymentMethods = [];
            this.loadingOperator = false;
            if (reponse && reponse.typePayment && reponse.typePayment.length > 0) {
                this.paymentMethods = this.paymentData.formatPaymentMethodForDebt(reponse.typePayment);
            }
            const defaultMethod = [{
                    id: 0, country_id: 0, logo: 'assets/wallet-icon.svg',
                    currency: this.contributionData.device_name, name: 'BANK TRANSFERT', placeholder: '',
                    handling_fees: 0,
                    type_handling_fees: 'valeur'
                }];
            this.paymentMethods = defaultMethod.concat(this.paymentMethods);
            this.allPaymentMethods = this.paymentMethods;
            this.getCountries(false);
        }, error => {
            this.loadingOperator = false;
            this.paymentMethods.push({
                id: 0, country_id: 0, logo: 'assets/wallet-icon.svg',
                currency: this.contributionData.device_name, name: 'BANK TRANSFERT', placeholder: '',
                handling_fees: 0,
                type_handling_fees: 'valeur'
            });
            this.allPaymentMethods = this.paymentMethods;
            this.getCountries(false);
            this.errorService.manageError(error);
        });
    }
    // Get all countries
    getCountries(refresher) {
        this.location.getAllCountries(refresher).then((countries) => {
            this.states = this.paymentData.formatCountriesData(countries);
            // Set the country of the tontine
            if (this.states && this.states.length > 0) {
                setTimeout(() => {
                    this.states.forEach(country => {
                        if (country.country_key === this.tontineData.tontine.country_key) {
                            this.updateFormData(country);
                        }
                    });
                }, 200);
            }
        });
    }
    // update the form data
    updateFormData(country) {
        if (country) {
            this.userPayMethodForm.get('countryId').setValue(country.country_id);
            this.userPayMethodForm.get('currency').setValue(country.device_name);
            this.userPayMethodForm.get('currencyLabel').setValue(country.currency_label);
            this.zone.run(() => {
                this.userPayMethodForm.get('country_id').setValue(country.country_id);
            });
            this.updatePaymentsMethods(country.country_id);
        }
    }
    // Update the payment method
    updatePaymentMethod(index) {
        if (this.paymentMethods[index]) {
            this.userPayMethodForm.get('type_payment_id').setValue(this.paymentMethods[index].id);
            this.userPayMethodForm.get('type_payment_name').setValue(this.paymentMethods[index].name);
            this.userPayMethodForm.get('device_name').setValue(this.paymentMethods[index].currency);
            this.zone.run(() => {
                this.userPayMethodForm.get('typePaymentIndex').setValue(index);
            });
        }
    }
    updatePaymentsMethods(countryId) {
        // update the payment method
        const paymentsMethods = [];
        this.paymentMethods = [];
        this.allPaymentMethods.forEach(payment => {
            if (payment.country_id === countryId || payment.country_id === 0) {
                paymentsMethods.push(payment);
            }
        });
        this.paymentMethods = paymentsMethods;
        if (this.paymentMethods && this.paymentMethods.length > 0) {
            this.updatePaymentMethod(0);
        }
    }
    // Update the country info country prfix
    updateCurrencyCountry(countryId) {
        this.zone.run(() => {
            this.paymentMethods = [];
        });
        setTimeout(() => {
            this.states.forEach(state => {
                if (state.country_id === countryId) {
                    this.updateFormData(state);
                }
            });
        }, 300);
    }
    // make the payment
    paymentWalletConfirm(dataMessage, translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${translation[4]}`,
                message: `${translation[0]} ${dataMessage.montant}
      ${dataMessage.device_name} ${translation[1]}`,
                buttons: [
                    {
                        text: `${translation[2]}`,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                        }
                    }, {
                        text: `${translation[3]}`,
                        handler: () => {
                            switch (dataMessage.type_payment_name) {
                                case 'BANK TRANSFERT':
                                    this.bankPayment();
                                    break;
                                default:
                                    this.paidWithOperatorWallet();
                                    break;
                            }
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
    // Show the payment mode
    showPayment(data) {
        const translation = [];
        this.translate.get(['BENEFICIARY_PAY_TEXT', 'CONFIRM_PAY_CONTRIBUTION_SUBTEXT2', 'CANCEL_TEXT', 'YES_TEXT', 'BENEFICIARY_PAMENT']).subscribe(trans => {
            translation.push(trans.BENEFICIARY_PAY_TEXT);
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT2);
            translation.push(trans.CANCEL_TEXT);
            translation.push(trans.YES_TEXT);
            translation.push(trans.BENEFICIARY_PAMENT);
            this.paymentWalletConfirm(data, translation);
        });
    }
    /******************************** START OPERATOR PAYMENT *********************************************/
    // Paid the contribution with wallet
    paidWithOperatorWallet() {
        this.userPayMethodForm.get('liste_proof').setValue([{
                montant: this.userPayMethodForm.value.montant,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                receipt: this.userPayMethodForm.value.receipt
            }]);
        this.loading = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        this.debt.makePaymentOperatorWallet(this.userPayMethodForm.value)
            .subscribe((reponse) => {
            this.loading = false;
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                this.translate.get('DEBT_PAYMENT_BENEFICIAL_SUCCES_MSG').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.events.publish('modal-close');
                this.navController.setDirection('root');
                this.router.navigate(['/', 'dashboard', 'my-tontines', this.tontineData.tontine.tontine_id]);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithOperatorWallet();
                        }
                        else {
                            this.loading = false;
                            this.ui.dismissLoading();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    /******************************** START BANK PAYMENT *********************************************/
    // bank paiement
    bankPayment() {
        this.userPayMethodForm.get('liste_proof').setValue([{
                montant: this.userPayMethodForm.value.montant,
                description: this.userPayMethodForm.value.reason,
                receipt: this.userPayMethodForm.value.receipt
            }]);
        this.loading = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        this.debt.makePaymentTradiBank(this.userPayMethodForm.value).subscribe((reponse) => {
            this.loading = false;
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                this.translate.get('DEBT_PAYMENT_BENEFICIAL_SUCCES_MSG').subscribe(trans => {
                    this.ui.presentToast(trans);
                });
                this.events.publish('modal-close');
                this.navController.setDirection('root');
                this.router.navigate(['/', 'dashboard', 'my-tontines', this.tontineData.tontine.tontine_id, 'session-no-paid']);
            }
        }, error => {
            if (error && error.error) {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.bankPayment();
                        }
                        else {
                            this.loading = false;
                            this.ui.dismissLoading();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
};
PaidmodeDebtOrderComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_16__["UserService"] },
    { type: src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_9__["TontineService"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_15__["EventService"] },
    { type: _service_api_service__WEBPACK_IMPORTED_MODULE_10__["ApiService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_12__["Router"] },
    { type: src_app_dashboard_my_tontines_services_debts_manager_service__WEBPACK_IMPORTED_MODULE_11__["DebtsManagerService"] },
    { type: _service_payment_global_data_service__WEBPACK_IMPORTED_MODULE_14__["PaymentGlobalDataService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_6__["NavController"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_6__["AlertController"] },
    { type: _service_error_service__WEBPACK_IMPORTED_MODULE_5__["ErrorService"] },
    { type: _service_location_service__WEBPACK_IMPORTED_MODULE_7__["LocationService"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__["TranslateService"] },
    { type: _service_payment_error_service__WEBPACK_IMPORTED_MODULE_13__["PaymentErrorService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] },
    { type: _service_ui_service__WEBPACK_IMPORTED_MODULE_17__["UiService"] },
    { type: _service_plugin_service__WEBPACK_IMPORTED_MODULE_18__["PluginService"] }
];
PaidmodeDebtOrderComponent.propDecorators = {
    amountPay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    balance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};
PaidmodeDebtOrderComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-paidmode-debt-order',
        template: _raw_loader_paidmode_debt_order_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_paidmode_debt_order_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], PaidmodeDebtOrderComponent);



/***/ }),

/***/ "hy5b":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/select-data/select-data.component.html ***!
  \*****************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header>\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"end\">\r\n      <ion-button slot=\"icon-only\" (click)=\"closeModal()\">\r\n        <ion-icon color=\"warning\" name=\"close\" ></ion-icon>\r\n      </ion-button>\r\n    </ion-buttons>\r\n    <ion-title class=\"ion-text-center subtitle\">\r\n      {{ 'TONTINE_LIST_TEXT1' | translate }}\r\n    </ion-title>\r\n  </ion-toolbar>\r\n  <ion-toolbar>\r\n      <ion-searchbar placeholder=\"{{ 'M_NAME_TEXT' | translate }}\" type=\"text\" debounce=\"500\" (ionChange)=\"searchForInvitation($event)\" type=\"text\"></ion-searchbar>\r\n  </ion-toolbar>\r\n</ion-header>\r\n<ion-content>\r\n  \r\n  <ion-grid *ngIf=\"listData && listData.length > 0 \">\r\n    <ion-row>\r\n      <ion-col size=\"12\">\r\n        <ion-radio-group (ionChange)=\"selectData($event)\">\r\n          <ion-item *ngIf=\"type==='notification'\">\r\n            <ion-label>{{ 'ALL_TONTINE' | translate}}</ion-label>\r\n            <ion-radio slot=\"end\" [value]=\"{id: -1, name: ('ALL_TONTINE' | translate) }\"></ion-radio>\r\n          </ion-item>\r\n          <ion-item  *ngFor=\"let data of listData\">\r\n            <ion-label>{{ data && data.name ? data.name : '' }}</ion-label>\r\n            <ion-radio slot=\"end\" [value]=\"data\"></ion-radio>\r\n          </ion-item>\r\n        </ion-radio-group>\r\n      </ion-col>\r\n    </ion-row>\r\n  </ion-grid>\r\n\r\n  <ion-infinite-scroll threshold=\"250px\" (ionInfinite)=\"infinteScrollData($event)\">\r\n    <ion-infinite-scroll-content\r\n      loadingSpinner=\"bubbles\"\r\n      loadingText=\"{{ 'M_LOADING_MORE_DATA' | translate }}\">\r\n    </ion-infinite-scroll-content>\r\n  </ion-infinite-scroll>\r\n</ion-content>");

/***/ }),

/***/ "iB0r":
/*!*************************************************************************!*\
  !*** ./src/app/shared/contribution-loan/contribution-loan.component.ts ***!
  \*************************************************************************/
/*! exports provided: ContributionLoanComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContributionLoanComponent", function() { return ContributionLoanComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_contribution_loan_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./contribution-loan.component.html */ "WaxE");
/* harmony import */ var _contribution_loan_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contribution-loan.component.scss */ "ZcfY");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/tontine.service */ "/WEl");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../service/events.service */ "r5fM");







let ContributionLoanComponent = class ContributionLoanComponent {
    constructor(modatCtrl, tontine, event) {
        this.modatCtrl = modatCtrl;
        this.tontine = tontine;
        this.event = event;
        this.event.subscribe('modal-close', data => {
            if (data && data.result) {
                this.closeContribute(data.result);
            }
        });
        this.initSegmentControls();
        this.currentTontine = this.tontine.getCurrentTontineData();
    }
    ngOnInit() {
        this.isModeSelected[0] = true;
    }
    // init the segment controls
    initSegmentControls() {
        this.isModeSelected = [];
        for (let i = 0; i < 3; i++) {
            this.isModeSelected.push(false);
        }
    }
    // check segment action
    segmentChanged(event) {
        let i = 0;
        while (i < this.isModeSelected.length) {
            if (i === parseInt(event.detail.value)) {
                this.isModeSelected[i] = true;
            }
            else {
                this.isModeSelected[i] = false;
            }
            i++;
        }
    }
    // Close the contribution modal
    closeContribute(ans) {
        this.modatCtrl.dismiss(ans, 'cancel');
    }
};
ContributionLoanComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["ModalController"] },
    { type: src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_5__["TontineService"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_6__["EventService"] }
];
ContributionLoanComponent.propDecorators = {
    tontineName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    amountPay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    balance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    currency: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};
ContributionLoanComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-contribution-loan',
        template: _raw_loader_contribution_loan_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_contribution_loan_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], ContributionLoanComponent);



/***/ }),

/***/ "iKfZ":
/*!*********************************************************!*\
  !*** ./src/app/shared/cashmode/cashmode.component.scss ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjYXNobW9kZS5jb21wb25lbnQuc2NzcyJ9 */");

/***/ }),

/***/ "ijC1":
/*!*************************************************************************!*\
  !*** ./src/app/dashboard/my-tontines/services/debts-manager.service.ts ***!
  \*************************************************************************/
/*! exports provided: DebtsManagerService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DebtsManagerService", function() { return DebtsManagerService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/shared/service/api.service */ "6rCG");
/* harmony import */ var _user_service_user_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../user/service/user.service */ "6Hie");
/* harmony import */ var src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/shared/service/events.service */ "r5fM");
/* harmony import */ var src_app_shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/shared/service/local-storage.service */ "y7ii");






let DebtsManagerService = class DebtsManagerService {
    constructor(userService, api, event, localStorage) {
        this.userService = userService;
        this.api = api;
        this.event = event;
        this.localStorage = localStorage;
        this.token = this.userService.getUserToken();
        this.event.subscribe('new-token', token => {
            this.token = token;
        });
    }
    // send the debts Data
    sendDebtsData(data) {
        this.localStorage.setItem('debts-data', data);
    }
    // Get the debts Data
    getDebtsData() {
        return this.localStorage.getItem('debts-data');
    }
    removeDebtsData() {
        this.localStorage.removeItem('debts-data');
    }
    // Get the list of bills to approve by admin
    getBillsToApproveByAdmin(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`contribution/v1/get/receipt/to/approve/${this.token}`, data);
    }
    // get member bill rejected by admin
    getMembreBillRejected(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`contribution/v1/get/refuse/receipt/for/a/member/${this.token}`, data);
    }
    // Delete a proof rejected by a user
    deleteProofRejetected(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`contribution/v1/get/delete/proof/for/a/member/${this.token}`, data);
    }
    // get member bill in approval by admin
    getMembreBillInapproval(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`contribution/v1/get/receipt/withStatus/pending/forAMember/${this.token}`, data);
    }
    // get member bill in approval by admin
    getMembreBillComplete(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`contribution/v1/get/complete/receipt/forA/member/${this.token}`, data);
    }
    // Get bill infromations with payment detail done by admin
    getBillPaymentAdmin(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`contribution/v1/get/infos/receipt/with/payment/for/admin/${this.token}`, data);
    }
    // Get a member bill in progress with status "created"
    getMemberBillInProgress(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`contribution/v1/get/receipt/in/progress/${this.token}`, data);
    }
    // Get bill information with payment done
    getBillInformationWithPayment(data) {
        return this.api.post(`contribution/v1/get/infos/receipt/with/payment/${this.token}`, data);
    }
    // Validate a bill by admin
    validateBill(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`contribution/v1/validate/receipt/by/admin/${this.token}`, data);
    }
    // Cancel a bill by admin
    cancelBill(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`contribution/v1/refuse/receipt/by/admin/${this.token}`, data);
    }
    // Get bill ready for validation 
    getBillReadyForValidation(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`contribution/v1/get/complete/receipt/${this.token}`, data);
    }
    // Get bill that refusal is completed
    getBillRefusalComplete(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`contribution/v1/get/refuse/receipt/${this.token}`, data);
    }
    // Save a member bill
    saveMemberBill(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`contribution/v1/save/receipt/${this.token}`, data);
    }
    // Delete a proof of payment by admin
    deleteProofPayment(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`contribution/v1/get/delete/proof/${this.token}`, data);
    }
    /* Wallet payment */
    // Paid member contribution/penalties/ bill with Traditionnal Banking
    paidMemberBillTradiBanking(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`contribution/v1/pay/receipt/with/payment/mode/traditional/${this.token}`, data);
    }
    // Paid member contribution/penalties/ bill with Online wallet
    paidMemberBillOnlineWallet(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`contribution/v1/pay/receipt/with/wallet/${this.token}`, data);
    }
    /* MTN / OZOW / ORANGE / PAYPAL  payment */
    // Paid member contribution/penalties/ bill with Online payment (MTN/OZOW/PAYPAL/ORANGE) without conversion
    paidMemberBillOnlineWithoutConversion(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`contribution/v1/pay/receipt/with/payment/mode/online/NotConvertCurrency/${this.token}`, data);
    }
    // Paid member contribution/penalties/ bill with Online payment (MTN/OZOW/PAYPAL/ORANGE) with conversion
    paidMemberBillOnlineWithConversion(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`contribution/v1/pay/receipt/with/payment/mode/online/WithConvertCurrency/${this.token}`, data);
    }
    /* withdrawal management */
    // Validate a withdrawal by an admin with traditional banking
    validateWithdrawalTBank(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/validate/bouffe/withTraditional/Banking/${this.token}`, data);
    }
    // Validate a withdrawal by an admin with online banking
    validateWithdrawalOBank(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/validate/bouffe/withOnline/Wallet/${this.token}`, data);
    }
    // cancel a withdrawal by admin with the reason
    cancelWithdrawal(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/refuse/bouffe/${this.token}`, data);
    }
    // Get the list of accepted withdrawal for a tontine
    getAcceptedWithdrawalOfTontine(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/get/list/approval/bouffe/to/a/tontine/${this.token}`, data);
    }
    // Get the list of accepted withdrawal for a seance
    getAcceptedWithdrawalOfSeance(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/get/list/approval/bouffe/to/a/seance/${this.token}`, data);
    }
    // Get the list of cancel withdrawal for a tontine
    getListWithdrawalCancelTontine(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/get/list/refusal/bouffe/to/a/tontine/${this.token}`, data);
    }
    // Get the list of cancel withdrawal for a seance
    getListWithdrawalCancelSeance(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/get/list/refusal/bouffe/to/a/seance/${this.token}`, data);
    }
    // Get all the proof of withdrawal
    getWithdrawalProof(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/get/all/proof/OfABouffe/${this.token}`, data);
    }
    // Cancel a withdrawal cancel
    reCancelWithdrawal(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/cancel/a/reject/bouffe/${this.token}`, data);
    }
    /**  Get list of proof of a member*/
    getListOfProofMember(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`statistique/v1/get/proof/of/a/member/${this.token}`, data);
    }
    /* Confirm that the user receive the money*/
    confirmMemberPayment(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`statistique/v1/confirm/receipt/by/aMember/${this.token}`, data);
    }
    // Get the list of pending beneficiaries not initiate by admin  for a seance 
    getPendingWithdrawal(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/getListBouffage/withStatus/pending/${this.token}`, data);
    }
    // Get the list of pending beneficiaries not initiate by admin  for a seance 
    getPendingInitiateWithdrawal(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/getListInitiate/validation/bouffage/withStatus/pending/${this.token}`, data);
    }
    /* Get the list of pending beneficiaries not initiate by admin  for a tontine */
    getPendingBeneficiariesNotInitiate(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/getListBouffage/tontine/withStatus/pending/${this.token}`, data);
    }
    /* Get the list of pending beneficiaries  initiate by admin  for a tontine */
    getPendingBeneficiariesInitiate(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/getListInitiate/validation/bouffage/tontine/withStatus/pending/${this.token}`, data);
    }
    /* Initiate the payment */
    initiatePayment(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/initiate/bouffage/payment/toComplete/after/${this.token}`, data);
    }
    /* Get the detail of payment initiation */
    getPaymentInitiateInformations(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/get/infos/fund/repartition/${this.token}`, data);
    }
    /* Validate the initiate payment by the admin */
    validateInitiatePayment(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/validate/initiate/bouffage/byAdmin/${this.token}`, data);
    }
    /* Make payment with traditionnal banking */
    makePaymentTradiBank(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/pay/bouffe/withTraditional/Banking/${this.token}`, data);
    }
    /* make the payment with Tontine wallet*/
    makePaymentTontineWallet(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/pay/bouffe/withTontine/Wallet/${this.token}`, data);
    }
    /*Make paiement with operator (MTN, ORANGE, OZOW)*/
    makePaymentOperatorWallet(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/pay/bouffe/withOnline/Wallet/${this.token}`, data);
    }
    /* List of Confirm the payment of jackpot for a tontine*/
    confirmJackpotPaiementTontine(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/get/list/approval/bouffe/to/a/tontine/${this.token}`, data);
    }
    /* List of  Confirm a jackpot payment for a seance */
    confirmJackpotPaiementSeance(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/get/list/approval/bouffe/to/a/seance/${this.token}`, data);
    }
    /* Confirm the payment by the user */
    confirmPaymentByUser(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`bouffe/v1/confirm/receipt/${this.token}`, data);
    }
    /* Pay the due with cash */
    PayDueWithCash(data) {
        this.token = this.userService.getUserToken();
        return this.api.post(`contribution/v1/pay/receipt/with/payment/mode/cash/${this.token}`, data);
    }
};
DebtsManagerService.ctorParameters = () => [
    { type: _user_service_user_service__WEBPACK_IMPORTED_MODULE_3__["UserService"] },
    { type: src_app_shared_service_api_service__WEBPACK_IMPORTED_MODULE_2__["ApiService"] },
    { type: src_app_shared_service_events_service__WEBPACK_IMPORTED_MODULE_4__["EventService"] },
    { type: src_app_shared_service_local_storage_service__WEBPACK_IMPORTED_MODULE_5__["LocalStorageService"] }
];
DebtsManagerService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], DebtsManagerService);



/***/ }),

/***/ "jQH+":
/*!*********************************************************************!*\
  !*** ./src/app/shared/tontine-invited/tontine-invited.component.ts ***!
  \*********************************************************************/
/*! exports provided: TontineInvitedComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TontineInvitedComponent", function() { return TontineInvitedComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_tontine_invited_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./tontine-invited.component.html */ "RuS7");
/* harmony import */ var _tontine_invited_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tontine-invited.component.scss */ "ACRb");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/tontine.service */ "/WEl");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var _service_location_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../service/location.service */ "e009");
/* harmony import */ var src_app_dashboard_invitations_service_invitations_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/dashboard/invitations/service/invitations.service */ "8N1Y");
/* harmony import */ var _service_error_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../service/error.service */ "TkUd");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _countries_countries_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../countries/countries.component */ "KNHg");
/* harmony import */ var _service_form_utils_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../service/form-utils.service */ "14LV");
/* harmony import */ var _dashboard_invitations_service_inivitation_error_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../dashboard/invitations/service/inivitation-error.service */ "/OOw");
/* harmony import */ var _select_data_select_data_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../select-data/select-data.component */ "NvQy");
/* harmony import */ var src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! src/app/dashboard/user/service/user.service */ "6Hie");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../service/events.service */ "r5fM");
/* harmony import */ var _service_ui_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../service/ui.service */ "QB/Y");
/* harmony import */ var _service_util_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../service/util.service */ "6wVa");
/* harmony import */ var src_app_auth_service_auth_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! src/app/auth/service/auth.service */ "RmnQ");




















let TontineInvitedComponent = class TontineInvitedComponent {
    constructor(fb, tontine, zone, translate, modatCtrl, invitation, formUtil, errorService, locate, ui, util, userService, authService, inviteError, event) {
        this.fb = fb;
        this.tontine = tontine;
        this.zone = zone;
        this.translate = translate;
        this.modatCtrl = modatCtrl;
        this.invitation = invitation;
        this.formUtil = formUtil;
        this.errorService = errorService;
        this.locate = locate;
        this.ui = ui;
        this.util = util;
        this.userService = userService;
        this.authService = authService;
        this.inviteError = inviteError;
        this.event = event;
        this.tontines = [];
        this.states = [];
        this.errorPhone = false;
        this.errorEmail = false;
        this.loading = false;
        this.sendListContact = [];
        this.curentTontine = this.tontine.getCurrentTontineData();
    }
    ngOnInit() {
        this.initFormInvitation();
        this.getListOftontines();
        this.getValidationsMessage();
        this.getWordCountries(false);
    }
    // Form getters
    get sendMode() {
        return this.formInvited.get('sendMode');
    }
    get sendList() {
        return this.formInvited.get('sendList');
    }
    get emailOrPhone() {
        return this.formInvited.get('emailOrPhone');
    }
    get phoneId() {
        return this.formInvited.get('phoneid');
    }
    get countryId() {
        return this.formInvited.get('country_id');
    }
    // Init the form 
    initFormInvitation() {
        this.formInvited = this.fb.group({
            tontine_id: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            tontineName: [''],
            members: [[]],
            sendMode: ['sms', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            emailOrPhone: [''],
            sendList: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormArray"]([]),
            phoneid: [''],
            country_id: [''],
            countryName: ['']
        });
    }
    // Remove space
    removeSpace() {
        this.formInvited.get('emailOrPhone').setValue(this.formUtil.removeSpace(this.formInvited.value.emailOrPhone));
    }
    // Truncate the name
    truncateName(value, nbCar) {
        return this.formUtil.troncateName(value, nbCar);
    }
    // can add new member
    canAddNewMember() {
        return !this.formInvited.value.phoneid
            || !this.formInvited.value.emailOrPhone
            || this.formInvited.value.emailOrPhone && ((!this.errorPhone && this.sendMode.value === 'sms') || (!this.errorEmail && this.sendMode.value === 'email'));
    }
    // can show contact member
    canShowContactMember() {
        return this.formInvited.value.emailOrPhone && (!this.errorPhone && (this.sendMode.value === 'sms') || !this.errorEmail && (this.sendMode.value === 'email'));
    }
    // Can invite member
    canInviteMember() {
        return this.formInvited.invalid
            || this.loading
            || this.formInvited.value.emailOrPhone && (!this.errorPhone && !this.errorEmail)
            || (!this.formInvited.value.emailOrPhone && this.sendList.length === 0);
    }
    // Get validations messages
    getValidationsMessage() {
        this.translate.get(['M_SEND_MODE_ERROR_MSG']).subscribe(trans => {
            this.validationMessages = {
                sendMode: [
                    { type: 'required', message: trans.M_SEND_MODE_ERROR_MSG }
                ]
            };
        });
    }
    // Validate the field
    validateFields(mode) {
        this.removeSpace();
        this.errorPhone = false;
        this.errorEmail = false;
        if (mode === 'sms') {
            this.errorPhone = this.formUtil.validatePhone(this.formInvited.value.emailOrPhone);
        }
        else if (mode === 'email') {
            this.errorEmail = this.formUtil.validateEmail(this.formInvited.value.emailOrPhone);
        }
    }
    // Update the country
    updateCountryPrefix(currentCountry) {
        this.states.forEach(state => {
            if (state.country_id === currentCountry) {
                this.formInvited.get('phoneid').setValue(state.country_prefixe);
                this.formInvited.get('country_id').setValue(state.country_id);
                this.formInvited.get('countryName').setValue(state.country_label);
            }
        });
    }
    // Get all the word countries
    getWordCountries(refresh) {
        this.locate.getWordCountries(refresh).then((countries) => {
            if (countries && countries.length > 0) {
                this.states = countries;
                this.getCurrentCountry(false);
            }
        });
    }
    // Set the default country
    getCurrentCountry(refresher) {
        this.locate.getCurrentWordCountryInfo(refresher).then((country) => {
            if (country) {
                this.updateCountryPrefix(country.country_id);
            }
        }).catch(error => {
        });
    }
    // open the countries modal
    showCountries() {
        this.modatCtrl
            .create({
            component: _countries_countries_component__WEBPACK_IMPORTED_MODULE_11__["CountriesComponent"]
        })
            .then(modalEl => {
            modalEl.present();
            modalEl.onDidDismiss().then((ans) => {
                if (ans && ans.role === 'select') {
                    this.states.forEach(state => {
                        if (state.code_country === ans.data) {
                            this.formInvited.get('countryName').setValue(state.country_label);
                            this.formInvited.get('phoneid').setValue(state.country_prefixe);
                            this.formInvited.get('country_id').setValue(state.country_id);
                        }
                    });
                }
            });
        });
    }
    // Add a member
    addMberContact(mberContact) {
        if (this.formUtil.validatePhone(mberContact.value)) {
            const phoneNumber = this.formInvited.value.phoneid + mberContact.value;
            this.sendList.push(new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](phoneNumber));
            this.sendListContact.push({ emailOrPhone: phoneNumber, PhoneOnly: mberContact.value, platform: 'mobile' });
        }
        else {
            this.sendList.push(new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](mberContact.value));
            this.sendListContact.push({ emailOrPhone: mberContact.value, PhoneOnly: null, platform: 'mobile' });
        }
        mberContact.value = '';
        this.formInvited.value.emailOrPhone = '';
    }
    // Remove contact
    removeContact(contact) {
        const index = this.sendList.controls.indexOf(contact);
        this.sendList.removeAt(index);
        const objIndex = this.sendListContact.findIndex(o => o.emailOrPhone === contact.value);
        if (objIndex > -1) {
            this.sendListContact.splice(objIndex, 1);
        }
    }
    // show the tontine modal
    showTontines() {
        this.modatCtrl
            .create({
            component: _select_data_select_data_component__WEBPACK_IMPORTED_MODULE_14__["SelectDataComponent"],
            componentProps: {
                tontine: this.tontines,
                type: 'tontine'
            }
        })
            .then(modalEl => {
            modalEl.present();
            modalEl.onDidDismiss().then((ans) => {
                if (ans && ans.role === 'select') {
                    this.formInvited.get('tontine_id').setValue(ans.data.id);
                    this.formInvited.get('tontineName').setValue(ans.data.name);
                }
            });
        });
    }
    // Get the list of tontines
    getListOftontines() {
        this.tontine.getMyTontine().subscribe((reponse) => {
            if (reponse && reponse.message === 'success') {
                if (reponse.liste_tontine && reponse.liste_tontine.length > 0) {
                    this.zone.run(() => {
                        reponse.liste_tontine = this.util.oderByTontineDate(reponse.liste_tontine);
                        this.tontines = reponse.liste_tontine.filter(data => { return data.tontine.administrator === 1; });
                    });
                    if (this.tontines && this.tontines.length) {
                        setTimeout(() => {
                            if (this.curentTontine && this.curentTontine.tontine && this.curentTontine.tontine.tontine_id) {
                                const currentTontine = this.tontines.filter(data => { return data.tontine.tontine_id === this.curentTontine.tontine.tontine_id; });
                                if (currentTontine && currentTontine.length > 0) {
                                    this.formInvited.get('tontine_id').setValue(currentTontine[0].tontine.tontine_id);
                                    this.formInvited.get('tontineName').setValue(currentTontine[0].tontine.name);
                                }
                                else {
                                    this.formInvited.get('tontine_id').setValue(this.tontines[0].tontine.tontine_id);
                                    this.formInvited.get('tontineName').setValue(this.tontines[0].tontine.name);
                                }
                            }
                            else {
                                this.formInvited.get('tontine_id').setValue(this.tontines[0].tontine.tontine_id);
                                this.formInvited.get('tontineName').setValue(this.tontines[0].tontine.name);
                            }
                        }, 500);
                    }
                }
            }
        }, error => {
            if (error && error.error && error.error.user_not_found) {
                this.errorService.renewSession().then((data) => {
                    if (data && data.result === "OK") {
                        this.getListOftontines();
                    }
                });
            }
            else {
                this.errorService.manageError(error);
            }
        });
    }
    // send invitations to the user
    sendInvitation() {
        this.loading = true;
        this.translate.get('SENDING_INVITATION').subscribe(trans => {
            this.ui.presentLoading(trans);
        });
        const user = this.userService.getUserData();
        if (this.formInvited.value.emailOrPhone) {
            if (this.formInvited.value.sendMode === 'sms') {
                const phoneNumber = this.formInvited.value.phoneid + this.formInvited.value.emailOrPhone;
                this.sendListContact.push({ emailOrPhone: phoneNumber, PhoneOnly: this.formInvited.value.emailOrPhone, platform: 'mobile' });
            }
            else {
                this.sendListContact.push({ emailOrPhone: this.formInvited.value.emailOrPhone, PhoneOnly: null, platform: 'mobile' });
            }
        }
        // Remove double
        this.sendListContact = this.sendListContact.filter((elem, index, self) => self.findIndex((t) => { return (t.emailOrPhone === elem.emailOrPhone && t.PhoneOnly === elem.PhoneOnly); }) === index);
        this.formInvited.get('members').setValue(this.sendListContact);
        this.invitation.sendInvitationTontine(this.formInvited.value, user.id)
            .subscribe((reponse) => {
            this.ui.dismissLoading();
            this.loading = false;
            this.initFormInvitation();
            this.getListOftontines();
            this.getWordCountries(false);
            this.translate.get('TONTINE_INVITED_TEXT5').subscribe(value => {
                this.ui.presentToast(value);
            });
            const currentDate = new Date();
            this.authService.setAppLastSession(currentDate.getTime());
            this.event.publish('new-invitation');
        }, error => {
            this.ui.dismissLoading();
            this.loading = false;
            if (error && error.error && !error.error.success) {
                this.inviteError.manageInviteError(error);
            }
            else {
                this.errorService.manageError(error);
            }
        });
    }
};
TontineInvitedComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_5__["TontineService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_6__["TranslateService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_10__["ModalController"] },
    { type: src_app_dashboard_invitations_service_invitations_service__WEBPACK_IMPORTED_MODULE_8__["InvitationsService"] },
    { type: _service_form_utils_service__WEBPACK_IMPORTED_MODULE_12__["FormUtilsService"] },
    { type: _service_error_service__WEBPACK_IMPORTED_MODULE_9__["ErrorService"] },
    { type: _service_location_service__WEBPACK_IMPORTED_MODULE_7__["LocationService"] },
    { type: _service_ui_service__WEBPACK_IMPORTED_MODULE_17__["UiService"] },
    { type: _service_util_service__WEBPACK_IMPORTED_MODULE_18__["UtilService"] },
    { type: src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_15__["UserService"] },
    { type: src_app_auth_service_auth_service__WEBPACK_IMPORTED_MODULE_19__["AuthService"] },
    { type: _dashboard_invitations_service_inivitation_error_service__WEBPACK_IMPORTED_MODULE_13__["InivitationErrorService"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_16__["EventService"] }
];
TontineInvitedComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-tontine-invited',
        template: _raw_loader_tontine_invited_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_tontine_invited_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], TontineInvitedComponent);



/***/ }),

/***/ "kLfG":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm lazy ^\.\/.*\.entry\.js$ include: \.entry\.js$ exclude: \.system\.entry\.js$ namespace object ***!
  \*****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./ion-action-sheet.entry.js": [
		"dUtr",
		"common",
		0
	],
	"./ion-alert.entry.js": [
		"Q8AI",
		"common",
		1
	],
	"./ion-app_8.entry.js": [
		"hgI1",
		"common",
		2
	],
	"./ion-avatar_3.entry.js": [
		"CfoV",
		"common",
		3
	],
	"./ion-back-button.entry.js": [
		"Nt02",
		"common",
		4
	],
	"./ion-backdrop.entry.js": [
		"Q2Bp",
		5
	],
	"./ion-button_2.entry.js": [
		"0Pbj",
		"common",
		6
	],
	"./ion-card_5.entry.js": [
		"ydQj",
		"common",
		7
	],
	"./ion-checkbox.entry.js": [
		"4fMi",
		"common",
		8
	],
	"./ion-chip.entry.js": [
		"czK9",
		"common",
		9
	],
	"./ion-col_3.entry.js": [
		"/CAe",
		10
	],
	"./ion-datetime_3.entry.js": [
		"WgF3",
		"common",
		11
	],
	"./ion-fab_3.entry.js": [
		"uQcF",
		"common",
		12
	],
	"./ion-img.entry.js": [
		"wHD8",
		13
	],
	"./ion-infinite-scroll_2.entry.js": [
		"2lz6",
		14
	],
	"./ion-input.entry.js": [
		"ercB",
		"common",
		15
	],
	"./ion-item-option_3.entry.js": [
		"MGMP",
		"common",
		16
	],
	"./ion-item_8.entry.js": [
		"9bur",
		"common",
		17
	],
	"./ion-loading.entry.js": [
		"cABk",
		"common",
		18
	],
	"./ion-menu_3.entry.js": [
		"kyFE",
		"common",
		19
	],
	"./ion-modal.entry.js": [
		"TvZU",
		"common",
		20
	],
	"./ion-nav_2.entry.js": [
		"vnES",
		"common",
		21
	],
	"./ion-popover.entry.js": [
		"qCuA",
		"common",
		22
	],
	"./ion-progress-bar.entry.js": [
		"0tOe",
		"common",
		23
	],
	"./ion-radio_2.entry.js": [
		"h11V",
		"common",
		24
	],
	"./ion-range.entry.js": [
		"XGij",
		"common",
		25
	],
	"./ion-refresher_2.entry.js": [
		"nYbb",
		"common",
		26
	],
	"./ion-reorder_2.entry.js": [
		"smMY",
		"common",
		27
	],
	"./ion-ripple-effect.entry.js": [
		"STjf",
		28
	],
	"./ion-route_4.entry.js": [
		"k5eQ",
		"common",
		29
	],
	"./ion-searchbar.entry.js": [
		"OR5t",
		"common",
		30
	],
	"./ion-segment_2.entry.js": [
		"fSgp",
		"common",
		31
	],
	"./ion-select_3.entry.js": [
		"lfGF",
		"common",
		32
	],
	"./ion-slide_2.entry.js": [
		"5xYT",
		33
	],
	"./ion-spinner.entry.js": [
		"nI0H",
		"common",
		34
	],
	"./ion-split-pane.entry.js": [
		"NAQR",
		35
	],
	"./ion-tab-bar_2.entry.js": [
		"knkW",
		"common",
		36
	],
	"./ion-tab_2.entry.js": [
		"TpdJ",
		"common",
		37
	],
	"./ion-text.entry.js": [
		"ISmu",
		"common",
		38
	],
	"./ion-textarea.entry.js": [
		"U7LX",
		"common",
		39
	],
	"./ion-toast.entry.js": [
		"L3sA",
		"common",
		40
	],
	"./ion-toggle.entry.js": [
		"IUOf",
		"common",
		41
	],
	"./ion-virtual-scroll.entry.js": [
		"8Mb5",
		42
	]
};
function webpackAsyncContext(req) {
	if(!__webpack_require__.o(map, req)) {
		return Promise.resolve().then(function() {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}

	var ids = map[req], id = ids[0];
	return Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {
		return __webpack_require__(id);
	});
}
webpackAsyncContext.keys = function webpackAsyncContextKeys() {
	return Object.keys(map);
};
webpackAsyncContext.id = "kLfG";
module.exports = webpackAsyncContext;

/***/ }),

/***/ "lgQC":
/*!*********************************************************!*\
  !*** ./src/app/shared/paidmode/paidmode.component.scss ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwYWlkbW9kZS5jb21wb25lbnQuc2NzcyJ9 */");

/***/ }),

/***/ "m9Q8":
/*!*************************************************************!*\
  !*** ./src/app/shared/view-proof/view-proof.component.scss ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ2aWV3LXByb29mLmNvbXBvbmVudC5zY3NzIn0= */");

/***/ }),

/***/ "mSu/":
/*!***************************************************************!*\
  !*** ./src/app/shared/wallet-order/wallet-order.component.ts ***!
  \***************************************************************/
/*! exports provided: WalletOrderComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WalletOrderComponent", function() { return WalletOrderComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_wallet_order_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./wallet-order.component.html */ "etID");
/* harmony import */ var _wallet_order_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wallet-order.component.scss */ "nzBo");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var _service_error_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../service/error.service */ "TkUd");
/* harmony import */ var src_app_dashboard_my_tontines_services_debts_manager_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/debts-manager.service */ "ijC1");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/tontine.service */ "/WEl");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _service_payment_error_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../service/payment-error.service */ "FLu1");
/* harmony import */ var src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/dashboard/user/service/user.service */ "6Hie");
/* harmony import */ var _service_ui_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../service/ui.service */ "QB/Y");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../service/events.service */ "r5fM");















let WalletOrderComponent = class WalletOrderComponent {
    constructor(fb, translate, event, user, tontine, navController, router, error, debt, ui, paymentError) {
        this.fb = fb;
        this.translate = translate;
        this.event = event;
        this.user = user;
        this.tontine = tontine;
        this.navController = navController;
        this.router = router;
        this.error = error;
        this.debt = debt;
        this.ui = ui;
        this.paymentError = paymentError;
        this.loadingPay = false;
        this.currentTontine = this.tontine.getCurrentTontineData();
        this.loading = false;
        this.currentUser = this.user.getUserData();
    }
    ngOnInit() {
        this.initFormMessage();
        this.initTradionnalPayment();
    }
    // Getters
    get montant() {
        return this.paymentForm.get('montantValue');
    }
    get receipt() {
        return this.paymentForm.get('receipt');
    }
    get reason() {
        return this.paymentForm.get('reason');
    }
    // Init traditional banking payment
    initTradionnalPayment() {
        const params = this.debt.getDebtsData();
        this.paymentForm = this.fb.group({
            user_id: [this.currentUser.id, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            bouffe_id: [params ? params.bouffe_id : '', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            device_id: [params ? params.device_id : '', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            reason: [''],
            montantValue: [{ value: this.balance, disabled: true }, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].min(1)])],
            montant: [this.balance, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].min(1), _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].max(this.balance)])]
        });
    }
    // Init form message
    initFormMessage() {
        this.translate.get(['DEBT_AMOUNT_REQUIRED_TEXT', 'DEBT_PROOF_MSG_REQUIRED_TEXT', 'DEBT_REASON_MSG_REQUIRED_TEXT', 'ERROR_MIN_AMOUNT', 'ERROR_MAX_AMOUNT'])
            .subscribe(trans => {
            this.validationMessages = {
                montant: [
                    { type: 'required', message: trans.DEBT_AMOUNT_REQUIRED_TEXT },
                    { type: 'min', message: `${trans.ERROR_MIN_AMOUNT} ${1}` },
                    { type: 'max', message: `${trans.ERROR_MAX_AMOUNT} ${this.balance}` }
                ],
                description: [
                    { type: 'required', message: trans.DEBT_PROOF_MSG_REQUIRED_TEXT }
                ],
                reason: [
                    { type: 'required', message: trans.DEBT_REASON_MSG_REQUIRED_TEXT }
                ]
            };
        });
    }
    // Make the payment with wallet
    makePayment() {
        this.loadingPay = true;
        this.debt.makePaymentTontineWallet(this.paymentForm.value).subscribe((reponse) => {
            this.loadingPay = false;
            if (reponse && reponse.message === 'success') {
                this.translate.get('DEBT_PAYMENT_BENEFICIAL_SUCCES_MSG').subscribe(trans => {
                    this.ui.presentToast(trans);
                });
                this.event.publish('modal-close');
                this.navController.setDirection('root');
                this.router.navigate(['/', 'dashboard', 'my-tontines', this.currentTontine.tontine.tontine_id, 'session-no-paid']);
            }
        }, error => {
            if (error && error.error) {
                if (error.error.user_not_found) {
                    this.error.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.makePayment();
                        }
                        else {
                            this.loadingPay = false;
                        }
                    });
                }
                else {
                    this.loadingPay = false;
                    this.paymentError.managePaymentOfflineError(error);
                }
            }
            else {
                this.loadingPay = false;
                this.error.manageError(error);
            }
        });
    }
};
WalletOrderComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_5__["TranslateService"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_14__["EventService"] },
    { type: src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_12__["UserService"] },
    { type: src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_9__["TontineService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_10__["NavController"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_8__["Router"] },
    { type: _service_error_service__WEBPACK_IMPORTED_MODULE_6__["ErrorService"] },
    { type: src_app_dashboard_my_tontines_services_debts_manager_service__WEBPACK_IMPORTED_MODULE_7__["DebtsManagerService"] },
    { type: _service_ui_service__WEBPACK_IMPORTED_MODULE_13__["UiService"] },
    { type: _service_payment_error_service__WEBPACK_IMPORTED_MODULE_11__["PaymentErrorService"] }
];
WalletOrderComponent.propDecorators = {
    amountPay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    balance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};
WalletOrderComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-wallet-order',
        template: _raw_loader_wallet_order_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_wallet_order_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], WalletOrderComponent);



/***/ }),

/***/ "mlKa":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/paidmode-seance-caution/paidmode-seance-caution.component.html ***!
  \*****************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<form [formGroup]=\"userPayMethodForm\">\r\n  <p class=\"ion-text-center\"  *ngIf=\"loadingOperator\">\r\n    <ion-spinner  name=\"circles\"></ion-spinner>\r\n  </p>\r\n<ion-grid>\r\n  <ion-row>\r\n    <ion-col size=\"12\">\r\n      <ion-card class=\"paidmode\">\r\n        <ion-card-content class=\"ion-text-center\">    \r\n          <ion-row>\r\n            <ion-col size=\"12\">\r\n              <ion-item>\r\n                <ion-label>{{'COUNTRY_TEXT' | translate}}</ion-label>\r\n                <ion-select (ionChange)=\"updateCurrencyCountry(userPayMethodForm.value.country_id)\" name=\"country_id\" formControlName=\"country_id\">\r\n                  <ion-select-option [value]=\"country.country_id\" *ngFor=\"let country of states\">{{ country.country_label }}</ion-select-option>          \r\n                </ion-select>\r\n              </ion-item>   \r\n              <div class=\"validation-errors\">\r\n                <ng-container *ngFor=\"let validation of validationMessages.country_id\">\r\n                  <div class=\"error-message\" *ngIf=\"country.hasError(validation.type) && (country.dirty || country.touched)\">\r\n                    <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                    {{ validation.message }}\r\n                  </div>\r\n                </ng-container>\r\n              </div>     \r\n            </ion-col>\r\n          </ion-row>       \r\n            <ion-row class=\"ion-justify-content-end\" *ngIf=\"userPayMethodForm.value.country_id && paymentMethods && paymentMethods.length > 0\">\r\n              <ion-col size=\"4\">\r\n                <ion-img [src]=\"paymentMethods && paymentMethods[userPayMethodForm.value.typePaymentIndex] ? paymentMethods[userPayMethodForm.value.typePaymentIndex].logo : ' '\" class=\"logooperator\"></ion-img>\r\n              </ion-col>\r\n            </ion-row>  \r\n            <ion-row  *ngIf=\"userPayMethodForm.value.country_id && paymentMethods && paymentMethods.length > 0\">\r\n              <ion-col size=\"12\">\r\n                <ion-item>\r\n                  <ion-label>{{ 'USER_PROFILE_TEXT4' | translate }}</ion-label>\r\n                  <ion-select (ionChange)=\"updatePaymentMethod(userPayMethodForm.value.typePaymentIndex)\" name=\"typePaymentIndex\" formControlName=\"typePaymentIndex\">\r\n                    <ion-select-option *ngFor=\"let operator of paymentMethods; let operatorId = index\"\r\n                    [value]=\"operatorId\">{{ operator.name }}</ion-select-option>           \r\n                  </ion-select>\r\n                </ion-item>   \r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.payementtype\">\r\n                    <div class=\"error-message\" *ngIf=\"payementtype.hasError(validation.type) && (payementtype.dirty || payementtype.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>   \r\n              </ion-col>\r\n            </ion-row> \r\n            <ion-row  *ngIf=\"checkMobileOperator()\">\r\n              <ion-col size=\"4\">\r\n                <ion-item >\r\n                  <ion-label position=\"floating\">+</ion-label>\r\n                  <ion-input placeholder=\"{{userPayMethodForm.value.country_prefix}}\" type=\"text\"></ion-input>\r\n                </ion-item>        \r\n              </ion-col>\r\n              <ion-col size=\"8\">\r\n                <ion-item>\r\n                  <ion-label position=\"floating\">{{ 'REGISTER_MPHONE' | translate }}</ion-label>\r\n                  <ion-input (ionChange)=\"checckEmailOrPhone(userPayMethodForm.value.phone,userPayMethodForm.value.typePaymentIndex)\" type=\"tel\" formControlName=\"phone\"></ion-input>\r\n                </ion-item> \r\n              </ion-col>\r\n              <ion-col size=\"12\">\r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.phone\">\r\n                    <div class=\"error-message\" *ngIf=\"phone.hasError(validation.type) && (phone.dirty || phone.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>\r\n                <div class=\"validation-errors\" *ngIf=\"errorPhone\">\r\n                    <div class=\"error-message\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      <span [innerHTML]=\"'USER_DETAIL_TEXT11' | translate\"></span>\r\n                    </div>\r\n                </div>\r\n                     \r\n              </ion-col>\r\n            </ion-row> \r\n            <ion-row>\r\n              <ion-col>\r\n                <div class=\"padding\"\r\n                *ngIf=\"canShowPaypalMessage()\">\r\n                <p style=\"color: red\">{{paypalMessage}}</p>\r\n              </div>\r\n              </ion-col>\r\n            </ion-row>                           \r\n        </ion-card-content>\r\n      </ion-card>\r\n    </ion-col>      \r\n  </ion-row>\r\n  <ion-row>\r\n    <svg height=\"0\" width=\"0\" viewBox=\"0 0 27.7 28.93\">\r\n      <defs>\r\n        <clipPath id=\"pay-btn-shape\" >\r\n          <path d=\"M2.57,17.21A11.18,11.18,0,0,1,9.17,5.77h.06l.17-.22.11-.23c-1-.73-1.56-1.42-1.39-2,.42-1.32,5-1.17,10.22.33S27.43,7.47,27,8.81c-.16.48-.86.76-1.88.86h0v.1a5,5,0,0,0,.08.66,3.77,3.77,0,0,0,.1.46l.07.23c2,4,1.7,8.37-1.73,12.53a12.23,12.23,0,0,1-18.42-.1A11.55,11.55,0,0,1,2.57,17.21Z\" />            \r\n        </clipPath>        \r\n      </defs>\r\n    </svg>\r\n    <ion-col size=\"12\" class=\"ion-text-center wrap-pay-btn\" *ngIf=\"canPay()\"  (click)=\"showPayment(userPayMethodForm.value)\">\r\n      <svg id=\"pay-btn\" preserveAspectRatio=\"xMidYMid slice\" viewBox=\"0 0 27.7 28.93\">\r\n        <path  class=\"arc-part\" d=\"M5.91,6.89a12.25,12.25,0,0,0-4.14,9.27,11.14,11.14,0,0,0,.16,1.7,12.82,12.82,0,0,0,.42,1.66c.08.27.19.54.29.8A8.24,8.24,0,0,0,3,21.1a14.85,14.85,0,0,0,.82,1.5,12.25,12.25,0,0,0,3.5,3.62,13.49,13.49,0,0,0,8,2.21,15.81,15.81,0,0,0,1.7-.17,13.74,13.74,0,0,0,1.69-.37,12.79,12.79,0,0,0,5.65-3.5,11.63,11.63,0,0,0,1.88-2.83,12.11,12.11,0,0,0,1.06-3.27,11,11,0,0,0-.94-6.84A10.42,10.42,0,0,1,27.23,13a10.65,10.65,0,0,1,.63,1.71,11.3,11.3,0,0,1,.22,3.64,12.78,12.78,0,0,1-.94,3.56,12.11,12.11,0,0,1-1.88,3.17,12.84,12.84,0,0,1-1.31,1.33,13.32,13.32,0,0,1-1.49,1.12,14,14,0,0,1-3.37,1.59,13,13,0,0,1-1.82.43,17.17,17.17,0,0,1-1.88.21,14.31,14.31,0,0,1-3.77-.27,14.55,14.55,0,0,1-5.12-2.19,11.53,11.53,0,0,1-1.41-1.17A13.92,13.92,0,0,1,.92,18a10.3,10.3,0,0,1-.08-1.88A12.36,12.36,0,0,1,3.31,9.34,10.42,10.42,0,0,1,5.91,6.89ZM7.27,3.35a1.52,1.52,0,0,1-.08-.78,1.82,1.82,0,0,1,.32-.76A2.29,2.29,0,0,1,9,1,6.31,6.31,0,0,1,9.78.89h2.36a25.76,25.76,0,0,1,6.19,1,23.94,23.94,0,0,1,5.74,2.5,20.58,20.58,0,0,1,2.56,1.83,3.84,3.84,0,0,1,1,1.27,1.29,1.29,0,0,1,.08.84,1.24,1.24,0,0,1-.47.64,1.21,1.21,0,0,0,.29-.67,1,1,0,0,0-.21-.65,3.64,3.64,0,0,0-1.07-.94c-.86-.53-1.75-1-2.66-1.47A34.29,34.29,0,0,0,18,3.06,38.16,38.16,0,0,0,12,1.84c-.5-.06-1-.11-1.52-.15l-.73-.13a6.42,6.42,0,0,0-.73,0A1.88,1.88,0,0,0,7.77,2,1.57,1.57,0,0,0,7.27,3.35Z\" />\r\n        <g class=\"pay-btn-border\">\r\n          <rect x=\"1.35\" y=\"0.56\" width=\"25.09\" height=\"26.44\" class=\"inner-pot\" />\r\n        </g>\r\n        <path class=\"pot-entry\" d=\"M22,6.27c-1.13-.38-2.45-.85-3.86-1.22-1-.28-2.17-.57-3.11-.75-2.64-.47-4.52-.57-4.62-.09-.09.19.19.57.75.85A24.19,24.19,0,0,0,17.46,7.4a22.19,22.19,0,0,0,7.07,1.13c.38-.09.66-.19.66-.28C25.32,7.9,24.05,7.15,22,6.27Z\" />\r\n        <text class=\"pay-text\"><tspan style=\"letter-spacing: -0.05859375em\">P</tspan><tspan x=\"4.94\" y=\"0\" style=\"letter-spacing: -0.087890625em\">A</tspan><tspan x=\"10.56\" y=\"0\">Y</tspan></text>\r\n      </svg>       \r\n      <div class=\"glow-wrap\">\r\n        <i class=\"glow\"></i>\r\n      </div>          \r\n    </ion-col>\r\n  </ion-row> \r\n  <ion-row  *ngIf=\"paypalLoading\">\r\n    <ion-col>\r\n      <p class=\"ion-text-center ion-padding\">\r\n        <ion-spinner  name=\"circles\"></ion-spinner>\r\n      </p>\r\n    </ion-col>\r\n  </ion-row> \r\n  <ion-row *ngIf=\"canShowPaypalButton()\">\r\n    <ion-col class=\"ion-padding\" size=\"12\">\r\n      <div #paypalbuttoncontainer id=\"paypal-button-container\"></div> \r\n    </ion-col>\r\n  </ion-row> \r\n</ion-grid>\r\n</form> \r\n");

/***/ }),

/***/ "mw90":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/paidmode-tontine/paidmode-tontine.component.html ***!
  \***************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<form [formGroup]=\"paymentForm\">\r\n<ion-grid>\r\n  <ion-row>\r\n    <ion-col size=\"12\">      \r\n      <ion-card class=\"paidmode\">\r\n        <ion-card-content class=\"ion-text-center\">   \r\n            <ion-row>\r\n              <ion-col size=\"12\">\r\n                <ion-item>\r\n                  <ion-label>{{ 'DESTINATION_TEXT' | translate }}</ion-label>\r\n                  <ion-select (ionChange)=\"updateCheckout(paymentForm.value.checkoutName)\" formControlName=\"checkoutName\">\r\n                    <ion-select-option *ngFor=\"let checkout of typesCaisses\" [value]=\"checkout.index\">{{ checkout.name }}</ion-select-option>          \r\n                  </ion-select>\r\n                </ion-item>   \r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.checkoutName\">\r\n                    <div class=\"error-message\" *ngIf=\"checkoutName.hasError(validation.type) && (checkoutName.dirty || checkoutName.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>   \r\n              </ion-col>\r\n            </ion-row>   \r\n            <ion-row>\r\n              <ion-col size=\"12\">\r\n                <ion-item>\r\n                  <ion-label>{{'COUNTRY_TEXT' | translate}}</ion-label>\r\n                  <ion-select (ionChange)=\"updateCurrencyCountry(paymentForm.value.country_id)\" name=\"country_id\" formControlName=\"country_id\">\r\n                    <ion-select-option [value]=\"country.country_id\" *ngFor=\"let country of states\">{{ country.country_label }}</ion-select-option>          \r\n                  </ion-select>\r\n                </ion-item>   \r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.country_id\">\r\n                    <div class=\"error-message\" *ngIf=\"country.hasError(validation.type) && (country.dirty || country.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>     \r\n              </ion-col>\r\n            </ion-row>    \r\n            <ion-row class=\"ion-justify-content-end\" *ngIf=\"paymentForm.value.country_id && paymentMethods && paymentMethods.length > 0\">\r\n              <ion-col size=\"4\">\r\n                <ion-img [src]=\"paymentMethods && paymentMethods[paymentForm.value.typePaymentIndex] ? paymentMethods[paymentForm.value.typePaymentIndex].logo : ' '\" class=\"logooperator\"></ion-img>\r\n              </ion-col>\r\n            </ion-row>   \r\n            <ion-row  *ngIf=\"paymentForm.value.country_id && paymentMethods && paymentMethods.length > 0\">\r\n              <ion-col size=\"12\">\r\n                <ion-item>\r\n                  <ion-label>{{ 'SOURCE_FOUND_TEXT' | translate }}</ion-label>\r\n                  <ion-select (ionChange)=\"updatePaymentMethod(paymentForm.value.typePaymentIndex)\" name=\"typePaymentIndex\" formControlName=\"typePaymentIndex\">\r\n                    <ion-select-option *ngFor=\"let operator of paymentMethods; let operatorId = index\"\r\n                    [value]=\"operatorId\">{{ operator.name | uppercase }}</ion-select-option>           \r\n                  </ion-select>\r\n                </ion-item>   \r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.payementtype\">\r\n                    <div class=\"error-message\" *ngIf=\"payementtype.hasError(validation.type) && (payementtype.dirty || payementtype.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>   \r\n              </ion-col>\r\n            </ion-row>           \r\n            <ion-row *ngIf=\"checkCaisse()\">\r\n              <ion-col size=\"12\">\r\n                <ion-item>\r\n                  <ion-label>{{'WALLET_TYPE' | translate }}</ion-label>\r\n                  <ion-select formControlName=\"checkoutType\">\r\n                    <ion-select-option *ngFor=\"let walletType of walletTypes\" [value]=\"walletType\">{{ walletType }}</ion-select-option>          \r\n                  </ion-select>\r\n                </ion-item>   \r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.payementtype\">\r\n                    <div class=\"error-message\"  *ngIf=\"checkoutType.hasError(validation.type) && (checkoutType.dirty || checkoutType.touched)\" >\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>   \r\n              </ion-col>\r\n            </ion-row>    \r\n            <ion-row *ngIf=\"checkMobileOperator()\">\r\n            <ion-col size=\"4\">\r\n              <ion-item >\r\n                <ion-label position=\"floating\">+</ion-label>\r\n                <ion-input placeholder=\"{{paymentForm.value.country_prefix}}\" type=\"text\"></ion-input>\r\n              </ion-item>        \r\n            </ion-col>\r\n            <ion-col size=\"8\">\r\n              <ion-item  >\r\n                <ion-label position=\"floating\">{{ 'REGISTER_MPHONE' | translate }}</ion-label>\r\n                <ion-input (ionChange)=\"checckEmailOrPhone(paymentForm.value.phone,paymentForm.value.typePaymentIndex)\" type=\"tel\" formControlName=\"phone\"></ion-input>\r\n              </ion-item> \r\n            </ion-col>  \r\n            <ion-col size=\"12\"> \r\n                <div class=\"validation-errors\" *ngIf=\"errorPhone\">\r\n                  <div class=\"error-message\">\r\n                    <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                    <span [innerHTML]=\"'USER_DETAIL_TEXT11' | translate\"></span>\r\n                  </div>\r\n              </div>        \r\n            </ion-col>\r\n            </ion-row> \r\n            <ion-row class=\"ion-padding-bottom\">\r\n              <ion-col size=\"12\">\r\n                <ion-item>\r\n                  <ion-label position=\"floating\" >{{ 'AMOUNT_TEXT' | translate }}</ion-label>\r\n                  <ion-input  (ionChange)=\"updatePaypalAmount(); removeSpaceAmount()\" type=\"number\" formControlName=\"amount\"></ion-input>\r\n                  <span slot=\"end\" class=\"slot-prefix ion-no-margin\"> {{ currentTontine.tontine.monnaie }} </span>\r\n                </ion-item> \r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.amount\">\r\n                    <div class=\"error-message\" *ngIf=\"amount.hasError(validation.type) && (amount.dirty || amount.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>         \r\n              </ion-col>\r\n            </ion-row>\r\n            <ion-col size=\"12\">\r\n              <ion-item  >\r\n                <ion-input type=\"text\" placeholder=\"{{ 'M_INVITE_DELETE_PLACEHOLDER' | translate }}\" formControlName=\"reason\"></ion-input>\r\n              </ion-item> \r\n            </ion-col> \r\n            <ion-row  *ngIf=\"canShowPaypalMessage()\">\r\n              <ion-col>\r\n                <div class=\"padding\">\r\n                <p style=\"color: red\">{{paypalMessage}}</p>\r\n              </div>\r\n              </ion-col>\r\n            </ion-row>\r\n            <ion-row *ngIf=\"canGetProof()\">\r\n              <ion-col class=\"ion-text-end\">\r\n                <ion-button color=\"primary\" size=\"medium\" class=\"ion-text-capitalize\" (click)=\"getProof()\"> {{\r\n                  'UPLOAD_PROOF' | translate\r\n                }}\r\n                  <ion-icon name=\"camera\"></ion-icon>\r\n                </ion-button>\r\n              </ion-col>\r\n            </ion-row>                          \r\n        </ion-card-content>\r\n      </ion-card>\r\n    </ion-col>      \r\n  </ion-row>\r\n  <ion-row>\r\n    <svg height=\"0\" width=\"0\" viewBox=\"0 0 27.7 28.93\">\r\n      <defs>\r\n        <clipPath id=\"pay-btn-shape\" >\r\n          <path d=\"M2.57,17.21A11.18,11.18,0,0,1,9.17,5.77h.06l.17-.22.11-.23c-1-.73-1.56-1.42-1.39-2,.42-1.32,5-1.17,10.22.33S27.43,7.47,27,8.81c-.16.48-.86.76-1.88.86h0v.1a5,5,0,0,0,.08.66,3.77,3.77,0,0,0,.1.46l.07.23c2,4,1.7,8.37-1.73,12.53a12.23,12.23,0,0,1-18.42-.1A11.55,11.55,0,0,1,2.57,17.21Z\" />            \r\n        </clipPath>        \r\n      </defs>\r\n    </svg>\r\n    <ion-col size=\"12\" class=\"ion-text-center wrap-pay-btn\" *ngIf=\"canRecharge()\"  (click)=\"showPayment(paymentForm.value)\">\r\n      <svg id=\"pay-btn\" preserveAspectRatio=\"xMidYMid slice\" viewBox=\"0 0 27.7 28.93\">\r\n        <path  class=\"arc-part\" d=\"M5.91,6.89a12.25,12.25,0,0,0-4.14,9.27,11.14,11.14,0,0,0,.16,1.7,12.82,12.82,0,0,0,.42,1.66c.08.27.19.54.29.8A8.24,8.24,0,0,0,3,21.1a14.85,14.85,0,0,0,.82,1.5,12.25,12.25,0,0,0,3.5,3.62,13.49,13.49,0,0,0,8,2.21,15.81,15.81,0,0,0,1.7-.17,13.74,13.74,0,0,0,1.69-.37,12.79,12.79,0,0,0,5.65-3.5,11.63,11.63,0,0,0,1.88-2.83,12.11,12.11,0,0,0,1.06-3.27,11,11,0,0,0-.94-6.84A10.42,10.42,0,0,1,27.23,13a10.65,10.65,0,0,1,.63,1.71,11.3,11.3,0,0,1,.22,3.64,12.78,12.78,0,0,1-.94,3.56,12.11,12.11,0,0,1-1.88,3.17,12.84,12.84,0,0,1-1.31,1.33,13.32,13.32,0,0,1-1.49,1.12,14,14,0,0,1-3.37,1.59,13,13,0,0,1-1.82.43,17.17,17.17,0,0,1-1.88.21,14.31,14.31,0,0,1-3.77-.27,14.55,14.55,0,0,1-5.12-2.19,11.53,11.53,0,0,1-1.41-1.17A13.92,13.92,0,0,1,.92,18a10.3,10.3,0,0,1-.08-1.88A12.36,12.36,0,0,1,3.31,9.34,10.42,10.42,0,0,1,5.91,6.89ZM7.27,3.35a1.52,1.52,0,0,1-.08-.78,1.82,1.82,0,0,1,.32-.76A2.29,2.29,0,0,1,9,1,6.31,6.31,0,0,1,9.78.89h2.36a25.76,25.76,0,0,1,6.19,1,23.94,23.94,0,0,1,5.74,2.5,20.58,20.58,0,0,1,2.56,1.83,3.84,3.84,0,0,1,1,1.27,1.29,1.29,0,0,1,.08.84,1.24,1.24,0,0,1-.47.64,1.21,1.21,0,0,0,.29-.67,1,1,0,0,0-.21-.65,3.64,3.64,0,0,0-1.07-.94c-.86-.53-1.75-1-2.66-1.47A34.29,34.29,0,0,0,18,3.06,38.16,38.16,0,0,0,12,1.84c-.5-.06-1-.11-1.52-.15l-.73-.13a6.42,6.42,0,0,0-.73,0A1.88,1.88,0,0,0,7.77,2,1.57,1.57,0,0,0,7.27,3.35Z\" />\r\n        <g class=\"pay-btn-border\">\r\n          <rect x=\"1.35\" y=\"0.56\" width=\"25.09\" height=\"26.44\" class=\"inner-pot\" />\r\n        </g>\r\n        <path class=\"pot-entry\" d=\"M22,6.27c-1.13-.38-2.45-.85-3.86-1.22-1-.28-2.17-.57-3.11-.75-2.64-.47-4.52-.57-4.62-.09-.09.19.19.57.75.85A24.19,24.19,0,0,0,17.46,7.4a22.19,22.19,0,0,0,7.07,1.13c.38-.09.66-.19.66-.28C25.32,7.9,24.05,7.15,22,6.27Z\" />\r\n        <text class=\"pay-text\"><tspan style=\"letter-spacing: -0.05859375em\">P</tspan><tspan x=\"4.94\" y=\"0\" style=\"letter-spacing: -0.087890625em\">A</tspan><tspan x=\"10.56\" y=\"0\">Y</tspan></text>\r\n      </svg>      \r\n      <div class=\"glow-wrap\">\r\n        <i class=\"glow\"></i>\r\n      </div>          \r\n    </ion-col>\r\n  </ion-row>  \r\n  <ion-row  *ngIf=\"paypalLoading\">\r\n    <ion-col>\r\n      <p class=\"ion-text-center ion-padding\">\r\n        <ion-spinner  name=\"circles\"></ion-spinner>\r\n      </p>\r\n    </ion-col>\r\n  </ion-row> \r\n  <ion-row *ngIf=\"canShowPaypalButton()\">\r\n    <ion-col class=\"ion-padding\" size=\"12\">\r\n      <div #paypalbuttoncontainer id=\"paypal-button-container\"></div> \r\n    </ion-col>\r\n  </ion-row>\r\n</ion-grid>\r\n</form> \r\n");

/***/ }),

/***/ "n/ZU":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/contribution-order/contribution-order.component.html ***!
  \*******************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header>\r\n  <ion-toolbar>\r\n    <ion-title class=\"ion-text-center\">{{'DEBT_MAKE_PAYMENT' | translate }}</ion-title>\r\n  </ion-toolbar>\r\n  <ion-toolbar class=\"ion-text-center\">\r\n    <ion-segment (ionChange)=\"segmentChanged()\" value=\"bank\">\r\n      <ion-segment-button *ngIf=\"balanceOnlineAmount > 0\" value=\"bank\">\r\n        <ion-label class=\"ion-text-capitalize\">{{ 'TYPE_PAYMENT_ID2' | translate }}</ion-label>\r\n      </ion-segment-button>\r\n      <ion-segment-button *ngIf=\"balanceOfflineAmount > 0\"  value=\"phone\">\r\n        <ion-label class=\"ion-text-capitalize\">{{ 'OFFLINE_PAYMENT' | translate }}</ion-label>\r\n      </ion-segment-button>\r\n    </ion-segment>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"tontine-contribute\">\r\n  <p class=\"ion-text-center\" *ngIf=\"loading\">\r\n    <ion-spinner  name=\"circles\"></ion-spinner> \r\n  </p>\r\n  <ion-grid *ngIf=\"balanceOnlineAmount > 0 || balanceOfflineAmount > 0\">\r\n    <ion-row>\r\n      <ion-col>\r\n        <p class=\"ion-no-margin\">\r\n          {{ 'PAY_BENEFICIARY_TEXT' | translate }} <b>{{ tontineName }}</b>.         \r\n        </p>\r\n        <h4 class=\"ion-no-margin\" *ngIf=\"isModeSelected === true\">\r\n          <small>\r\n            {{ 'AMOUNT_TEXT' | translate }}: {{ (totalOnlineAmount | commadumper)}} {{currency}} (<b class=\"text-danger\">{{ 'REMAIN_OTHER_TEXT' | translate }}:  {{ (balanceOnlineAmount | commadumper) }}  {{currency}}</b>)\r\n          </small>\r\n        </h4>\r\n        <h4 class=\"ion-no-margin\" *ngIf=\"isModeSelected === false\">\r\n          <small>\r\n            {{ 'AMOUNT_TEXT' | translate }}: {{ (totalOfflineAmount | commadumper)}} {{currency}} (<b class=\"text-danger\">{{ 'REMAIN_OTHER_TEXT' | translate }}:  {{ (balanceOfflineAmount | commadumper) }}  {{currency}}</b>)\r\n          </small>\r\n        </h4>\r\n      </ion-col>\r\n    </ion-row>\r\n    <ion-row>\r\n      <ion-col>\r\n        <div class=\"bank\" *ngIf=\"isModeSelected === true && balanceOnlineAmount > 0\">\r\n          <app-wallet-order [amountPay]=\"totalOnlineAmount\" [balance]=\"balanceOnlineAmount\"></app-wallet-order>\r\n        </div>\r\n        <div class=\"mobile\" *ngIf=\"isModeSelected === false && balanceOfflineAmount > 0\">\r\n          <app-paidmode-debt-order [balance]=\"balanceOfflineAmount\" [amountPay]=\"totalOfflineAmount\" ></app-paidmode-debt-order>\r\n        </div>\r\n      </ion-col>\r\n    </ion-row>\r\n  </ion-grid> \r\n\r\n  <div *ngIf=\"balanceOnlineAmount <= 0 && balanceOfflineAmount <= 0  && !loading\">\r\n    <p class=\"ion-padding\">{{ 'INTIATE_AMOUNT_COMPLETE_PAY_TEXT' | translate }}</p>\r\n  </div>\r\n</ion-content>\r\n\r\n<ion-footer class=\"ion-padding ion-text-center\">\r\n    <ion-grid>\r\n      <ion-row>\r\n        <ion-col>\r\n            <ion-button expand=\"full\" \r\n                  fill=\"outline\"\r\n                  color=\"warning\" \r\n                  class=\"ion-text-uppercase\"\r\n                  shape=\"round\" (click)=\"closeContribute('close')\">\r\n              {{ 'CANCEL_TEXT' | translate }}\r\n            </ion-button>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n</ion-footer>\r\n");

/***/ }),

/***/ "nyb6":
/*!***********************************************************!*\
  !*** ./src/app/shared/countries/countries.component.scss ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjb3VudHJpZXMuY29tcG9uZW50LnNjc3MifQ== */");

/***/ }),

/***/ "nzBo":
/*!*****************************************************************!*\
  !*** ./src/app/shared/wallet-order/wallet-order.component.scss ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ3YWxsZXQtb3JkZXIuY29tcG9uZW50LnNjc3MifQ== */");

/***/ }),

/***/ "opiV":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/paidmode-swap/paidmode-swap.component.html ***!
  \*********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<form [formGroup]=\"userPayMethodForm\">\r\n  <p class=\"ion-text-center\"  *ngIf=\"loadingOperator\">\r\n    <ion-spinner  name=\"circles\"></ion-spinner>\r\n  </p>\r\n<ion-grid>\r\n  <ion-row>\r\n    <ion-col size=\"12\">\r\n      <ion-card class=\"paidmode\">\r\n        <ion-card-content class=\"ion-text-center\">    \r\n          <ion-row>\r\n            <ion-col size=\"12\">\r\n              <ion-item>\r\n                <ion-label>{{'COUNTRY_TEXT' | translate}}</ion-label>\r\n                <ion-select (ionChange)=\"updateCurrencyCountry(userPayMethodForm.value.country_id)\" formControlName=\"country_id\">\r\n                  <ion-select-option [value]=\"country.country_id\" *ngFor=\"let country of states\">{{ country.country_label }}</ion-select-option>          \r\n                </ion-select>\r\n              </ion-item>   \r\n              <div class=\"validation-errors\">\r\n                <ng-container *ngFor=\"let validation of validationMessages.country_id\">\r\n                  <div class=\"error-message\" *ngIf=\"country.hasError(validation.type) && (country.dirty || country.touched)\">\r\n                    <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                    {{ validation.message }}\r\n                  </div>\r\n                </ng-container>\r\n              </div>     \r\n            </ion-col>\r\n          </ion-row>       \r\n            <ion-row class=\"ion-justify-content-end\" *ngIf=\"userPayMethodForm.value.country_id && paymentMethods && paymentMethods.length > 0\">\r\n              <ion-col size=\"4\">\r\n                <ion-img [src]=\"paymentMethods&&paymentMethods[userPayMethodForm.value.typePaymentIndex] ? paymentMethods[userPayMethodForm.value.typePaymentIndex].logo : ' '\" class=\"logooperator\"></ion-img>\r\n              </ion-col>\r\n            </ion-row>  \r\n            <ion-row *ngIf=\"userPayMethodForm.value.country_id && paymentMethods && paymentMethods.length > 0\">\r\n              <ion-col size=\"12\">\r\n                <ion-item>\r\n                  <ion-label>{{ 'USER_PROFILE_TEXT4' | translate }}</ion-label>\r\n                  <ion-select (ionChange)=\"updatePaymentMethod(userPayMethodForm.value.typePaymentIndex)\" formControlName=\"typePaymentIndex\">\r\n                    <ion-select-option *ngFor=\"let operator of paymentMethods; let operatorId = index\" [value]=\"operatorId\">{{ operator.name }}</ion-select-option>           \r\n                  </ion-select>\r\n                </ion-item>   \r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.payementtype\">\r\n                    <div class=\"error-message\" *ngIf=\"payementtype.hasError(validation.type) && (payementtype.dirty || payementtype.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>   \r\n              </ion-col>\r\n            </ion-row> \r\n            <ion-row  *ngIf=\"checkMobileOperator()\">\r\n              <ion-col size=\"4\">\r\n                <ion-item>\r\n                  <ion-label position=\"floating\">+</ion-label>\r\n                  <ion-input placeholder=\"{{userPayMethodForm.value.country_prefix}}\" type=\"text\"></ion-input>\r\n                </ion-item>        \r\n              </ion-col>\r\n              <ion-col size=\"8\">\r\n                <ion-item>\r\n                  <ion-label position=\"floating\">{{ 'REGISTER_MPHONE' | translate }}</ion-label>\r\n                  <ion-input (ionChange)=\"checckEmailOrPhone(userPayMethodForm.value.phone,userPayMethodForm.value.typePaymentIndex)\" type=\"tel\" formControlName=\"phone\"></ion-input>\r\n                </ion-item> \r\n              </ion-col>\r\n              <ion-col size=\"12\">\r\n                <div class=\"validation-errors\" *ngIf=\"errorPhone\">\r\n                  <div class=\"error-message\">\r\n                    <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                    <span [innerHTML]=\"'USER_DETAIL_TEXT11' | translate\"></span>\r\n                  </div>\r\n              </div>          \r\n              </ion-col>\r\n            </ion-row> \r\n            <ion-row class=\"ion-padding-bottom\">\r\n              <ion-col size=\"12\">\r\n                <ion-item>\r\n                  <ion-label position=\"floating\" >{{ 'AMOUNT_TEXT' | translate }}</ion-label>\r\n                  <ion-input (ionChange)=\"updatePaypalAmount()\" type=\"number\" formControlName=\"montant\"></ion-input>\r\n                  <span slot=\"end\" class=\"slot-prefix ion-no-margin\"> {{ contributionData.currency }} </span>\r\n                </ion-item> \r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.amount\">\r\n                    <div class=\"error-message\" *ngIf=\"montantContributeError.hasError(validation.type) && (montantContributeError.dirty || montantContributeError.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>          \r\n              </ion-col>\r\n            </ion-row>\r\n            <ion-row   *ngIf=\"canShowPaypalMessage()\">\r\n              <ion-col>\r\n                <div class=\"padding\">\r\n                <p style=\"color: red\">{{paypalMessage}}</p>\r\n              </div>\r\n              </ion-col>\r\n            </ion-row>                        \r\n        </ion-card-content>\r\n      </ion-card>\r\n    </ion-col>      \r\n  </ion-row>\r\n  <ion-row>\r\n    <svg height=\"0\" width=\"0\" viewBox=\"0 0 27.7 28.93\">\r\n      <defs>\r\n        <clipPath id=\"pay-btn-shape1\" >\r\n          <path d=\"M2.57,17.21A11.18,11.18,0,0,1,9.17,5.77h.06l.17-.22.11-.23c-1-.73-1.56-1.42-1.39-2,.42-1.32,5-1.17,10.22.33S27.43,7.47,27,8.81c-.16.48-.86.76-1.88.86h0v.1a5,5,0,0,0,.08.66,3.77,3.77,0,0,0,.1.46l.07.23c2,4,1.7,8.37-1.73,12.53a12.23,12.23,0,0,1-18.42-.1A11.55,11.55,0,0,1,2.57,17.21Z\" />            \r\n        </clipPath>        \r\n      </defs>\r\n    </svg>\r\n    <ion-col size=\"12\" class=\"ion-text-center wrap-pay-btn\" *ngIf=\"canPay()\"  (click)=\"showPayment(userPayMethodForm.value)\">\r\n      <svg id=\"pay-btn1\" preserveAspectRatio=\"xMidYMid slice\" viewBox=\"0 0 27.7 28.93\">\r\n        <path  class=\"arc-part\" d=\"M5.91,6.89a12.25,12.25,0,0,0-4.14,9.27,11.14,11.14,0,0,0,.16,1.7,12.82,12.82,0,0,0,.42,1.66c.08.27.19.54.29.8A8.24,8.24,0,0,0,3,21.1a14.85,14.85,0,0,0,.82,1.5,12.25,12.25,0,0,0,3.5,3.62,13.49,13.49,0,0,0,8,2.21,15.81,15.81,0,0,0,1.7-.17,13.74,13.74,0,0,0,1.69-.37,12.79,12.79,0,0,0,5.65-3.5,11.63,11.63,0,0,0,1.88-2.83,12.11,12.11,0,0,0,1.06-3.27,11,11,0,0,0-.94-6.84A10.42,10.42,0,0,1,27.23,13a10.65,10.65,0,0,1,.63,1.71,11.3,11.3,0,0,1,.22,3.64,12.78,12.78,0,0,1-.94,3.56,12.11,12.11,0,0,1-1.88,3.17,12.84,12.84,0,0,1-1.31,1.33,13.32,13.32,0,0,1-1.49,1.12,14,14,0,0,1-3.37,1.59,13,13,0,0,1-1.82.43,17.17,17.17,0,0,1-1.88.21,14.31,14.31,0,0,1-3.77-.27,14.55,14.55,0,0,1-5.12-2.19,11.53,11.53,0,0,1-1.41-1.17A13.92,13.92,0,0,1,.92,18a10.3,10.3,0,0,1-.08-1.88A12.36,12.36,0,0,1,3.31,9.34,10.42,10.42,0,0,1,5.91,6.89ZM7.27,3.35a1.52,1.52,0,0,1-.08-.78,1.82,1.82,0,0,1,.32-.76A2.29,2.29,0,0,1,9,1,6.31,6.31,0,0,1,9.78.89h2.36a25.76,25.76,0,0,1,6.19,1,23.94,23.94,0,0,1,5.74,2.5,20.58,20.58,0,0,1,2.56,1.83,3.84,3.84,0,0,1,1,1.27,1.29,1.29,0,0,1,.08.84,1.24,1.24,0,0,1-.47.64,1.21,1.21,0,0,0,.29-.67,1,1,0,0,0-.21-.65,3.64,3.64,0,0,0-1.07-.94c-.86-.53-1.75-1-2.66-1.47A34.29,34.29,0,0,0,18,3.06,38.16,38.16,0,0,0,12,1.84c-.5-.06-1-.11-1.52-.15l-.73-.13a6.42,6.42,0,0,0-.73,0A1.88,1.88,0,0,0,7.77,2,1.57,1.57,0,0,0,7.27,3.35Z\" />\r\n        <g class=\"pay-btn-border\">\r\n          <rect x=\"1.35\" y=\"0.56\" width=\"25.09\" height=\"26.44\" class=\"inner-pot\" />\r\n        </g>\r\n        <path class=\"pot-entry\" d=\"M22,6.27c-1.13-.38-2.45-.85-3.86-1.22-1-.28-2.17-.57-3.11-.75-2.64-.47-4.52-.57-4.62-.09-.09.19.19.57.75.85A24.19,24.19,0,0,0,17.46,7.4a22.19,22.19,0,0,0,7.07,1.13c.38-.09.66-.19.66-.28C25.32,7.9,24.05,7.15,22,6.27Z\" />\r\n        <text class=\"pay-text\"><tspan style=\"letter-spacing: -0.05859375em\">P</tspan><tspan x=\"4.94\" y=\"0\" style=\"letter-spacing: -0.087890625em\">A</tspan><tspan x=\"10.56\" y=\"0\">Y</tspan></text>\r\n      </svg>     \r\n      <div class=\"glow-wrap\">\r\n        <i class=\"glow\"></i>\r\n      </div>          \r\n    </ion-col>\r\n  </ion-row> \r\n  <ion-row  *ngIf=\"paypalLoading\">\r\n    <ion-col>\r\n      <p class=\"ion-text-center ion-padding\">\r\n        <ion-spinner  name=\"circles\"></ion-spinner>\r\n      </p>\r\n    </ion-col>\r\n  </ion-row> \r\n  <ion-row *ngIf=\"canShowPaypalButton()\">\r\n    <ion-col class=\"ion-padding\" size=\"12\">\r\n      <div #paypalbuttoncontainer id=\"paypal-button-container\"></div> \r\n    </ion-col>\r\n  </ion-row>  \r\n</ion-grid>\r\n</form> \r\n");

/***/ }),

/***/ "p9Vj":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/paidmode-loan/paidmode-loan.component.html ***!
  \*********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<form [formGroup]=\"userPayMethodForm\">\r\n  <p class=\"ion-text-center\"  *ngIf=\"loadingOperator\">\r\n    <ion-spinner  name=\"circles\"></ion-spinner>\r\n  </p>\r\n<ion-grid>\r\n  <ion-row>\r\n    <ion-col size=\"12\">\r\n      <ion-card class=\"paidmode\">\r\n        <ion-card-content class=\"ion-text-center\">    \r\n          <ion-row>\r\n            <ion-col size=\"12\">\r\n              <ion-item>\r\n                <ion-label>{{'COUNTRY_TEXT' | translate}}</ion-label>\r\n                <ion-select (ionChange)=\"updateCurrencyCountry(userPayMethodForm.value.country_id)\" formControlName=\"country_id\">\r\n                  <ion-select-option [value]=\"country.country_id\" *ngFor=\"let country of states\">{{ country.country_label }}</ion-select-option>          \r\n                </ion-select>\r\n              </ion-item>   \r\n              <div class=\"validation-errors\">\r\n                <ng-container *ngFor=\"let validation of validationMessages.country_id\">\r\n                  <div class=\"error-message\" *ngIf=\"country.hasError(validation.type) && (country.dirty || country.touched)\">\r\n                    <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                    {{ validation.message }}\r\n                  </div>\r\n                </ng-container>\r\n              </div>     \r\n            </ion-col>\r\n          </ion-row>       \r\n            <ion-row class=\"ion-justify-content-end\" *ngIf=\"userPayMethodForm.value.country_id && paymentMethods && paymentMethods.length > 0\">\r\n              <ion-col size=\"4\">\r\n                <ion-img [src]=\"paymentMethods&&paymentMethods[userPayMethodForm.value.typePaymentIndex] ? paymentMethods[userPayMethodForm.value.typePaymentIndex].logo : ' '\" class=\"logooperator\"></ion-img>\r\n              </ion-col>\r\n            </ion-row>  \r\n            <ion-row *ngIf=\"userPayMethodForm.value.country_id && paymentMethods && paymentMethods.length > 0\">\r\n              <ion-col size=\"12\">\r\n                <ion-item>\r\n                  <ion-label>{{ 'USER_PROFILE_TEXT4' | translate }}</ion-label>\r\n                  <ion-select (ionChange)=\"updatePaymentMethod(userPayMethodForm.value.typePaymentIndex)\" formControlName=\"typePaymentIndex\">\r\n                    <ion-select-option *ngFor=\"let operator of paymentMethods; let operatorId = index\" [value]=\"operatorId\">{{ operator.name }}</ion-select-option>           \r\n                  </ion-select>\r\n                </ion-item>   \r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.payementtype\">\r\n                    <div class=\"error-message\" *ngIf=\"payementtype.hasError(validation.type) && (payementtype.dirty || payementtype.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>   \r\n              </ion-col>\r\n            </ion-row> \r\n            <ion-row  *ngIf=\"checkMobileOperator()\">\r\n              <ion-col size=\"4\">\r\n                <ion-item  >\r\n                  <ion-label position=\"floating\">+</ion-label>\r\n                  <ion-input placeholder=\"{{userPayMethodForm.value.country_prefix}}\" type=\"text\"></ion-input>\r\n                </ion-item>        \r\n              </ion-col>\r\n              <ion-col size=\"8\">\r\n                <ion-item >\r\n                  <ion-label position=\"floating\">{{ 'REGISTER_MPHONE' | translate }}</ion-label>\r\n                  <ion-input (ionChange)=\"checckEmailOrPhone(userPayMethodForm.value.phone,userPayMethodForm.value.typePaymentIndex)\" type=\"tel\" formControlName=\"phone\"></ion-input>\r\n                </ion-item> \r\n              </ion-col>\r\n              <ion-col size=\"12\">\r\n                <div class=\"validation-errors\" *ngIf=\"errorPhone\">\r\n                  <div class=\"error-message\">\r\n                    <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                    <span [innerHTML]=\"'USER_DETAIL_TEXT11' | translate\"></span>\r\n                  </div>\r\n              </div>          \r\n              </ion-col>\r\n            </ion-row> \r\n            <ion-row class=\"ion-padding-bottom\">\r\n              <ion-col size=\"12\">\r\n                <ion-item>\r\n                  <ion-label position=\"floating\" >{{ 'AMOUNT_TEXT' | translate }}</ion-label>\r\n                  <ion-input (ionChange)=\"updatePaypalAmount()\" type=\"number\" formControlName=\"montant\"></ion-input>\r\n                  <span slot=\"end\" class=\"slot-prefix ion-no-margin\"> {{ contributionData.currency_name }} </span>\r\n                </ion-item> \r\n                <div class=\"validation-errors\">\r\n                  <ng-container *ngFor=\"let validation of validationMessages.amount\">\r\n                    <div class=\"error-message\" *ngIf=\"montantContributeError.hasError(validation.type) && (montantContributeError.dirty || montantContributeError.touched)\">\r\n                      <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                      {{ validation.message }}\r\n                    </div>\r\n                  </ng-container>\r\n                </div>          \r\n              </ion-col>\r\n            </ion-row>\r\n            <ion-row *ngIf=\"canShowPaypalMessage()\">\r\n              <ion-col>\r\n                <div class=\"padding\">\r\n                <p style=\"color: red\">{{paypalMessage}}</p>\r\n              </div>\r\n              </ion-col>\r\n            </ion-row>                        \r\n        </ion-card-content>\r\n      </ion-card>\r\n    </ion-col>      \r\n  </ion-row>\r\n  <ion-row>\r\n    <svg height=\"0\" width=\"0\" viewBox=\"0 0 27.7 28.93\">\r\n      <defs>\r\n        <clipPath id=\"pay-btn-shape1\" >\r\n          <path d=\"M2.57,17.21A11.18,11.18,0,0,1,9.17,5.77h.06l.17-.22.11-.23c-1-.73-1.56-1.42-1.39-2,.42-1.32,5-1.17,10.22.33S27.43,7.47,27,8.81c-.16.48-.86.76-1.88.86h0v.1a5,5,0,0,0,.08.66,3.77,3.77,0,0,0,.1.46l.07.23c2,4,1.7,8.37-1.73,12.53a12.23,12.23,0,0,1-18.42-.1A11.55,11.55,0,0,1,2.57,17.21Z\" />            \r\n        </clipPath>        \r\n      </defs>\r\n    </svg>\r\n    <ion-col size=\"12\" class=\"ion-text-center wrap-pay-btn\" *ngIf=\"canPay()\"  (click)=\"showPayment(userPayMethodForm.value)\">\r\n      <svg id=\"pay-btn1\" preserveAspectRatio=\"xMidYMid slice\" viewBox=\"0 0 27.7 28.93\">\r\n        <path  class=\"arc-part\" d=\"M5.91,6.89a12.25,12.25,0,0,0-4.14,9.27,11.14,11.14,0,0,0,.16,1.7,12.82,12.82,0,0,0,.42,1.66c.08.27.19.54.29.8A8.24,8.24,0,0,0,3,21.1a14.85,14.85,0,0,0,.82,1.5,12.25,12.25,0,0,0,3.5,3.62,13.49,13.49,0,0,0,8,2.21,15.81,15.81,0,0,0,1.7-.17,13.74,13.74,0,0,0,1.69-.37,12.79,12.79,0,0,0,5.65-3.5,11.63,11.63,0,0,0,1.88-2.83,12.11,12.11,0,0,0,1.06-3.27,11,11,0,0,0-.94-6.84A10.42,10.42,0,0,1,27.23,13a10.65,10.65,0,0,1,.63,1.71,11.3,11.3,0,0,1,.22,3.64,12.78,12.78,0,0,1-.94,3.56,12.11,12.11,0,0,1-1.88,3.17,12.84,12.84,0,0,1-1.31,1.33,13.32,13.32,0,0,1-1.49,1.12,14,14,0,0,1-3.37,1.59,13,13,0,0,1-1.82.43,17.17,17.17,0,0,1-1.88.21,14.31,14.31,0,0,1-3.77-.27,14.55,14.55,0,0,1-5.12-2.19,11.53,11.53,0,0,1-1.41-1.17A13.92,13.92,0,0,1,.92,18a10.3,10.3,0,0,1-.08-1.88A12.36,12.36,0,0,1,3.31,9.34,10.42,10.42,0,0,1,5.91,6.89ZM7.27,3.35a1.52,1.52,0,0,1-.08-.78,1.82,1.82,0,0,1,.32-.76A2.29,2.29,0,0,1,9,1,6.31,6.31,0,0,1,9.78.89h2.36a25.76,25.76,0,0,1,6.19,1,23.94,23.94,0,0,1,5.74,2.5,20.58,20.58,0,0,1,2.56,1.83,3.84,3.84,0,0,1,1,1.27,1.29,1.29,0,0,1,.08.84,1.24,1.24,0,0,1-.47.64,1.21,1.21,0,0,0,.29-.67,1,1,0,0,0-.21-.65,3.64,3.64,0,0,0-1.07-.94c-.86-.53-1.75-1-2.66-1.47A34.29,34.29,0,0,0,18,3.06,38.16,38.16,0,0,0,12,1.84c-.5-.06-1-.11-1.52-.15l-.73-.13a6.42,6.42,0,0,0-.73,0A1.88,1.88,0,0,0,7.77,2,1.57,1.57,0,0,0,7.27,3.35Z\" />\r\n        <g class=\"pay-btn-border\">\r\n          <rect x=\"1.35\" y=\"0.56\" width=\"25.09\" height=\"26.44\" class=\"inner-pot\" />\r\n        </g>\r\n        <path class=\"pot-entry\" d=\"M22,6.27c-1.13-.38-2.45-.85-3.86-1.22-1-.28-2.17-.57-3.11-.75-2.64-.47-4.52-.57-4.62-.09-.09.19.19.57.75.85A24.19,24.19,0,0,0,17.46,7.4a22.19,22.19,0,0,0,7.07,1.13c.38-.09.66-.19.66-.28C25.32,7.9,24.05,7.15,22,6.27Z\" />\r\n        <text class=\"pay-text\"><tspan style=\"letter-spacing: -0.05859375em\">P</tspan><tspan x=\"4.94\" y=\"0\" style=\"letter-spacing: -0.087890625em\">A</tspan><tspan x=\"10.56\" y=\"0\">Y</tspan></text>\r\n      </svg>     \r\n      <div class=\"glow-wrap\">\r\n        <i class=\"glow\"></i>\r\n      </div>          \r\n    </ion-col>\r\n  </ion-row> \r\n  <ion-row  *ngIf=\"paypalLoading\">\r\n    <ion-col>\r\n      <p class=\"ion-text-center ion-padding\">\r\n        <ion-spinner  name=\"circles\"></ion-spinner>\r\n      </p>\r\n    </ion-col>\r\n  </ion-row> \r\n  <ion-row *ngIf=\"canShowPaypalButton()\">\r\n    <ion-col class=\"ion-padding\" size=\"12\">\r\n      <div #paypalbuttoncontainer id=\"paypal-button-container\"></div> \r\n    </ion-col>\r\n  </ion-row>  \r\n</ion-grid>\r\n</form> \r\n");

/***/ }),

/***/ "peF1":
/*!*******************************************************!*\
  !*** ./src/app/shared/bankmode/bankmode.component.ts ***!
  \*******************************************************/
/*! exports provided: BankmodeComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BankmodeComponent", function() { return BankmodeComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_bankmode_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./bankmode.component.html */ "xGVp");
/* harmony import */ var _bankmode_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bankmode.component.scss */ "FXXE");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var _service_error_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../service/error.service */ "TkUd");
/* harmony import */ var src_app_dashboard_my_tontines_services_debts_manager_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/debts-manager.service */ "ijC1");
/* harmony import */ var src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/tontine.service */ "/WEl");
/* harmony import */ var _service_payment_error_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../service/payment-error.service */ "FLu1");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../service/events.service */ "r5fM");
/* harmony import */ var _service_ui_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../service/ui.service */ "QB/Y");
/* harmony import */ var _service_plugin_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../service/plugin.service */ "NxmL");













let BankmodeComponent = class BankmodeComponent {
    constructor(fb, translate, event, tontine, error, debt, ui, paymentError, plugin) {
        this.fb = fb;
        this.translate = translate;
        this.event = event;
        this.tontine = tontine;
        this.error = error;
        this.debt = debt;
        this.ui = ui;
        this.paymentError = paymentError;
        this.plugin = plugin;
        this.loadingPay = false;
        this.currentTontine = this.tontine.getCurrentTontineData();
    }
    ngOnInit() {
        this.initFormMessage();
        this.initTradionnalPayment();
    }
    // Getters
    get amount() {
        return this.paymentForm.get('amount');
    }
    get proofMessage() {
        return this.paymentForm.get('proofMessage');
    }
    get proof() {
        return this.paymentForm.get('receipt');
    }
    // Init the form message
    initFormMessage() {
        this.translate.get(['DEBT_AMOUNT_REQUIRED_TEXT', 'DEBT_PROOF_MSG_REQUIRED_TEXT']).subscribe(trans => {
            this.validationMessages = {
                amount: [
                    { type: 'required', message: trans.DEBT_AMOUNT_REQUIRED_TEXT }
                ],
                proofMessage: [
                    { type: 'required', message: trans.DEBT_PROOF_MSG_REQUIRED_TEXT }
                ]
            };
        });
    }
    // Init traditional banking payment
    initTradionnalPayment() {
        const params = this.debt.getDebtsData();
        const items = params.items;
        const itemsParams = [];
        items.forEach(item => {
            itemsParams.push({ seance_id: item.seance_id, numero_part: item.numero_part, montant: item.montant, typecontribution_id: item.typecontribution_id });
        });
        this.paymentForm = this.fb.group({
            reference_facture: [params.facture ? params.facture.reference : ''],
            device_id: [params.facture ? params.facture.device_id : ''],
            montant_total_facture: [params.facture ? params.facture.montant : 0],
            currency: [params.facture ? params.facture.device_name : 0],
            amount: [this.balance, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].min(1)])],
            liste_item: [itemsParams, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            proofMessage: [''],
            receipt: [''],
            liste_proof: [[]],
            tontine_id: [params.facture ? params.facture.tontine_id : '']
        });
    }
    // Get the payment proofs
    getProof() {
        this.plugin.getPicture().subscribe((picture) => {
            if (picture) {
                setTimeout(() => {
                    this.paymentForm.get('receipt').setValue(picture);
                }, 200);
            }
        });
    }
    // Make the payment
    makePayment() {
        this.paymentForm.get('liste_proof').setValue([{
                montant: this.paymentForm.value.amount,
                description: this.paymentForm.value.proofMessage,
                receipt: this.paymentForm.value.receipt
            }]);
        this.loadingPay = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        this.debt.paidMemberBillTradiBanking(this.paymentForm.value).subscribe((reponse) => {
            this.loadingPay = false;
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                this.translate.get('DEBT_PAYMENT_SUCCES_MSG').subscribe(trans => {
                    this.ui.presentToast(trans);
                });
                if (this.balance - this.paymentForm.value.amount === 0) {
                    this.event.publish('modal-close', { result: 'complete' });
                }
                else {
                    this.event.publish('modal-close', { result: 'partial' });
                }
            }
        }, error => {
            this.loadingPay = false;
            if (error && error.error) {
                if (error.error.user_not_found) {
                    this.loadingPay = true;
                    this.error.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.makePayment();
                        }
                        else {
                            this.loadingPay = false;
                            this.ui.dismissLoading();
                        }
                    });
                }
                else {
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOfflineError(error);
                }
            }
            else {
                this.ui.dismissLoading();
                this.error.manageError(error);
            }
        });
    }
};
BankmodeComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_5__["TranslateService"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_10__["EventService"] },
    { type: src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_8__["TontineService"] },
    { type: _service_error_service__WEBPACK_IMPORTED_MODULE_6__["ErrorService"] },
    { type: src_app_dashboard_my_tontines_services_debts_manager_service__WEBPACK_IMPORTED_MODULE_7__["DebtsManagerService"] },
    { type: _service_ui_service__WEBPACK_IMPORTED_MODULE_11__["UiService"] },
    { type: _service_payment_error_service__WEBPACK_IMPORTED_MODULE_9__["PaymentErrorService"] },
    { type: _service_plugin_service__WEBPACK_IMPORTED_MODULE_12__["PluginService"] }
];
BankmodeComponent.propDecorators = {
    amountPay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    balance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};
BankmodeComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-bankmode',
        template: _raw_loader_bankmode_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_bankmode_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], BankmodeComponent);



/***/ }),

/***/ "ppek":
/*!*******************************************************************!*\
  !*** ./src/app/shared/paidmode-event/paidmode-event.component.ts ***!
  \*******************************************************************/
/*! exports provided: PaidmodeEventComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaidmodeEventComponent", function() { return PaidmodeEventComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_paidmode_event_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./paidmode-event.component.html */ "6NmA");
/* harmony import */ var _paidmode_event_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./paidmode-event.component.scss */ "8TOD");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var _service_error_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../service/error.service */ "TkUd");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _service_location_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../service/location.service */ "e009");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var src_app_dashboard_my_tontines_services_contribution_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/contribution.service */ "US41");
/* harmony import */ var _service_currency_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../service/currency.service */ "GmDD");
/* harmony import */ var src_app_dashboard_my_wallet_service_wallet_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/dashboard/my-wallet/service/wallet.service */ "68js");
/* harmony import */ var src_app_dashboard_tontines_events_services_tontines_events_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! src/app/dashboard/tontines-events/services/tontines-events.service */ "eEpS");
/* harmony import */ var _service_form_utils_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../service/form-utils.service */ "14LV");
/* harmony import */ var _service_payment_error_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../service/payment-error.service */ "FLu1");
/* harmony import */ var _service_payment_global_data_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../service/payment-global-data.service */ "T8hk");
/* harmony import */ var src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! src/app/dashboard/user/service/user.service */ "6Hie");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../service/events.service */ "r5fM");
/* harmony import */ var _service_ui_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../service/ui.service */ "QB/Y");
/* harmony import */ var src_app_auth_service_auth_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! src/app/auth/service/auth.service */ "RmnQ");
/* harmony import */ var _service_api_service__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../service/api.service */ "6rCG");






















let PaidmodeEventComponent = class PaidmodeEventComponent {
    constructor(fb, userService, platform, event, paymentData, events, api, ui, currency, contribution, alertController, wallet, errorService, location, translate, formUtil, router, zone, navController, paymentError, auth) {
        this.fb = fb;
        this.userService = userService;
        this.platform = platform;
        this.event = event;
        this.paymentData = paymentData;
        this.events = events;
        this.api = api;
        this.ui = ui;
        this.currency = currency;
        this.contribution = contribution;
        this.alertController = alertController;
        this.wallet = wallet;
        this.errorService = errorService;
        this.location = location;
        this.translate = translate;
        this.formUtil = formUtil;
        this.router = router;
        this.zone = zone;
        this.navController = navController;
        this.paymentError = paymentError;
        this.auth = auth;
        this.cron = null;
        this.timeOut = null;
        this.loadingOperator = false;
        this.loading = false;
        this.errorPhone = false;
        this.states = [];
        this.paymentMethods = [];
        this.paypalMessage = '';
        this.reference = this.formUtil.getRandomId();
        this.tontineData = this.event.getCurrentTontineEventData();
        this.allPaymentMethods = [];
        this.contributionData = this.contribution.getContributionData();
        this.paypalLoading = false;
        this.paypal_initialized = false;
        this.refernceId = '';
        this.hardwareBackButton();
    }
    ngOnInit() {
        this.getAllMethodPaymentType();
        this.initFormMessage();
        this.initPaymentForm();
    }
    /******************************** END FORM SERVICES *********************************************/
    // Form getters
    get phone() {
        return this.userPayMethodForm.get('phone');
    }
    get amountError() {
        return this.userPayMethodForm.get('montantAvecFees');
    }
    get country() {
        return this.userPayMethodForm.get('country_id');
    }
    get device_name() {
        return this.userPayMethodForm.get('device_name');
    }
    get payementtype() {
        return this.userPayMethodForm.get('typePaymentIndex');
    }
    get montantContributeError() {
        return this.userPayMethodForm.get('montant');
    }
    // Init Form
    initPaymentForm() {
        const currentPayment = this.paymentData.getDefaultPaymentMethod();
        this.userPayMethodForm = this.fb.group({
            country_id: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            country_prefix: [''],
            countryId: [''],
            handleFees: [''],
            handleFeesType: [''],
            device_name: [''],
            currency: [''],
            currencyLabel: [''],
            pay_token: [''],
            url: [''],
            montant: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].min(1)])],
            montantAvecFees: ['0'],
            montantTotal: ['0'],
            type_payment_id: [currentPayment ? currentPayment.typepaiement_id : ''],
            type_payment_name: [currentPayment ? currentPayment.name : ''],
            typePaymentIndex: [0, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            phone: [currentPayment && this.formUtil.validatePhone(currentPayment.numero_compte) ? currentPayment.numero_compte : ''],
            anonym: false,
            numero: ['']
        });
    }
    // init form message
    initFormMessage() {
        this.translate.get(['REGISTER_PHONE_REQUIRED', 'M_COUNTRY_REQUIRED', 'AMOUNT_REQUIRED', 'PAID_MODE_REQUIRED'])
            .subscribe(value => {
            this.validationMessages = {
                payementtype: [
                    { type: 'required', message: value.PAID_MODE_REQUIRED }
                ],
                phone: [
                    { type: 'required', message: value.REGISTER_PHONE_REQUIRED },
                ],
                amount: [
                    { type: 'required', message: value.AMOUNT_REQUIRED }
                ],
                country_id: [
                    { type: 'required', message: value.M_COUNTRY_REQUIRED }
                ]
            };
        });
    }
    // Remove space
    removeSpace() {
        this.userPayMethodForm.get('phone').setValue(this.paymentData.removeInputSpace(this.userPayMethodForm.value.phone));
    }
    // check if it is not  mobile operator
    checkMobileOperator() {
        return this.paymentData.isMobileOperator(this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can show paypal message
    canShowPaypalMessage() {
        return this.userPayMethodForm.value.montant && this.paymentData.hasPaypalMessage(this.paypalMessage, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can show paypal button
    canShowPaypalButton() {
        return this.paymentData.hasPaypalButton(this.paypal_initialized, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can pay with paypal
    canPayWithPaypal() {
        return this.paymentData.canShowPayment(this.userPayMethodForm.valid, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex], this.userPayMethodForm.value.phone, this.errorPhone);
    }
    // check if emial or phone is valid
    checckEmailOrPhone(inputValue, index) {
        this.removeSpace();
        this.userPayMethodForm.get('type_payment_id').setValue(this.paymentMethods[index].id);
        switch (this.paymentMethods[index].name) {
            case 'ORANGE MONEY':
                this.errorPhone = !this.formUtil.validatePhone(inputValue);
                if (!this.errorPhone) {
                    this.userPayMethodForm.get('numero').setValue(this.userPayMethodForm.value.country_prefix +
                        '' + this.userPayMethodForm.value.phone);
                }
                break;
            case 'MTN MOBILE MONEY':
                this.errorPhone = !this.formUtil.validatePhone(inputValue);
                if (!this.errorPhone) {
                    this.userPayMethodForm.get('numero').setValue(this.userPayMethodForm.value.country_prefix +
                        '' + this.userPayMethodForm.value.phone);
                }
                break;
            default:
                break;
        }
    }
    // get all payment method
    getAllMethodPaymentType() {
        this.loadingOperator = true;
        this.userService.getAllMethodPaymentType().subscribe((reponse) => {
            this.paymentMethods = [];
            this.loadingOperator = false;
            if (reponse && reponse.typePayment && reponse.typePayment.length > 0) {
                this.paymentMethods = this.paymentData.formatPaymentMethodResponseContribution(reponse.typePayment);
            }
            const defaultMethod = [{
                    id: 0, country_id: 0, logo: 'assets/pesuwallet.jpg',
                    currency: this.tontineData.currency, name: 'WALLET', placeholder: '',
                    handling_fees: 0,
                    type_handling_fees: 'valeur'
                }];
            this.paymentMethods = defaultMethod.concat(this.paymentMethods);
            this.allPaymentMethods = this.paymentMethods;
            this.getCountries(false);
        }, error => {
            this.loadingOperator = false;
            this.paymentMethods.push({
                id: 0, country_id: 0, logo: 'assets/pesuwallet.jpg',
                currency: this.tontineData.currency, name: 'WALLET', placeholder: '',
                handling_fees: 0,
                type_handling_fees: 'valeur'
            });
            this.allPaymentMethods = this.paymentMethods;
            this.getCountries(false);
            this.errorService.manageError(error);
        });
    }
    // Get all countries
    getCountries(refresher) {
        this.location.getAllCountries(refresher).then((countries) => {
            this.states = this.paymentData.formatCountriesData(countries);
            // Set the country of the tontine
            if (this.states && this.states.length > 0) {
                setTimeout(() => {
                    this.states.forEach(country => {
                        if (country.country_key === this.tontineData.code_country) {
                            this.updateFormData(country);
                        }
                    });
                }, 200);
            }
        });
    }
    // update the form data
    updateFormData(country) {
        if (country) {
            this.userPayMethodForm.get('countryId').setValue(country.country_id);
            this.userPayMethodForm.get('country_prefix').setValue(country.country_prefixe);
            this.userPayMethodForm.get('currency').setValue(country.device_name);
            this.userPayMethodForm.get('handleFeesType').setValue(country.type_handling_fees);
            this.userPayMethodForm.get('handleFees').setValue(country.handling_fees);
            this.userPayMethodForm.get('currencyLabel').setValue(country.currency_label);
            this.zone.run(() => {
                this.userPayMethodForm.get('country_id').setValue(country.country_id);
            });
            this.updatePaymentsMethods(country.country_id);
        }
    }
    // Update the payment method
    updatePaymentMethod(index) {
        if (this.paymentMethods[index]) {
            this.userPayMethodForm.get('type_payment_id').setValue(this.paymentMethods[index].id);
            this.userPayMethodForm.get('type_payment_name').setValue(this.paymentMethods[index].name);
            this.userPayMethodForm.get('device_name').setValue(this.paymentMethods[index].currency);
            this.userPayMethodForm.get('handleFeesType').setValue(this.paymentMethods[index].type_handling_fees);
            this.userPayMethodForm.get('handleFees').setValue(this.paymentMethods[index].handling_fees);
            this.zone.run(() => {
                this.userPayMethodForm.get('typePaymentIndex').setValue(index);
            });
        }
        if (this.paymentMethods && this.paymentMethods[index] &&
            this.paymentMethods[index].name === 'PAYPAL') {
            this.paypal_initialized = false;
            this.updatePaypalAmount();
        }
    }
    // update the payment method
    updatePaymentsMethods(countryId) {
        const paymentsMethods = [];
        this.paymentMethods = [];
        this.allPaymentMethods.forEach(payment => {
            if (payment.country_id === countryId || payment.country_id === 0) {
                paymentsMethods.push(payment);
            }
        });
        this.paymentMethods = paymentsMethods;
        if (this.paymentMethods && this.paymentMethods.length > 0) {
            this.updatePaymentMethod(0);
        }
    }
    // Calucalte the payment with handlfees
    getAmountWithFees(amountShare, devise) {
        return this.paymentData.getHandleFeesWithDevise(amountShare, devise, this.userPayMethodForm.value.handleFees, this.userPayMethodForm.value.handleFeesType);
    }
    // Update the country info country prfix
    updateCurrencyCountry(countryId) {
        this.zone.run(() => {
            this.paymentMethods = [];
        });
        setTimeout(() => {
            this.states.forEach(state => {
                if (state.country_id === countryId) {
                    this.updateFormData(state);
                }
            });
        }, 300);
    }
    // Show the payment mode
    showPayment(mode) {
        switch (mode.type_payment_name) {
            case 'ORANGE MONEY':
                this.updateParametersOrange();
                break;
            case 'OZOW':
                this.updateParametersOzow();
                break;
            case 'MTN MOBILE MONEY':
                this.updateParametersMtn();
                break;
            case 'WALLET':
                this.updateParametersWallet();
                break;
            default:
                break;
        }
    }
    /******************************** END FORM SERVICES *********************************************/
    /******************************** START WALLET PAYMENT *********************************************/
    paymentWalletConfirm(dataMessage, translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${dataMessage.title}`,
                message: `${translation[0]} ${dataMessage.montant}
      ${dataMessage.device_name} ${translation[1]}`,
                buttons: [
                    {
                        text: `${translation[2]}`,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                        }
                    }, {
                        text: `${translation[3]}`,
                        handler: () => {
                            this.paidWithWallet(dataMessage);
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
    // Update the wallet parameters
    updateParametersWallet() {
        const translation = [];
        this.translate.get(['CONFIRM_PAY_CONTRIBUTION_SUBTEXT1', 'CONFIRM_PAY_CONTRIBUTION_SUBTEXT2', 'CANCEL_TEXT', 'YES_TEXT']).subscribe(trans => {
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT1);
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT2);
            translation.push(trans.CANCEL_TEXT);
            translation.push(trans.YES_TEXT);
            const params = {
                typecontribution_id: 6,
                tontine_event_id: this.tontineData.id,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                device_name: this.tontineData.currency,
                country_id: this.userPayMethodForm.value.countryId,
                montant: this.userPayMethodForm.value.montant,
                anonym: this.userPayMethodForm.value.anonym,
                sens_contribution: 'entrant',
                title: this.contributionData.title
            };
            this.paymentWalletConfirm(params, translation);
        });
    }
    // Send the user contribution
    paidWithWallet(contributionData) {
        this.loading = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        this.contribution.contributeEventWithWallet(contributionData)
            .subscribe((reponse) => {
            this.loading = false;
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG1').subscribe(value => {
                    this.ui.presentToast(value);
                });
                // this.modalCtrl.dismiss();
                this.initPaymentForm();
                this.router.navigate(['dashboard/tontines-events', this.contributionData.idEvent]);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithWallet(contributionData);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    /******************************** START WALLET PAYMENT *********************************************/
    /******************************** START PAYPAL PAYMENT *********************************************/
    // update the paypal total amount
    updatePaypalAmount() {
        if (this.userPayMethodForm.value.montant) {
            if (this.userPayMethodForm.value.type_payment_name === 'PAYPAL') {
                const amount = this.getAmountWithFees(this.userPayMethodForm.value.montant, this.contributionData.device_name);
                this.userPayMethodForm.get('montantAvecFees').setValue(amount);
                if (this.contributionData.device_name !== this.userPayMethodForm.value.device_name) {
                    this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.userPayMethodForm.value.montant)
                        .then(montatSansFees => {
                        if (montatSansFees) {
                            const amountAvecFees = this.getAmountWithFees(montatSansFees, this.userPayMethodForm.value.device_name);
                            this.userPayMethodForm.get('montantTotal').setValue(amountAvecFees);
                            this.translate.get('PAIDMODE_MSG2').subscribe(value => {
                                this.paypalMessage = `${value} ${this.userPayMethodForm.value.montantAvecFees}
                 ${this.contributionData.device_name} =
                ${this.userPayMethodForm.value.montantTotal}
                ${this.userPayMethodForm.value.device_name}`;
                                this.setupPayPay();
                            });
                        }
                        else {
                            this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                                this.paypalMessage = value;
                            });
                        }
                    });
                }
                else {
                    this.userPayMethodForm.get('montantTotal').setValue(this.userPayMethodForm.value.montantAvecFees);
                    this.translate.get('PAIDMODE_MSG2').subscribe(value => {
                        this.paypalMessage = `${value}  ${this.userPayMethodForm.value.montantTotal}
            ${this.userPayMethodForm.value.device_name}`;
                        this.setupPayPay();
                    });
                }
            }
        }
    }
    setupPayPay() {
        if (!this.paypal_initialized) {
            this.initPayPal();
        }
    }
    initPayPal() {
        if (this.userPayMethodForm.value.montantTotal > 0) {
            this.paypalLoading = true;
            this.paypal_initialized = true;
            let paypalbuttoncontainer = this.paypalbuttoncontainer.nativeElement;
            let _this = this;
            paypal.Button.render({
                env: 'production',
                style: {
                    size: 'responsive',
                    color: 'gold',
                    shape: 'pill',
                    label: 'checkout',
                    tagline: false
                },
                client: {
                    sandbox: 'ARIMcMamksC74CLp7Zavgn62RsKK0XDfjePxjU9gsWmcdzyI3AYz3PwADIktvUgCdhAwWCXPaBzCckOC',
                    production: 'AVdCN0ymBsPer15VtLbeNoZ3vkjkhap6vXoxwsWF3B0H4GM_mVQ5GVpJ2h4-G_AlVVIsBYWx4JpVVxLT'
                },
                // Show the buyer a 'Pay Now' button in the checkout flow
                commit: true,
                payment: function (data, actions) {
                    return actions.payment.create({
                        payment: {
                            transactions: [
                                {
                                    amount: {
                                        total: _this.userPayMethodForm.value.montantTotal,
                                        currency: _this.userPayMethodForm.value.device_name
                                    },
                                    description: 'Toupesu'
                                }
                            ]
                        }
                    });
                },
                // onAuthorize() is called when the buyer approves the payment
                onAuthorize: function (data, actions, error) {
                    if (error) {
                        _this.exitPayment();
                    }
                    if (error === 'INSTRUMENT_DECLINED') {
                        _this.exitPayment();
                    }
                    // Make a call to the REST ui to execute the payment
                    return actions.payment.execute().then(function () {
                        const params = {
                            refID: _this.reference,
                            amount: _this.userPayMethodForm.value.montantTotal,
                            moneyCode: _this.userPayMethodForm.value.device_name,
                            product: 'Toupesu',
                            paypalID: data.paymentToken.split('-')[1]
                        };
                        // Save and check the payment result
                        _this.userPayMethodForm.get('pay_token').setValue(data.paymentToken.split('-')[1]);
                        _this.api.post('livepaygateway/paypal/savePayRequest', JSON.stringify(params)).subscribe((ans) => {
                            if (ans && ans.success) {
                                _this.updateParametersPaypal(data.paymentToken.split('-')[1]);
                            }
                        }, error => {
                            _this.updateParametersPaypal(data.paymentToken.split('-')[1]);
                        });
                    });
                },
                onCancel: function (data, actions) {
                    _this.exitPayment();
                },
                onClick: (data, actions) => {
                    _this.translate.get('TOPUP_TEXT1').subscribe(value => {
                        _this.ui.presentToast(value);
                    });
                }
            }, paypalbuttoncontainer);
            setTimeout(() => {
                this.paypalLoading = false;
            }, 2000);
        }
    }
    // Update parameters PAYPAL
    updateParametersPaypal(payToken) {
        const amount = this.getAmountWithFees(this.userPayMethodForm.value.montant, this.contributionData.device_name);
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (this.contributionData.device_name === this.userPayMethodForm.value.device_name) {
            const params = {
                tontine_event_id: this.contributionData.idEvent,
                typecontribution_id: 6,
                country_id: this.userPayMethodForm.value.countryId,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                montant_d_une_part_sans_handing_fees: this.userPayMethodForm.value.montant,
                montant_d_une_part_avec_handling_fees: this.userPayMethodForm.value.montantAvecFees,
                device_name: this.contributionData.device_name,
                sens_contribution: 'entrant',
                anonym: this.userPayMethodForm.value.anonym,
                pay_token: payToken,
                operator: 'paypal'
            };
            this.paidWithoutConversionOperator(params);
        }
        else {
            this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.userPayMethodForm.value.montant)
                .then(montSansFees => {
                if (montSansFees) {
                    const params = {
                        tontine_event_id: this.contributionData.idEvent,
                        typecontribution_id: 6,
                        country_id: this.userPayMethodForm.value.countryId,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        device_depart: this.userPayMethodForm.value.device_name,
                        device_arrivee: this.contributionData.device_name,
                        montant_device_depart_d_une_part_sans_handling_fees: montSansFees ? montSansFees : 0,
                        montant_device_depart_d_une_part_avec_handling_fees: this.getAmountWithFees(montSansFees, this.userPayMethodForm.value.device_name),
                        montant_device_arrivee_d_une_part_sans_handling_fees: this.userPayMethodForm.value.montant,
                        montant_device_arrivee_d_une_part_avec_handling_fees: this.userPayMethodForm.value.montantAvecFees,
                        sens_contribution: 'entrant',
                        anonym: this.userPayMethodForm.value.anonym,
                        pay_token: payToken,
                        operator: 'paypal'
                    };
                    this.paidWithConversionOperator(params);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
    }
    /******************************** END PAYPAL PAYMENT *********************************************/
    /******************************** START MTN PAYMENT *********************************************/
    // Update parameters  Mtn payment
    updateParametersMtn() {
        const amount = this.getAmountWithFees(this.userPayMethodForm.value.montant, this.contributionData.device_name);
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (this.contributionData.device_name !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.userPayMethodForm.value.montant).then(montantSansFees => {
                if (montantSansFees) {
                    const params = {
                        tontine_event_id: this.contributionData.idEvent,
                        typecontribution_id: 6,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        device_depart: this.userPayMethodForm.value.device_name,
                        device_arrivee: this.contributionData.device_name,
                        montant_device_depart_d_une_part_sans_handling_fees: montantSansFees ? montantSansFees : 0,
                        montant_device_depart_d_une_part_avec_handling_fees: this.getAmountWithFees(montantSansFees, this.userPayMethodForm.value.device_name),
                        montant_device_arrivee_d_une_part_sans_handling_fees: this.userPayMethodForm.value.montant,
                        montant_device_arrivee_d_une_part_avec_handling_fees: this.userPayMethodForm.value.montantAvecFees,
                        sens_contribution: 'entrant',
                        anonym: this.userPayMethodForm.value.anonym,
                        numero: this.userPayMethodForm.value.numero,
                        operator: 'MTN'
                    };
                    this.contributionDataParams = params;
                    const messageConfirmation = {
                        title: this.contributionData.title, contribution: this.contributionDataParams.montant_device_depart_d_une_part_avec_handling_fees,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMesaage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const params = {
                tontine_event_id: this.contributionData.idEvent,
                typecontribution_id: 6,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                device_name: this.contributionData.device_name,
                country_id: this.userPayMethodForm.value.countryId,
                montant_d_une_part_sans_handing_fees: this.userPayMethodForm.value.montant,
                montant_d_une_part_avec_handling_fees: this.userPayMethodForm.value.montantAvecFees,
                sens_contribution: 'entrant',
                anonym: this.userPayMethodForm.value.anonym,
                numero: this.userPayMethodForm.value.numero,
                operator: 'MTN'
            };
            this.contributionDataParams = params;
            const messageConfirmation = {
                title: this.contributionData.title, contribution: this.userPayMethodForm.value.montantAvecFees,
                device_name: this.contributionData.device_name, type: 'notconverted'
            };
            this.showConfirmationMesaage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END MTN PAYMENT *********************************************/
    /******************************** START ORANGE PAYMENT *********************************************/
    // Update parameters  Orange payment
    updateParametersOrange() {
        const amount = this.getAmountWithFees(this.userPayMethodForm.value.montant, this.contributionData.device_name);
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (this.contributionData.device_name !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.userPayMethodForm.value.montant).then(montantSansFees => {
                if (montantSansFees) {
                    const params = {
                        tontine_event_id: this.contributionData.idEvent,
                        typecontribution_id: 6,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        device_depart: this.userPayMethodForm.value.device_name,
                        device_arrivee: this.contributionData.device_name,
                        montant_device_depart_d_une_part_sans_handling_fees: montantSansFees ? montantSansFees : 0,
                        montant_device_depart_d_une_part_avec_handling_fees: this.getAmountWithFees(montantSansFees, this.userPayMethodForm.value.device_name),
                        montant_device_arrivee_d_une_part_sans_handling_fees: this.userPayMethodForm.value.montant,
                        montant_device_arrivee_d_une_part_avec_handling_fees: this.userPayMethodForm.value.montantAvecFees,
                        sens_contribution: 'entrant',
                        numero: this.userPayMethodForm.value.numero,
                        anonym: this.userPayMethodForm.value.anonym,
                        operator: 'orange'
                    };
                    this.contributionDataParams = params;
                    const messageConfirmation = {
                        title: this.contributionData.title, contribution: this.contributionDataParams.montant_device_depart_d_une_part_avec_handling_fees,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMesaage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const params = {
                tontine_event_id: this.contributionData.idEvent,
                typecontribution_id: 6,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                device_name: this.contributionData.device_name,
                country_id: this.userPayMethodForm.value.countryId,
                montant_d_une_part_sans_handing_fees: this.userPayMethodForm.value.montant,
                montant_d_une_part_avec_handling_fees: this.userPayMethodForm.value.montantAvecFees,
                sens_contribution: 'entrant',
                numero: this.userPayMethodForm.value.numero,
                anonym: this.userPayMethodForm.value.anonym,
                operator: 'orange'
            };
            this.contributionDataParams = params;
            const messageConfirmation = {
                title: this.contributionData.title, contribution: this.userPayMethodForm.value.montantAvecFees,
                device_name: this.contributionData.device_name, type: 'notconverted'
            };
            this.showConfirmationMesaage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END ORANGE PAYMENT *********************************************/
    /******************************** START OZOW PAYMENT *********************************************/
    // Update parameters OZOW payment
    updateParametersOzow() {
        const amount = this.getAmountWithFees(this.userPayMethodForm.value.montant, this.contributionData.device_name);
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (this.contributionData.device_name !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.userPayMethodForm.value.montant).then(montantSansFees => {
                if (montantSansFees) {
                    const params = {
                        tontine_event_id: this.contributionData.idEvent,
                        typecontribution_id: 6,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        device_depart: this.userPayMethodForm.value.device_name,
                        device_arrivee: this.contributionData.device_name,
                        montant_device_depart_d_une_part_sans_handling_fees: montantSansFees ? montantSansFees : 0,
                        montant_device_depart_d_une_part_avec_handling_fees: this.getAmountWithFees(montantSansFees, this.userPayMethodForm.value.device_name),
                        montant_device_arrivee_d_une_part_avec_handling_fees: this.userPayMethodForm.value.montantAvecFees,
                        montant_device_arrivee_d_une_part_sans_handling_fees: this.userPayMethodForm.value.montant,
                        sens_contribution: 'entrant',
                        anonym: this.userPayMethodForm.value.anonym,
                        numero: this.userPayMethodForm.value.numero,
                        operator: 'ozow'
                    };
                    this.contributionDataParams = params;
                    const messageConfirmation = {
                        title: this.contributionData.title, contribution: this.contributionDataParams.montant_device_depart_d_une_part_avec_handling_fees,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMesaage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const params = {
                tontine_event_id: this.contributionData.idEvent,
                typecontribution_id: 6,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                device_name: this.contributionData.device_name,
                country_id: this.userPayMethodForm.value.countryId,
                montant_d_une_part_sans_handing_fees: this.userPayMethodForm.value.montant,
                montant_d_une_part_avec_handling_fees: this.userPayMethodForm.value.montantAvecFees,
                sens_contribution: 'entrant',
                anonym: this.userPayMethodForm.value.anonym,
                numero: this.userPayMethodForm.value.numero,
                operator: 'ozow'
            };
            this.contributionDataParams = params;
            const messageConfirmation = {
                title: this.contributionData.title, contribution: this.userPayMethodForm.value.montantAvecFees,
                device_name: this.contributionData.device_name, type: 'notconverted'
            };
            this.showConfirmationMesaage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END OZOW PAYMENT *********************************************/
    /******************************** START COMMON PAYMENT SERVICES *********************************************/
    showConfirmationMesaage(messageConfirmation, contributionDataParams) {
        const translation = [];
        this.translate.get(['CONFIRM_PAY_CONTRIBUTION_SUBTEXT1', 'CONFIRM_PAY_CONTRIBUTION_SUBTEXT2', 'CANCEL_TEXT', 'YES_TEXT']).subscribe(trans => {
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT1);
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT2);
            translation.push(trans.CANCEL_TEXT);
            translation.push(trans.YES_TEXT);
            this.paymentOperatorConfirm(messageConfirmation, contributionDataParams, translation);
        });
    }
    paymentOperatorConfirm(dataMessage, contributionDataParams, translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${dataMessage.title}`,
                message: `${translation[0]} ${dataMessage.contribution}
    ${dataMessage.device_name}  ${translation[1]}`,
                buttons: [
                    {
                        text: `${translation[2]}`,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                        }
                    }, {
                        text: `${translation[3]}`,
                        handler: () => {
                            if (dataMessage.type === 'converted') {
                                this.paidWithConversionOperator(contributionDataParams);
                            }
                            else if (dataMessage.type === 'notconverted') {
                                this.paidWithoutConversionOperator(contributionDataParams);
                            }
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
    // Paid the user contribution with operator after conversion
    paidWithConversionOperator(contributionData) {
        this.loading = true;
        this.showLoadingMessage(contributionData);
        this.contribution.contributeAndConvertWithoutWalletForEvent(contributionData).subscribe((reponse) => {
            if (reponse && reponse.message === 'success') {
                this.sendResponsePerOperator(reponse, contributionData.operator);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithConversionOperator(contributionData);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    // Paid the user contribution with operator without conversion
    paidWithoutConversionOperator(contributionData) {
        this.loading = true;
        this.showLoadingMessage(contributionData);
        this.contribution.contributeWithoutWalletAndConversionForEvent(contributionData).subscribe((reponse) => {
            if (reponse && reponse.message === 'success') {
                this.sendResponsePerOperator(reponse, contributionData.operator);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithoutConversionOperator(contributionData);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    // Send message per operator
    sendResponsePerOperator(data, operator) {
        this.checkPaymentStatusOperator(data.pay_token, operator);
        const reference = data && data.refID ? data.refID : '';
        this.refernceId = reference;
        this.cancelPaymentResult(reference);
        switch (operator) {
            case 'ozow':
                window.open(data.url, '_blank');
                break;
            default:
                break;
        }
    }
    // show the loading message
    showLoadingMessage(data) {
        switch (data.operator) {
            case 'orange':
                this.translate.get('ORANGE_PAYMENT_MESSAGE').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'MTN':
                this.translate.get('MTN_PAYMENT_MESSAGE').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'paypal':
                this.translate.get('TOPUP_TEXT1').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'ozow':
                this.translate.get('TOPUP_TEXT1').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            default:
                break;
        }
    }
    // step 2 :  Check the status via Ozow
    checkPaymentStatusOperator(payToken, operator) {
        this.cron = setInterval(() => {
            this.checkPaymentStatusOperatorServer(payToken, operator);
        }, 20000);
    }
    // SHOW THE SUCCES MESSAGE
    showSuccesMessage() {
        this.translate.get('TONTINE_EVENT_SUCCESS1').subscribe(value => {
            this.ui.presentToast(value);
        });
        this.contribution.sendMessageContribute(true);
    }
    // clear the time out
    clearTimeoutData() {
        if (this.timeOut) {
            clearTimeout(this.timeOut);
            this.timeOut = null;
        }
    }
    // clear the set interval
    clearSetIntervalData() {
        if (this.cron) {
            clearInterval(this.cron);
        }
        this.cron = null;
        for (let i = 0; i < 1000; i++) {
            clearInterval(i);
        }
    }
    // Check the payment Status
    checkPaymentStatusOperatorServer(payToken, operator) {
        this.wallet.getStatusPaymentEventOperator(payToken, operator).subscribe((reponse) => {
            if (reponse && reponse.message === 'OK') {
                this.showPaymentResult();
                this.showSuccesMessage();
            }
        }, error => {
            if (error && error.error && error.error.message === 'FAIL') {
                this.exitPayment();
                this.translate.get('TONTINE_EVENT_ERROR2').subscribe(value => {
                    this.ui.presentToast(value);
                });
            }
            else {
                this.exitPayment();
                this.translate.get('TONTINE_EVENT_ERROR2').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.errorService.manageError(error);
            }
        });
    }
    // Show payment confirmation dialog
    showPaymentResult() {
        this.loading = false;
        this.ui.dismissLoading();
        this.initPaymentForm();
        this.clearTimeoutData();
        this.clearSetIntervalData();
        const currentDate = new Date();
        this.auth.setAppLastSession(currentDate.getTime());
        this.events.publish('new-event');
        this.events.publish('modal-close');
        this.navController.setDirection('root');
        this.router.navigate(['dashboard/tontines-events']);
    }
    // Cancel the payment
    cancelPaymentResult(refence) {
        this.timeOut = setTimeout(() => {
            this.exitPayment();
            this.translate.get(['TRANSACTION_CANCEL', 'TOPUP_MSG9']).subscribe(trans => {
                this.ui.presentAlert(`${trans.TRANSACTION_CANCEL}`, `${trans.TOPUP_MSG9} ${refence}`);
            });
        }, 300000);
    }
    // exit the payment directly
    exitPayment() {
        this.loading = false;
        this.ui.dismissLoading();
        this.getAllMethodPaymentType();
        this.initFormMessage();
        this.initPaymentForm();
        this.clearTimeoutData();
        this.clearSetIntervalData();
        this.events.publish('modal-close');
    }
    ionicViewDidLeave() {
        if (this.loading) {
            this.exitPayment();
        }
    }
    // listen to back button
    hardwareBackButton() {
        this.platform.backButton.subscribe(() => {
            const url = this.router.url;
            if (url === '/dashboard/tontines-events/' + this.tontineData.id) {
                if (this.refernceId) {
                    this.cancelPaymentResult(this.refernceId);
                }
                else {
                    this.exitPayment();
                }
            }
        });
    }
};
PaidmodeEventComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_17__["UserService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__["Platform"] },
    { type: src_app_dashboard_tontines_events_services_tontines_events_service__WEBPACK_IMPORTED_MODULE_13__["TontinesEventsService"] },
    { type: _service_payment_global_data_service__WEBPACK_IMPORTED_MODULE_16__["PaymentGlobalDataService"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_18__["EventService"] },
    { type: _service_api_service__WEBPACK_IMPORTED_MODULE_21__["ApiService"] },
    { type: _service_ui_service__WEBPACK_IMPORTED_MODULE_19__["UiService"] },
    { type: _service_currency_service__WEBPACK_IMPORTED_MODULE_11__["CurrencyService"] },
    { type: src_app_dashboard_my_tontines_services_contribution_service__WEBPACK_IMPORTED_MODULE_10__["ContributionService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__["AlertController"] },
    { type: src_app_dashboard_my_wallet_service_wallet_service__WEBPACK_IMPORTED_MODULE_12__["WalletService"] },
    { type: _service_error_service__WEBPACK_IMPORTED_MODULE_5__["ErrorService"] },
    { type: _service_location_service__WEBPACK_IMPORTED_MODULE_8__["LocationService"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_9__["TranslateService"] },
    { type: _service_form_utils_service__WEBPACK_IMPORTED_MODULE_14__["FormUtilsService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__["NavController"] },
    { type: _service_payment_error_service__WEBPACK_IMPORTED_MODULE_15__["PaymentErrorService"] },
    { type: src_app_auth_service_auth_service__WEBPACK_IMPORTED_MODULE_20__["AuthService"] }
];
PaidmodeEventComponent.propDecorators = {
    amountPay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    paypalbuttoncontainer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: ['paypalbuttoncontainer', { static: false },] }]
};
PaidmodeEventComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-paidmode-event',
        template: _raw_loader_paidmode_event_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_paidmode_event_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], PaidmodeEventComponent);



/***/ }),

/***/ "qdIG":
/*!*****************************************************************!*\
  !*** ./src/app/shared/initiate-pay/initiate-pay.component.scss ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJpbml0aWF0ZS1wYXkuY29tcG9uZW50LnNjc3MifQ== */");

/***/ }),

/***/ "r0Dw":
/*!***************************************************************************!*\
  !*** ./src/app/shared/contribution-order/contribution-order.component.ts ***!
  \***************************************************************************/
/*! exports provided: ContributionOrderComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContributionOrderComponent", function() { return ContributionOrderComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_contribution_order_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./contribution-order.component.html */ "n/ZU");
/* harmony import */ var _contribution_order_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contribution-order.component.scss */ "gJwf");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var src_app_dashboard_my_tontines_services_debts_manager_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/debts-manager.service */ "ijC1");
/* harmony import */ var _service_error_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../service/error.service */ "TkUd");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../service/events.service */ "r5fM");
/* harmony import */ var _service_ui_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../service/ui.service */ "QB/Y");










let ContributionOrderComponent = class ContributionOrderComponent {
    constructor(modatCtrl, debt, translate, ui, error, event) {
        this.modatCtrl = modatCtrl;
        this.debt = debt;
        this.translate = translate;
        this.ui = ui;
        this.error = error;
        this.event = event;
        this.event.subscribe('modal-close', () => {
            this.closeContribute('OK');
        });
        this.totalOfflineAmount = 0;
        this.totalOnlineAmount = 0;
        this.balanceOfflineAmount = 0;
        this.balanceOnlineAmount = 0;
    }
    ngOnInit() {
        this.isModeSelected = true;
        this.getInitiatePaymentData();
    }
    // check segment
    segmentChanged() {
        this.isModeSelected = !this.isModeSelected;
    }
    // Get the initiate payment data
    getInitiatePaymentData() {
        const params = this.debt.getDebtsData();
        const param = { bouffe_id: params.bouffe_id };
        this.loading = true;
        let montantOfflinePayer = 0;
        let montantOnlinePayer = 0;
        if (params.proof[0] && params.proof[0].liste_traditional_banking_proof) {
            params.proof[0].liste_traditional_banking_proof.forEach(proof => {
                montantOfflinePayer += proof.montant ? parseFloat(proof.montant) : 0;
            });
        }
        if (params.proof[0] && params.proof[0].liste_online_wallet_proof) {
            params.proof[0].liste_online_wallet_proof.forEach(proof => {
                montantOfflinePayer += proof.montant ? parseFloat(proof.montant) : 0;
            });
        }
        if (params.proof[0] && params.proof[0].liste_pay_with_caisse_tontine_proof) {
            params.proof[0].liste_pay_with_caisse_tontine_proof.forEach(proof => {
                montantOnlinePayer += proof.montant ? parseFloat(proof.montant) : 0;
            });
        }
        this.debt.getPaymentInitiateInformations(param).subscribe((reponse) => {
            this.loading = false;
            if (reponse && reponse.message === 'success') {
                this.totalOfflineAmount = 0;
                this.totalOnlineAmount = 0;
                reponse.infos_fund_repartition.forEach(caisse => {
                    this.totalOfflineAmount += caisse.montant_offline ? parseFloat(caisse.montant_offline) : 0;
                    this.totalOnlineAmount += caisse.montant_online ? parseFloat(caisse.montant_online) : 0;
                });
                this.balanceOfflineAmount = this.totalOfflineAmount - montantOfflinePayer;
                this.balanceOnlineAmount = this.totalOnlineAmount - montantOnlinePayer;
                this.balanceOnlineAmount > 0 ? this.isModeSelected = true : this.isModeSelected = false;
            }
        }, error => {
            this.loading = false;
            if (error && error.error && error.error.message === 'error') {
                if (error.error.tontine_id_not_exist) {
                    this.translate.get('ADD_SHARE_MSG4').subscribe(trans => {
                        this.ui.presentToast(trans);
                    });
                }
                if (error.error.user_not_found) {
                    this.loading = true;
                    this.error.renewSession().then((data) => {
                        if (data && data.result == 'OK') {
                            this.getInitiatePaymentData();
                        }
                        else {
                            this.loading = false;
                        }
                    });
                }
            }
        });
    }
    // close the modal
    closeContribute(message) {
        this.modatCtrl.dismiss(message, 'cancel');
    }
};
ContributionOrderComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["ModalController"] },
    { type: src_app_dashboard_my_tontines_services_debts_manager_service__WEBPACK_IMPORTED_MODULE_5__["DebtsManagerService"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_7__["TranslateService"] },
    { type: _service_ui_service__WEBPACK_IMPORTED_MODULE_9__["UiService"] },
    { type: _service_error_service__WEBPACK_IMPORTED_MODULE_6__["ErrorService"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_8__["EventService"] }
];
ContributionOrderComponent.propDecorators = {
    tontineName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    amountPay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    balance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    currency: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};
ContributionOrderComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-contribution-order',
        template: _raw_loader_contribution_order_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_contribution_order_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], ContributionOrderComponent);



/***/ }),

/***/ "r5fM":
/*!**************************************************!*\
  !*** ./src/app/shared/service/events.service.ts ***!
  \**************************************************/
/*! exports provided: EventService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventService", function() { return EventService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "qCKp");



let EventService = class EventService {
    constructor() {
        this.channels = {};
    }
    /**
     * Subscribe to a topic and provide a single handler/observer.
     * @param topic The name of the topic to subscribe to.
     * @param observer The observer or callback function to listen when changes are published.
     *
     * @returns Subscription from which you can unsubscribe to release memory resources and to prevent memory leak.
     */
    subscribe(topic, observer) {
        if (!this.channels[topic]) {
            // You can also use ReplaySubject with one concequence
            this.channels[topic] = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        }
        return this.channels[topic].subscribe(observer);
    }
    /**
     * Publish some data to the subscribers of the given topic.
     * @param topic The name of the topic to emit data to.
     * @param data data in any format to pass on.
     */
    publish(topic, data) {
        const subject = this.channels[topic];
        if (!subject) {
            // Or you can create a new subject for future subscribers
            return;
        }
        subject.next(data);
    }
    /**
     * When you are sure that you are done with the topic and the subscribers no longer needs to listen to a particular topic, you can
     * destroy the observable of the topic using this method.
     * @param topic The name of the topic to destroy.
     */
    destroy(topic) {
        const subject = this.channels[topic];
        if (!subject) {
            return;
        }
        subject.complete();
        delete this.channels[topic];
    }
};
EventService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({ providedIn: 'root' })
], EventService);



/***/ }),

/***/ "rYWg":
/*!**************************************************!*\
  !*** ./src/app/shared/pipes/remove-occurence.ts ***!
  \**************************************************/
/*! exports provided: RemoveCurrencyPipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RemoveCurrencyPipe", function() { return RemoveCurrencyPipe; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");


let RemoveCurrencyPipe = class RemoveCurrencyPipe {
    transform(items, value) {
        let itemsList = [];
        if (!value) {
            return items;
        }
        itemsList = items.filter(data => { return data.currency_name !== value; });
        return itemsList;
    }
};
RemoveCurrencyPipe = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"])({
        name: 'removecurrency'
    })
], RemoveCurrencyPipe);



/***/ }),

/***/ "sGTw":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/contribution/contribution.component.html ***!
  \*******************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header>\r\n  <ion-toolbar>\r\n    <ion-title class=\"ion-text-center\">{{'DEBT_MAKE_PAYMENT' | translate }}</ion-title>\r\n  </ion-toolbar>\r\n  <ion-toolbar class=\"ion-text-left\">\r\n    <ion-segment  (ionChange)=\"segmentChanged($event)\" value=\"0\">\r\n  \r\n      <ion-segment-button value=\"0\">\r\n        <ion-label class=\"ion-text-capitalize\">{{ 'ONLINE_TEXT' | translate }}</ion-label>\r\n      </ion-segment-button>\r\n      <ion-segment-button value=\"1\">\r\n        <ion-label class=\"ion-text-capitalize\">{{ 'CASH_PAYMENT' | translate }}</ion-label>\r\n      </ion-segment-button>\r\n\r\n      <ion-segment-button value=\"2\">\r\n        <ion-label class=\"ion-text-capitalize\">{{ 'BANK_TEXT' | translate }}</ion-label>\r\n      </ion-segment-button>\r\n\r\n     \r\n    </ion-segment>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"tontine-contribute\">\r\n  <ion-grid>\r\n    <ion-row>\r\n      <ion-col>\r\n        <p class=\"ion-no-margin\">\r\n          {{ 'MAKING_PAYMENT_TEXT' | translate }} <b>{{ tontineName }}</b>.         \r\n        </p>\r\n        <h4 class=\"ion-no-margin\">\r\n          <small>\r\n            {{ 'DEBT_AMOUNT_TEXT' | translate }}: {{ (amountPay | commadumper)}} {{currency}} (<b class=\"text-danger\">{{ 'CURRENT_BALANCE' | translate }}:  {{ (balance | commadumper) }}  {{currency}}</b>)\r\n          </small>\r\n        </h4>\r\n      </ion-col>\r\n    </ion-row>\r\n    <ion-row>\r\n      <ion-col>\r\n        <div class=\"bank\" *ngIf=\"isModeSelected[0]\">\r\n          <app-paidmode-debt [amountPay]=\"amountPay\"  [balance]=\"balance\" ></app-paidmode-debt>\r\n        </div>\r\n        <div class=\"bank\" *ngIf=\"isModeSelected[1]\">\r\n          <app-cashmode [amountPay]=\"amountPay\" [balance]=\"balance\"></app-cashmode>\r\n        </div>\r\n        <div class=\"mobile\" *ngIf=\"isModeSelected[2]\">\r\n          <app-bankmode [amountPay]=\"amountPay\" [balance]=\"balance\"></app-bankmode>\r\n        </div>\r\n      </ion-col>\r\n    </ion-row>\r\n  </ion-grid> \r\n</ion-content>\r\n\r\n<ion-footer class=\"ion-padding ion-text-center\">\r\n    <ion-grid>\r\n      <ion-row>\r\n        <ion-col>\r\n            <ion-button expand=\"full\" \r\n                  fill=\"outline\"\r\n                  color=\"warning\" \r\n                  class=\"ion-text-uppercase\"\r\n                  shape=\"round\" (click)=\"closeContribute('cancel')\">\r\n              {{ 'CANCEL_TEXT' | translate }}\r\n            </ion-button>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n</ion-footer>\r\n");

/***/ }),

/***/ "sU7R":
/*!*********************************************************************!*\
  !*** ./src/app/shared/paidmode-seance/paidmode-seance.component.ts ***!
  \*********************************************************************/
/*! exports provided: PaidmodeSenceComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaidmodeSenceComponent", function() { return PaidmodeSenceComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_paidmode_seance_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./paidmode-seance.component.html */ "dCHs");
/* harmony import */ var _paidmode_seance_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./paidmode-seance.component.scss */ "BuaV");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var _service_error_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../service/error.service */ "TkUd");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _service_location_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../service/location.service */ "e009");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/tontine.service */ "/WEl");
/* harmony import */ var src_app_dashboard_my_tontines_services_contribution_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/contribution.service */ "US41");
/* harmony import */ var _service_api_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../service/api.service */ "6rCG");
/* harmony import */ var _service_currency_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../service/currency.service */ "GmDD");
/* harmony import */ var src_app_dashboard_my_wallet_service_wallet_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! src/app/dashboard/my-wallet/service/wallet.service */ "68js");
/* harmony import */ var _service_form_utils_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../service/form-utils.service */ "14LV");
/* harmony import */ var _service_payment_error_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../service/payment-error.service */ "FLu1");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var _service_payment_global_data_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../service/payment-global-data.service */ "T8hk");
/* harmony import */ var src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! src/app/dashboard/user/service/user.service */ "6Hie");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../service/events.service */ "r5fM");
/* harmony import */ var _service_ui_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../service/ui.service */ "QB/Y");





















let PaidmodeSenceComponent = class PaidmodeSenceComponent {
    constructor(fb, userService, platform, paymentData, router, api, currency, events, contribution, alertController, wallet, tontine, errorService, location, translate, formUtil, zone, paymentError, ui) {
        this.fb = fb;
        this.userService = userService;
        this.platform = platform;
        this.paymentData = paymentData;
        this.router = router;
        this.api = api;
        this.currency = currency;
        this.events = events;
        this.contribution = contribution;
        this.alertController = alertController;
        this.wallet = wallet;
        this.tontine = tontine;
        this.errorService = errorService;
        this.location = location;
        this.translate = translate;
        this.formUtil = formUtil;
        this.zone = zone;
        this.paymentError = paymentError;
        this.ui = ui;
        this.cron = null;
        this.timeOut = null;
        this.loadingOperator = false;
        this.loading = false;
        this.errorPhone = false;
        this.states = [];
        this.paymentMethods = [];
        this.paypalMessage = '';
        this.reference = this.formUtil.getRandomId();
        this.tontineData = this.tontine.getCurrentTontineData();
        this.allPaymentMethods = [];
        this.paypalLoading = false;
        this.paypal_initialized = false;
        this.contributionData = this.contribution.getContributionData();
        this.refernceId = '';
        this.hardwareBackButton();
    }
    ngOnInit() {
        this.getAllMethodPaymentType();
        this.initPaymentForm();
        this.initFormMessage();
    }
    /******************************** START FORM PAYMENT SERVICES*********************************************/
    // Form getters
    get phone() {
        return this.userPayMethodForm.get('phone');
    }
    get amountError() {
        return this.userPayMethodForm.get('montantAvecFees');
    }
    get country() {
        return this.userPayMethodForm.get('country_id');
    }
    get device_name() {
        return this.userPayMethodForm.get('device_name');
    }
    get payementtype() {
        return this.userPayMethodForm.get('typePaymentIndex');
    }
    // Init Form 
    initPaymentForm() {
        const currentPayment = this.paymentData.getDefaultPaymentMethod();
        this.userPayMethodForm = this.fb.group({
            country_id: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            country_prefix: [''],
            countryId: [''],
            handleFees: [''],
            handleFeesType: [''],
            device_name: [''],
            currency: [''],
            currencyLabel: [''],
            pay_token: [''],
            url: [''],
            montant: [''],
            montantAvecFees: ['0'],
            montantTotal: ['0'],
            type_payment_id: [currentPayment ? currentPayment.typepaiement_id : ''],
            type_payment_name: [currentPayment ? currentPayment.name : ''],
            typePaymentIndex: [0, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required],
            phone: [currentPayment && this.formUtil.validatePhone(currentPayment.numero_compte) ? currentPayment.numero_compte : ''],
            numero: ['']
        });
    }
    // Init form message
    initFormMessage() {
        this.translate.get(['REGISTER_PHONE_REQUIRED', 'AMOUNT_REQUIRED', 'PAID_MODE_REQUIRED'])
            .subscribe(value => {
            this.validationMessages = {
                payementtype: [
                    { type: 'required', message: value.PAID_MODE_REQUIRED }
                ],
                phone: [
                    { type: 'required', message: value.REGISTER_PHONE_REQUIRED },
                ],
                amount: [
                    { type: 'required', message: value.AMOUNT_REQUIRED }
                ],
                country_id: [
                    { type: 'required', message: value.M_COUNTRY_REQUIRED }
                ]
            };
        });
    }
    // Remove space
    removeSpace() {
        this.userPayMethodForm.get('phone').setValue(this.paymentData.removeInputSpace(this.userPayMethodForm.value.phone));
    }
    // check if it is not  mobile operator
    checkMobileOperator() {
        return this.paymentData.isMobileOperator(this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can show paypal message
    canShowPaypalMessage() {
        return this.paymentData.hasPaypalMessage(this.paypalMessage, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can show  paypal button
    canShowPaypalButton() {
        return this.paymentData.hasPaypalButton(this.paypal_initialized, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex]);
    }
    // can make payment 
    canPay() {
        return this.paymentData.canShowPayment(this.userPayMethodForm.valid, this.paymentMethods[this.userPayMethodForm.value.typePaymentIndex], this.userPayMethodForm.value.phone, this.errorPhone);
    }
    // check if emial or phone is valid
    checckEmailOrPhone(inputValue, index) {
        this.removeSpace();
        this.userPayMethodForm.get('type_payment_id').setValue(this.paymentMethods[index].id);
        switch (this.paymentMethods[index].name) {
            case 'ORANGE MONEY':
                this.errorPhone = !this.formUtil.validatePhone(inputValue);
                if (!this.errorPhone) {
                    this.userPayMethodForm.get('numero').setValue(this.userPayMethodForm.value.country_prefix +
                        '' + this.userPayMethodForm.value.phone);
                }
                break;
            case 'MTN MOBILE MONEY':
                this.errorPhone = !this.formUtil.validatePhone(inputValue);
                if (!this.errorPhone) {
                    this.userPayMethodForm.get('numero').setValue(this.userPayMethodForm.value.country_prefix +
                        '' + this.userPayMethodForm.value.phone);
                }
                break;
            default:
                break;
        }
    }
    // get all payment method
    getAllMethodPaymentType() {
        this.loadingOperator = true;
        this.userService.getAllMethodPaymentType().subscribe((reponse) => {
            this.loadingOperator = false;
            this.paymentMethods = [];
            if (reponse && reponse.typePayment && reponse.typePayment.length > 0) {
                this.paymentMethods = this.paymentData.formatPaymentMethodResponseContribution(reponse.typePayment);
            }
            const defaultMethod = [{
                    id: 0, country_id: 0, logo: 'assets/pesuwallet.jpg',
                    currency: this.tontineData.tontine.monnaie, name: 'WALLET', placeholder: '',
                    handling_fees: 0,
                    type_handling_fees: 'valeur',
                    type: 'WALLET'
                }];
            this.paymentMethods = defaultMethod.concat(this.paymentMethods);
            this.allPaymentMethods = this.paymentMethods;
            this.getCountries(false);
        }, error => {
            this.loadingOperator = false;
            this.paymentMethods.push({
                id: 0, country_id: 0, logo: 'assets/pesuwallet.jpg',
                currency: this.tontineData.tontine.monnaie, name: 'WALLET', placeholder: '',
                handling_fees: 0,
                type_handling_fees: 'valeur',
                type: 'WALLET'
            });
            this.allPaymentMethods = this.paymentMethods;
            this.getCountries(false);
            this.errorService.manageError(error);
        });
    }
    // Get all countries
    getCountries(refresher) {
        this.location.getAllCountries(refresher).then((countries) => {
            this.states = this.paymentData.formatCountriesData(countries);
            if (this.states && this.states.length > 0) {
                setTimeout(() => {
                    this.states.forEach(country => {
                        if (country.country_key === this.tontineData.tontine.country_key) {
                            this.updateFormData(country);
                        }
                    });
                }, 200);
            }
        });
    }
    // update the form data
    updateFormData(country) {
        if (country) {
            this.userPayMethodForm.get('countryId').setValue(country.country_id);
            this.userPayMethodForm.get('country_prefix').setValue(country.country_prefixe);
            this.userPayMethodForm.get('currency').setValue(country.device_name);
            this.userPayMethodForm.get('handleFees').setValue(country.handling_fees);
            this.userPayMethodForm.get('handleFeesType').setValue(country.type_handling_fees);
            this.userPayMethodForm.get('currencyLabel').setValue(country.currency_label);
            this.zone.run(() => {
                this.userPayMethodForm.get('country_id').setValue(country.country_id);
            });
            this.updatePaymentsMethods(country.country_id);
        }
    }
    // Update the payment method
    updatePaymentMethod(index) {
        if (this.paymentMethods[index]) {
            this.userPayMethodForm.get('type_payment_id').setValue(this.paymentMethods[index].id);
            this.userPayMethodForm.get('type_payment_name').setValue(this.paymentMethods[index].name);
            this.userPayMethodForm.get('device_name').setValue(this.paymentMethods[index].currency);
            this.userPayMethodForm.get('handleFees').setValue(this.paymentMethods[index].handling_fees);
            this.userPayMethodForm.get('handleFeesType').setValue(this.paymentMethods[index].type_handling_fees);
            this.zone.run(() => {
                this.userPayMethodForm.get('typePaymentIndex').setValue(index);
            });
        }
        if (this.paymentMethods && this.paymentMethods[index] &&
            this.paymentMethods[index].name === 'PAYPAL') {
            this.paypal_initialized = false;
            this.updatePaypalAmount();
        }
    }
    updatePaymentsMethods(countryId) {
        // update the payment method
        const paymentsMethods = [];
        this.paymentMethods = [];
        this.allPaymentMethods.forEach(payment => {
            if (payment.country_id === countryId || payment.country_id === 0) {
                paymentsMethods.push(payment);
            }
        });
        this.paymentMethods = paymentsMethods;
        if (this.paymentMethods && this.paymentMethods.length > 0) {
            this.updatePaymentMethod(0);
        }
    }
    // Calucalte the payment with handlfees
    getAmountWithFees(amountShare, devise) {
        return this.paymentData.getHandleFeesWithDevise(amountShare, devise, this.userPayMethodForm.value.handleFees, this.userPayMethodForm.value.handleFeesType);
    }
    // Update the country info country prfix
    updateCurrencyCountry(countryId) {
        this.zone.run(() => {
            this.paymentMethods = [];
        });
        setTimeout(() => {
            this.states.forEach(state => {
                if (state.country_id === countryId) {
                    this.updateFormData(state);
                }
            });
        }, 300);
    }
    selectOperator(data) {
        const operator = this.paymentMethods[data.typePaymentIndex].name;
        switch (operator) {
            case 'ORANGE MONEY':
                this.updateParametersOrange();
                break;
            case 'OZOW':
                this.updateParametersOzow();
                break;
            case 'MTN MOBILE MONEY':
                this.updateParametersMtn();
                break;
            default:
                break;
        }
    }
    // Show the payment mode
    showPayment(data) {
        const type = this.paymentMethods[data.typePaymentIndex].type;
        switch (type) {
            case 'OPERATOR':
                this.selectOperator(data);
                break;
            case 'WALLET':
                this.updateParametersWallet();
                break;
            default:
                break;
        }
    }
    /******************************** END FORM PAYMENT SERVICES*********************************************/
    /******************************** START WALLET PAYMENT *********************************************/
    paymentWalletConfirm(dataMessage, translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${dataMessage.title}`,
                message: `${translation[0]} ${dataMessage.contribution}
        ${dataMessage.device_name} ${translation[1]}`,
                buttons: [
                    {
                        text: `${translation[2]}`,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                        }
                    }, {
                        text: `${translation[3]}`,
                        handler: () => {
                            this.paidWithWallet();
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
    updateParametersWallet() {
        const translation = [];
        this.translate.get(['CONFIRM_PAY_CONTRIBUTION_SUBTEXT1', 'CONFIRM_PAY_CONTRIBUTION_SUBTEXT2', 'CANCEL_TEXT', 'YES_TEXT']).subscribe(trans => {
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT1);
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT2);
            translation.push(trans.CANCEL_TEXT);
            translation.push(trans.YES_TEXT);
            this.paymentWalletConfirm(this.contributionData, translation);
        });
    }
    // Send the user contribution
    paidWithWallet() {
        this.loading = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        this.contribution.contributeWithWalletPastSeance(this.contributionData)
            .subscribe((reponse) => {
            this.loading = false;
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG1').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.events.publish('modal-pay-seance');
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.paidWithWallet();
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    /******************************** START WALLET PAYMENT *********************************************/
    /******************************** START PAYPAL PAYMENT *********************************************/
    // update the paypal total amount
    updatePaypalAmount() {
        if (this.userPayMethodForm.value.type_payment_name === 'PAYPAL') {
            const amount = this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name) * this.contributionData.liste_part.length;
            this.userPayMethodForm.get('montantAvecFees').setValue(amount);
            if (this.contributionData.device_name !== this.userPayMethodForm.value.device_name) {
                this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.contributionData.montant).then(montantSansFees => {
                    if (montantSansFees) {
                        const amountFees = this.getAmountWithFees(montantSansFees, this.userPayMethodForm.value.device_name) * this.contributionData.liste_part.length;
                        this.userPayMethodForm.get('montantTotal').setValue(amountFees);
                        this.translate.get('PAIDMODE_MSG2').subscribe(value => {
                            this.paypalMessage = `${value} ${this.userPayMethodForm.value.montantAvecFees}
                 ${this.contributionData.device_name} =
                ${this.userPayMethodForm.value.montantTotal}
                ${this.userPayMethodForm.value.device_name}`;
                            this.setupPayPay();
                        });
                    }
                    else {
                        this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                            this.paypalMessage = value;
                        });
                    }
                });
            }
            else {
                this.userPayMethodForm.get('montantTotal').setValue(this.userPayMethodForm.value.montantAvecFees);
                this.translate.get('PAIDMODE_MSG2').subscribe(value => {
                    this.paypalMessage = `${value}  ${this.userPayMethodForm.value.montantTotal}
            ${this.userPayMethodForm.value.device_name}`;
                    this.setupPayPay();
                });
            }
        }
    }
    setupPayPay() {
        if (!this.paypal_initialized) {
            this.initPayPal();
        }
    }
    initPayPal() {
        if (this.userPayMethodForm.value.montantTotal > 0) {
            this.paypalLoading = true;
            this.paypal_initialized = true;
            let paypalbuttoncontainer = this.paypalbuttoncontainer.nativeElement;
            let _this = this;
            paypal.Button.render({
                env: 'production',
                style: {
                    size: 'responsive',
                    color: 'gold',
                    shape: 'pill',
                    label: 'checkout',
                    tagline: false
                },
                client: {
                    sandbox: 'ARIMcMamksC74CLp7Zavgn62RsKK0XDfjePxjU9gsWmcdzyI3AYz3PwADIktvUgCdhAwWCXPaBzCckOC',
                    production: 'AVdCN0ymBsPer15VtLbeNoZ3vkjkhap6vXoxwsWF3B0H4GM_mVQ5GVpJ2h4-G_AlVVIsBYWx4JpVVxLT'
                },
                // Show the buyer a 'Pay Now' button in the checkout flow
                commit: true,
                payment: function (data, actions) {
                    return actions.payment.create({
                        payment: {
                            transactions: [
                                {
                                    amount: {
                                        total: _this.userPayMethodForm.value.montantTotal,
                                        currency: _this.userPayMethodForm.value.device_name
                                    },
                                    description: 'Toupesu'
                                }
                            ]
                        }
                    });
                },
                // onAuthorize() is called when the buyer approves the payment
                onAuthorize: function (data, actions, error) {
                    if (error) {
                        _this.exitPayment();
                    }
                    if (error === 'INSTRUMENT_DECLINED') {
                        _this.exitPayment();
                    }
                    // Make a call to the REST ui to execute the payment
                    return actions.payment.execute().then(function () {
                        const params = {
                            refID: _this.reference,
                            amount: _this.userPayMethodForm.value.montantTotal,
                            moneyCode: _this.userPayMethodForm.value.device_name,
                            product: 'Toupesu',
                            paypalID: data.paymentToken.split('-')[1]
                        };
                        // Save and check the payment result
                        _this.userPayMethodForm.get('pay_token').setValue(data.paymentToken.split('-')[1]);
                        _this.api.post('livepaygateway/paypal/savePayRequest', JSON.stringify(params)).subscribe((ans) => {
                            if (ans && ans.success) {
                                _this.updateParametersPaypal(data.paymentToken.split('-')[1]);
                            }
                        }, error => {
                            _this.updateParametersPaypal(data.paymentToken.split('-')[1]);
                        });
                    });
                },
                onCancel: function (data, actions) {
                    _this.exitPayment();
                },
                onClick: (data, actions) => {
                    _this.translate.get('TOPUP_TEXT1').subscribe(value => {
                        _this.ui.presentToast(value);
                    });
                }
            }, paypalbuttoncontainer);
            setTimeout(() => {
                this.paypalLoading = false;
            }, 2000);
        }
    }
    // Update parameters PAYPAL
    updateParametersPaypal(payToken) {
        // Add the handlefees to the amount
        if (this.contributionData.device_name === this.userPayMethodForm.value.device_name) {
            const params = {
                seance_id: this.contributionData.seance_id,
                country_id: this.userPayMethodForm.value.countryId,
                typecontribution_id: this.contributionData.typecontribution_id,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                montant_d_une_part_sans_handing_fees: this.contributionData.montant,
                montant_d_une_part_avec_handling_fees: this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name),
                device_name: this.contributionData.device_name,
                sens_contribution: 'entrant',
                liste_part: this.contributionData.liste_part,
                pay_token: payToken,
                pin: this.contributionData.pin,
                operator: 'paypal'
            };
            this.makeDepositOperatorWithoutConversion(params);
        }
        else {
            this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.contributionData.montant).then(montantSansFees => {
                if (montantSansFees) {
                    const params = {
                        seance_id: this.contributionData.seance_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        typecontribution_id: this.contributionData.typecontribution_id,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        device_depart: this.userPayMethodForm.value.device_name,
                        device_arrivee: this.contributionData.device_name,
                        montant_device_depart_d_une_part_sans_handling_fees: montantSansFees ? montantSansFees : 0,
                        montant_device_depart_d_une_part_avec_handling_fees: this.getAmountWithFees(montantSansFees, this.userPayMethodForm.value.device_name),
                        montant_device_arrivee_d_une_part_sans_handling_fees: this.contributionData.montant,
                        sens_contribution: 'entrant',
                        liste_part: this.contributionData.liste_part,
                        pay_token: payToken,
                        pin: this.contributionData.pin,
                        operator: 'paypal'
                    };
                    this.makeDepositOperatorWithConversion(params);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
    }
    /******************************** END PAYPAL PAYMENT *********************************************/
    /******************************** START MTN PAYMENT *********************************************/
    // Update parameters  Mtn payment
    updateParametersMtn() {
        const amount = this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name) * this.contributionData.liste_part.length;
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (this.contributionData.device_name !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.contributionData.montant).then(montantSansFees => {
                if (montantSansFees) {
                    const params = {
                        seance_id: this.contributionData.seance_id,
                        typecontribution_id: this.contributionData.typecontribution_id,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        device_depart: this.userPayMethodForm.value.device_name,
                        device_arrivee: this.contributionData.device_name,
                        montant_device_depart_d_une_part_sans_handling_fees: montantSansFees ? montantSansFees : 0,
                        montant_device_depart_d_une_part_avec_handling_fees: this.getAmountWithFees(montantSansFees, this.userPayMethodForm.value.device_name),
                        montant_device_arrivee_d_une_part_sans_handling_fees: this.contributionData.montant,
                        sens_contribution: 'entrant',
                        numero: this.userPayMethodForm.value.country_prefix + this.userPayMethodForm.value.phone,
                        liste_part: this.contributionData.liste_part,
                        pin: this.contributionData.pin,
                        operator: 'MTN'
                    };
                    this.contributionDataParams = params;
                    const messageConfirmation = {
                        title: this.contributionData.title, contribution: this.contributionDataParams.montant_device_depart_d_une_part_avec_handling_fees * this.contributionData.liste_part.length,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const params = {
                seance_id: this.contributionData.seance_id,
                typecontribution_id: this.contributionData.typecontribution_id,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                device_name: this.contributionData.device_name,
                country_id: this.userPayMethodForm.value.countryId,
                montant_d_une_part_sans_handing_fees: this.contributionData.montant,
                montant_d_une_part_avec_handling_fees: this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name),
                sens_contribution: 'entrant',
                numero: this.userPayMethodForm.value.country_prefix + this.userPayMethodForm.value.phone,
                liste_part: this.contributionData.liste_part,
                pin: this.contributionData.pin,
                operator: 'MTN'
            };
            this.contributionDataParams = params;
            const messageConfirmation = {
                title: this.contributionData.title, contribution: this.userPayMethodForm.value.montantAvecFees,
                device_name: this.contributionData.device_name, type: 'notconverted'
            };
            this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END MTN PAYMENT *********************************************/
    /******************************** START ORANGE PAYMENT *********************************************/
    // Update parameters  Orange payment
    updateParametersOrange() {
        const amount = this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name) * this.contributionData.liste_part.length;
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (this.contributionData.device_name !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.contributionData.montant).then(montantSansFees => {
                if (montantSansFees) {
                    const params = {
                        seance_id: this.contributionData.seance_id,
                        typecontribution_id: this.contributionData.typecontribution_id,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        device_depart: this.userPayMethodForm.value.device_name,
                        device_arrivee: this.contributionData.device_name,
                        montant_device_depart_d_une_part_sans_handling_fees: montantSansFees ? montantSansFees : 0,
                        montant_device_depart_d_une_part_avec_handling_fees: this.getAmountWithFees(montantSansFees, this.userPayMethodForm.value.device_name),
                        montant_device_arrivee_d_une_part_sans_handling_fees: this.contributionData.montant,
                        montant_device_arrivee_d_une_part_avec_handling_fees: this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name),
                        sens_contribution: 'entrant',
                        numero: this.userPayMethodForm.value.country_prefix + this.userPayMethodForm.value.phone,
                        liste_part: this.contributionData.liste_part,
                        pin: this.contributionData.pin,
                        operator: 'orange'
                    };
                    this.contributionDataParams = params;
                    const messageConfirmation = {
                        title: this.contributionData.title, contribution: this.contributionDataParams.montant_device_depart_d_une_part_avec_handling_fees * this.contributionData.liste_part.length,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const params = {
                seance_id: this.contributionData.seance_id,
                typecontribution_id: this.contributionData.typecontribution_id,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                device_name: this.contributionData.device_name,
                country_id: this.userPayMethodForm.value.countryId,
                montant_d_une_part_sans_handing_fees: this.contributionData.montant,
                montant_d_une_part_avec_handling_fees: this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name),
                sens_contribution: 'entrant',
                numero: this.userPayMethodForm.value.country_prefix + this.userPayMethodForm.value.phone,
                liste_part: this.contributionData.liste_part,
                pin: this.contributionData.pin,
                operator: 'orange'
            };
            this.contributionDataParams = params;
            const messageConfirmation = {
                title: this.contributionData.title, contribution: this.userPayMethodForm.value.montantAvecFees,
                device_name: this.contributionData.device_name, type: 'notconverted'
            };
            this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END ORANGE PAYMENT *********************************************/
    /******************************** START OZOW PAYMENT *********************************************/
    // Update parameters OZOW payment
    updateParametersOzow() {
        const amount = this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name) * this.contributionData.liste_part.length;
        this.userPayMethodForm.get('montantAvecFees').setValue(amount);
        if (this.contributionData.device_name !== this.userPayMethodForm.value.device_name) {
            this.currency.convert(this.contributionData.device_name, this.userPayMethodForm.value.device_name, this.contributionData.montant).then(montantSansFees => {
                if (montantSansFees) {
                    const params = {
                        seance_id: this.contributionData.seance_id,
                        typecontribution_id: this.contributionData.typecontribution_id,
                        typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                        country_id: this.userPayMethodForm.value.countryId,
                        device_depart: this.userPayMethodForm.value.device_name,
                        device_arrivee: this.contributionData.device_name,
                        montant_device_depart_d_une_part_sans_handling_fees: montantSansFees ? montantSansFees : 0,
                        montant_device_depart_d_une_part_avec_handling_fees: this.getAmountWithFees(montantSansFees, this.userPayMethodForm.value.device_name),
                        montant_device_arrivee_d_une_part_sans_handling_fees: this.contributionData.montant,
                        sens_contribution: 'entrant',
                        numero: this.userPayMethodForm.value.country_prefix + this.userPayMethodForm.value.phone,
                        liste_part: this.contributionData.liste_part,
                        pin: this.contributionData.pin,
                        operator: 'ozow'
                    };
                    this.contributionDataParams = params;
                    const messageConfirmation = {
                        title: this.contributionData.title, contribution: this.contributionDataParams.montant_device_depart_d_une_part_avec_handling_fees * this.contributionData.liste_part.length,
                        device_name: this.userPayMethodForm.value.device_name, type: 'converted'
                    };
                    this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const params = {
                seance_id: this.contributionData.seance_id,
                typecontribution_id: this.contributionData.typecontribution_id,
                typepaiement_id: this.userPayMethodForm.value.type_payment_id,
                device_name: this.contributionData.device_name,
                country_id: this.userPayMethodForm.value.countryId,
                montant_d_une_part_sans_handing_fees: this.contributionData.montant,
                montant_d_une_part_avec_handling_fees: this.getAmountWithFees(this.contributionData.montant, this.contributionData.device_name),
                sens_contribution: 'entrant',
                numero: this.userPayMethodForm.value.country_prefix + this.userPayMethodForm.value.phone,
                liste_part: this.contributionData.liste_part,
                pin: this.contributionData.pin,
                operator: 'ozow'
            };
            this.contributionDataParams = params;
            const messageConfirmation = {
                title: this.contributionData.title, contribution: this.userPayMethodForm.value.montantAvecFees,
                device_name: this.contributionData.device_name, type: 'notconverted'
            };
            this.showConfirmationMessage(messageConfirmation, this.contributionDataParams);
        }
    }
    /******************************** END OZOW PAYMENT *********************************************/
    /******************************** START FORM COMMON PAYMENT SERVICES *********************************************/
    showConfirmationMessage(messageConfirmation, contributionDataParams) {
        const translation = [];
        this.translate.get(['CONFIRM_PAY_CONTRIBUTION_SUBTEXT1', 'CONFIRM_PAY_CONTRIBUTION_SUBTEXT2', 'CANCEL_TEXT', 'YES_TEXT']).subscribe(trans => {
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT1);
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT2);
            translation.push(trans.CANCEL_TEXT);
            translation.push(trans.YES_TEXT);
            this.paymentOperatorConfirm(messageConfirmation, contributionDataParams, translation);
        });
    }
    paymentOperatorConfirm(dataMessage, contributionDataParams, translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${dataMessage.title}`,
                message: `${translation[0]} ${dataMessage.contribution}
    ${dataMessage.device_name}  ${translation[1]}`,
                buttons: [
                    {
                        text: `${translation[2]}`,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                        }
                    }, {
                        text: `${translation[3]}`,
                        handler: () => {
                            if (dataMessage.type === 'converted') {
                                this.makeDepositOperatorWithConversion(contributionDataParams);
                            }
                            else if (dataMessage.type === 'notconverted') {
                                this.makeDepositOperatorWithoutConversion(contributionDataParams);
                            }
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
    // make deposit  with operator and conversion
    makeDepositOperatorWithConversion(data) {
        this.loading = true;
        this.showLoadingMessage(data);
        this.contribution.contributeWithOperatorWithConversionPastSeance(data)
            .subscribe((reponse) => {
            this.loading = false;
            if (reponse && reponse.message === 'success') {
                // Send the reponse per operator
                this.sendResponsePerOperator(reponse, data.operator);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.makeDepositOperatorWithConversion(data);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    // make deposit  with operator without conversion
    makeDepositOperatorWithoutConversion(data) {
        this.loading = true;
        this.showLoadingMessage(data);
        this.contribution.contributeWithOperatorWithoutConversionPastSeance(data)
            .subscribe((reponse) => {
            this.loading = false;
            if (reponse && reponse.message === 'success') {
                // Send the reponse per operator
                this.sendResponsePerOperator(reponse, data.operator);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.errorService.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.makeDepositOperatorWithoutConversion(data);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.errorService.manageError(error);
            }
        });
    }
    // =======  Payment process result ===================
    // Check the status througth operator
    checkPaymentStatus(payToken, operator) {
        this.cron = setInterval(() => {
            this.checkPaymentStatusServer(payToken, operator);
        }, 30000);
    }
    // Check the payment Status
    checkPaymentStatusServer(payToken, operator) {
        this.wallet.getStatusPaymentOperator(payToken, operator).subscribe((reponse) => {
            if (reponse && reponse.message === 'OK') {
                this.showPaymentResult();
                this.translate.get('CONFIRM_PAY_CONTRIBUTION_MSG1').subscribe(value => {
                    this.ui.presentToast(value);
                });
            }
        }, error => {
            if (error && error.error && error.error.message === 'FAIL') {
                this.exitPayment();
                this.translate.get('ERROR_PAY_CONTRIBUTION_MSG').subscribe(value => {
                    this.ui.presentToast(value);
                });
            }
            else {
                this.exitPayment();
                this.translate.get('ERROR_PAY_CONTRIBUTION_MSG').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.errorService.manageError(error);
            }
        });
    }
    // Send message per operator
    sendResponsePerOperator(data, operator) {
        this.checkPaymentStatus(data.pay_token, operator);
        const reference = data && data.refID ? data.refID : '';
        this.refernceId = reference;
        this.cancelPaymentResult(reference);
        switch (operator) {
            case 'ozow':
                window.open(data.url, '_blank');
                break;
            default:
                break;
        }
    }
    // show the loading message
    showLoadingMessage(data) {
        switch (data.operator) {
            case 'orange':
                this.translate.get('ORANGE_PAYMENT_MESSAGE').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'MTN':
                this.translate.get('MTN_PAYMENT_MESSAGE').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'paypal':
                this.translate.get('TOPUP_TEXT1').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'ozow':
                this.translate.get('TOPUP_TEXT1').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            default:
                break;
        }
    }
    // clear the time out
    clearTimeoutData() {
        if (this.timeOut) {
            clearTimeout(this.timeOut);
            this.timeOut = null;
        }
    }
    // clear the set interval
    clearSetIntervalData() {
        if (this.cron) {
            clearInterval(this.cron);
        }
        this.cron = null;
        for (let i = 0; i < 1000; i++) {
            clearInterval(i);
        }
    }
    // Show payment confirmation dialog
    showPaymentResult() {
        this.loading = false;
        this.ui.dismissLoading();
        this.initPaymentForm();
        this.clearTimeoutData();
        this.clearSetIntervalData();
        this.events.publish('modal-pay-seance');
    }
    // Cancel the payment
    cancelPaymentResult(refence) {
        this.timeOut = setTimeout(() => {
            this.exitPayment();
            this.translate.get(['TRANSACTION_CANCEL', 'TOPUP_MSG9']).subscribe(trans => {
                this.ui.presentAlert(`${trans.TRANSACTION_CANCEL}`, `${trans.TOPUP_MSG9} ${refence}`);
            });
        }, 300000);
    }
    // exit the payment directly
    exitPayment() {
        this.loading = false;
        this.ui.dismissLoading();
        this.getAllMethodPaymentType();
        this.initPaymentForm();
        this.initFormMessage();
        this.clearTimeoutData();
        this.clearSetIntervalData();
    }
    ionicViewDidLeave() {
        if (this.loading) {
            this.exitPayment();
        }
    }
    // listen to back button
    hardwareBackButton() {
        this.platform.backButton.subscribe(() => {
            const url = this.router.url;
            if (url === '/dashboard/my-tontines/' + this.tontineData.tontine.tontine_id + '/contrib-not-paid') {
                if (this.refernceId) {
                    this.cancelPaymentResult(this.refernceId);
                }
                else {
                    this.exitPayment();
                }
            }
        });
    }
};
PaidmodeSenceComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_18__["UserService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_6__["Platform"] },
    { type: _service_payment_global_data_service__WEBPACK_IMPORTED_MODULE_17__["PaymentGlobalDataService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_16__["Router"] },
    { type: _service_api_service__WEBPACK_IMPORTED_MODULE_11__["ApiService"] },
    { type: _service_currency_service__WEBPACK_IMPORTED_MODULE_12__["CurrencyService"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_19__["EventService"] },
    { type: src_app_dashboard_my_tontines_services_contribution_service__WEBPACK_IMPORTED_MODULE_10__["ContributionService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_6__["AlertController"] },
    { type: src_app_dashboard_my_wallet_service_wallet_service__WEBPACK_IMPORTED_MODULE_13__["WalletService"] },
    { type: src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_9__["TontineService"] },
    { type: _service_error_service__WEBPACK_IMPORTED_MODULE_5__["ErrorService"] },
    { type: _service_location_service__WEBPACK_IMPORTED_MODULE_7__["LocationService"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__["TranslateService"] },
    { type: _service_form_utils_service__WEBPACK_IMPORTED_MODULE_14__["FormUtilsService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] },
    { type: _service_payment_error_service__WEBPACK_IMPORTED_MODULE_15__["PaymentErrorService"] },
    { type: _service_ui_service__WEBPACK_IMPORTED_MODULE_20__["UiService"] }
];
PaidmodeSenceComponent.propDecorators = {
    amountPay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    paypalbuttoncontainer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: ['paypalbuttoncontainer', { static: false },] }]
};
PaidmodeSenceComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-paidmode-seance',
        template: _raw_loader_paidmode_seance_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_paidmode_seance_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], PaidmodeSenceComponent);



/***/ }),

/***/ "tnVG":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/bankmode-loan/bankmode-loan.component.html ***!
  \*********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<form [formGroup]=\"paymentForm\">\r\n  <ion-grid>\r\n    <ion-row>\r\n      <ion-col size=\"12\">        \r\n        <ion-card class=\"paidmode\">\r\n          <ion-card-content class=\"ion-text-center\">\r\n              <ion-row class=\"ion-padding-bottom\">\r\n                <ion-col size=\"12\">\r\n                  <ion-item>\r\n                    <ion-label position=\"floating\">{{ 'AMOUNT_PAY_TEXT' | translate }}</ion-label>\r\n                    <ion-input type=\"number\" formControlName=\"montant_total\"></ion-input>\r\n                    <span slot=\"end\" class=\"slot-prefix ion-no-margin\"> {{ paymentForm.value.currency }} </span>\r\n                  </ion-item> \r\n                  <div class=\"validation-errors\">\r\n                    <ng-container *ngFor=\"let validation of validationMessages.amount\">\r\n                      <div class=\"error-message\" *ngIf=\"amount.hasError(validation.type) && (amount.dirty || amount.touched)\">\r\n                        <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                        {{ validation.message }}\r\n                      </div>\r\n                    </ng-container>\r\n                  </div>          \r\n                </ion-col>\r\n                <ion-col size=\"12\">\r\n                  <ion-item>\r\n                    <ion-label position=\"floating\">{{ 'LEAVE_COMMENT' | translate }}</ion-label>\r\n                    <ion-textarea  type=\"text\"  formControlName=\"proofMessage\"></ion-textarea>\r\n                  </ion-item> \r\n                  <div class=\"validation-errors\">\r\n                    <ng-container *ngFor=\"let validation of validationMessages.proofMessage\">\r\n                      <div class=\"error-message\" *ngIf=\"proofMessage.hasError(validation.type) && (proofMessage.dirty || proofMessage.touched)\">\r\n                        <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                        {{ validation.message }}\r\n                      </div>\r\n                    </ng-container>\r\n                  </div>          \r\n                </ion-col>\r\n                <ion-col  *ngIf=\"paymentForm.value.receipt\" size=\"12\" class=\"ion-padding\"> \r\n                  <ion-thumbnail>\r\n                    <img src=\"{{paymentForm.value.receipt}}\">\r\n                  </ion-thumbnail>\r\n                </ion-col>\r\n                <ion-col size=\"12\" class=\"ion-padding\">\r\n                  <ion-button  color=\"primary\" size=\"medium\" class=\"ion-text-capitalize\" (click)=\"getProof()\">\r\n                    <ion-icon name=\"add\"></ion-icon>\r\n                    {{ 'PROF_PAYMENT' | translate }}\r\n                 </ion-button>\r\n                </ion-col>\r\n              </ion-row>                            \r\n          </ion-card-content>\r\n        </ion-card>\r\n      </ion-col>      \r\n    </ion-row>\r\n    <ion-row class=\"ion-justify-content-center\">\r\n      <ion-col size=\"auto\">\r\n        <ion-button expand=\"full\" [disabled]=\"paymentForm.invalid || loadingPay\"\r\n              (click)=\"paidWithBank(contributionData)\"\r\n              color=\"warning\" \r\n              class=\"ion-text-uppercase\"\r\n              shape=\"round\"\r\n              [class.ion-hide]=\"amountPay - (type !== 'interest' ? paymentForm.value.montant_total : amountPay) === 0\"\r\n              >\r\n         {{ 'SAVE_PARTIAL_PAYMENT' | translate }}\r\n        </ion-button>\r\n        <ion-button expand=\"full\" [disabled]=\"paymentForm.invalid || loadingPay\"\r\n              (click)=\"paidWithBank(contributionData)\"\r\n              color=\"warning\" \r\n              class=\"ion-text-uppercase\"\r\n              shape=\"round\"\r\n              [class.ion-hide]=\"amountPay - (type !== 'interest' ? paymentForm.value.montant_total : amountPay)  !== 0\"\r\n              >\r\n         {{ 'SUBMIT_FOR_APPROVAL' | translate }}\r\n        </ion-button>\r\n      </ion-col>\r\n      <p class=\"ion-text-center\" *ngIf=\"loadingPay\">\r\n        <ion-spinner  name=\"circles\"></ion-spinner> \r\n      </p>\r\n    </ion-row>  \r\n  </ion-grid>\r\n  </form> \r\n  ");

/***/ }),

/***/ "vXkO":
/*!***********************************************************************!*\
  !*** ./src/app/shared/paidmode-tontine/paidmode-tontine.component.ts ***!
  \***********************************************************************/
/*! exports provided: PaidmodeTontineComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaidmodeTontineComponent", function() { return PaidmodeTontineComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_paidmode_tontine_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./paidmode-tontine.component.html */ "mw90");
/* harmony import */ var _paidmode_tontine_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./paidmode-tontine.component.scss */ "Th73");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "3Pt+");
/* harmony import */ var src_app_dashboard_my_tontines_tontine_detail_wallet_services_wallet_tontine_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/dashboard/my-tontines/tontine-detail/wallet/services/wallet-tontine.service */ "0g9v");
/* harmony import */ var src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/dashboard/my-tontines/services/tontine.service */ "/WEl");
/* harmony import */ var _service_error_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../service/error.service */ "TkUd");
/* harmony import */ var _service_api_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../service/api.service */ "6rCG");
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ngx-translate/core */ "sYmb");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ionic/angular */ "TEn/");
/* harmony import */ var _service_currency_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../service/currency.service */ "GmDD");
/* harmony import */ var _service_location_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../service/location.service */ "e009");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var src_app_dashboard_my_wallet_service_wallet_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! src/app/dashboard/my-wallet/service/wallet.service */ "68js");
/* harmony import */ var _service_form_utils_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../service/form-utils.service */ "14LV");
/* harmony import */ var _service_payment_error_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../service/payment-error.service */ "FLu1");
/* harmony import */ var _service_payment_global_data_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../service/payment-global-data.service */ "T8hk");
/* harmony import */ var src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! src/app/dashboard/user/service/user.service */ "6Hie");
/* harmony import */ var _service_events_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../service/events.service */ "r5fM");
/* harmony import */ var _service_ui_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../service/ui.service */ "QB/Y");
/* harmony import */ var _service_plugin_service__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../service/plugin.service */ "NxmL");






















let PaidmodeTontineComponent = class PaidmodeTontineComponent {
    constructor(fb, walletTontine, wallet, events, platform, formUtil, paymentData, zone, tontine, router, userService, location, error, api, translate, alertController, currency, navController, paymentError, ui, plugin) {
        this.fb = fb;
        this.walletTontine = walletTontine;
        this.wallet = wallet;
        this.events = events;
        this.platform = platform;
        this.formUtil = formUtil;
        this.paymentData = paymentData;
        this.zone = zone;
        this.tontine = tontine;
        this.router = router;
        this.userService = userService;
        this.location = location;
        this.error = error;
        this.api = api;
        this.translate = translate;
        this.alertController = alertController;
        this.currency = currency;
        this.navController = navController;
        this.paymentError = paymentError;
        this.ui = ui;
        this.plugin = plugin;
        this.walletTypes = [];
        this.typesCaisses = [];
        this.currentTontine = this.tontine.getCurrentTontineData();
        this.states = [];
        this.paymentMethods = [];
        this.paypalMessage = '';
        this.loadingOperator = false;
        this.errorPhone = false;
        this.paypalLoading = false;
        this.loading = false;
        this.timeOut = null;
        this.cron = null;
        this.reference = this.formUtil.getRandomId();
        if (this.currentTontine && this.currentTontine.tontine && this.currentTontine.tontine.tontine_payment_type_id === 1) {
            this.walletTypes = ['offline', 'online'];
        }
        else {
            this.walletTypes = ['online'];
        }
        this.refernceId = '';
        this.hardwareBackButton();
    }
    ngOnInit() {
        this.getAllcashers();
        this.initPaymentForm();
        this.validationMessage();
    }
    /******************************** START FORM SERVICE *********************************************/
    // Getters
    get checkoutName() {
        return this.paymentForm.get('checkoutName');
    }
    get checkoutType() {
        return this.paymentForm.get('checkoutType');
    }
    get payementtype() {
        return this.paymentForm.get('typePaymentIndex');
    }
    get country() {
        return this.paymentForm.get('country_id');
    }
    get phone() {
        return this.paymentForm.get('phone');
    }
    get amount() {
        return this.paymentForm.get('amount');
    }
    get proof() {
        return this.paymentForm.get('proof');
    }
    // Validations message
    validationMessage() {
        this.translate.get(['M_COUNTRY_REQUIRED', 'AMOUNT_REQUIRED', 'REGISTER_PHONE_REQUIRED', 'PAID_MODE_REQUIRED',
            'CHECKOUT_TYPE_REQUIRED', 'DESTINATION_FUND_REQUIRED']).subscribe(trans => {
            this.validationMessages = {
                checkoutName: [
                    { type: 'required', message: trans.DESTINATION_FUND_REQUIRED }
                ],
                walletType: [
                    { type: 'required', message: trans.CHECKOUT_TYPE_REQUIRED }
                ],
                payementtype: [
                    { type: 'required', message: trans.PAID_MODE_REQUIRED }
                ],
                phone: [
                    { type: 'required', message: trans.REGISTER_PHONE_REQUIRED },
                ],
                amount: [
                    { type: 'required', message: trans.AMOUNT_REQUIRED }
                ],
                country_id: [
                    { type: 'required', message: trans.M_COUNTRY_REQUIRED }
                ]
            };
        });
    }
    // Init the form
    initPaymentForm() {
        this.paymentForm = this.fb.group({
            checkoutName: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required),
            checkoutType: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('online'),
            country_id: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required),
            currency_name: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required),
            country_prefix: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](''),
            handleFees: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](''),
            handleFeesType: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](''),
            currencyLabel: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](''),
            type_payment_id: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](''),
            type_payment_name: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](''),
            proof: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](''),
            reason: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](''),
            typePaymentIndex: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required),
            phone: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](''),
            amount: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].min(1), _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].pattern('^[\\d]+$')])),
            montantFees: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](''),
            montantFinal: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"](''),
            numero: new _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormControl"]('')
        });
    }
    // can get bank proof
    checkCaisse() {
        let canGet = false;
        if (this.paymentMethods && this.paymentMethods[this.paymentForm.value.typePaymentIndex] &&
            this.paymentMethods[this.paymentForm.value.typePaymentIndex].type &&
            this.paymentMethods[this.paymentForm.value.typePaymentIndex].type === 'CAISSE') {
            canGet = true;
        }
        return canGet;
    }
    // Remove space
    removeSpace() {
        this.paymentForm.get('phone').setValue(this.paymentData.removeInputSpace(this.paymentForm.value.phone));
    }
    removeSpaceAmount() {
        this.paymentForm.get('amount').setValue(parseFloat(this.paymentData.removeInputSpace(this.paymentForm.value.amount)));
    }
    // check if it is not  mobile operator
    checkMobileOperator() {
        let isMobile = false;
        if (this.paymentMethods && this.paymentMethods[this.paymentForm.value.typePaymentIndex]
            && this.paymentMethods[this.paymentForm.value.typePaymentIndex].type
            && this.paymentMethods[this.paymentForm.value.typePaymentIndex].type === 'OPERATOR'
            && this.paymentMethods[this.paymentForm.value.typePaymentIndex].name
            && (this.paymentMethods[this.paymentForm.value.typePaymentIndex].name === 'ORANGE MONEY' || this.paymentMethods[this.paymentForm.value.typePaymentIndex].name === 'MTN MOBILE MONEY')) {
            isMobile = true;
        }
        return isMobile;
    }
    // can show paypal message
    canShowPaypalMessage() {
        return this.paymentData.hasPaypalMessage(this.paypalMessage, this.paymentMethods[this.paymentForm.value.typePaymentIndex]);
    }
    // can get bank proof
    canGetProof() {
        let canGet = false;
        if (this.paymentMethods && this.paymentMethods[this.paymentForm.value.typePaymentIndex] &&
            this.paymentMethods[this.paymentForm.value.typePaymentIndex].type &&
            this.paymentMethods[this.paymentForm.value.typePaymentIndex].type === 'BANK') {
            canGet = true;
        }
        return canGet;
    }
    // can show  paypal button
    canShowPaypalButton() {
        return this.paymentData.hasPaypalButton(this.paypal_initialized, this.paymentMethods && this.paymentMethods[this.paymentForm.value.typePaymentIndex]);
    }
    // can make payment 
    canRecharge() {
        return this.paymentData.canMakeRecharge(this.paymentForm.valid, this.paymentMethods[this.paymentForm.value.typePaymentIndex], this.paymentForm.value.phone, this.errorPhone);
    }
    // Update checkout type
    updateCheckout(index) {
        if (this.typesCaisses && this.typesCaisses.length > 0 && this.typesCaisses[index]) {
            const checkOutId = this.typesCaisses[index].id;
            const currentMethods = [];
            this.allPaymentMethods.forEach(method => {
                if (method.id !== checkOutId && (method.country_id && method.country_id === this.paymentForm.value.country_id || method.type === 'CAISSE')) {
                    currentMethods.push(method);
                }
            });
            this.paymentMethods = currentMethods;
        }
    }
    // check if emial or phone is valid
    checckEmailOrPhone(inputValue, index) {
        this.removeSpace();
        this.paymentForm.get('type_payment_id').setValue(this.paymentMethods[index].id);
        switch (this.paymentMethods[index].name) {
            case 'ORANGE MONEY':
                this.errorPhone = !this.formUtil.validatePhone(inputValue);
                if (!this.errorPhone) {
                    this.paymentForm.get('numero').setValue(this.paymentForm.value.country_prefix +
                        '' + this.paymentForm.value.phone);
                }
                break;
            case 'MTN MOBILE MONEY':
                this.errorPhone = !this.formUtil.validatePhone(inputValue);
                if (!this.errorPhone) {
                    this.paymentForm.get('numero').setValue(this.paymentForm.value.country_prefix +
                        '' + this.paymentForm.value.phone);
                }
                break;
            default:
                break;
        }
    }
    // Get all the type of checkout
    getAllcashers() {
        const param = this.currentTontine.tontine.tontine_id;
        this.walletTontine.getAllCashiers(param).subscribe((reponse) => {
            if (reponse && reponse.caisses) {
                this.zone.run(() => {
                    this.typesCaisses = [];
                    let index = 0;
                    reponse.caisses.forEach(caise => {
                        this.translate.get(caise.caisse_name).subscribe(trans => {
                            this.typesCaisses.push({
                                index: index, id: caise.id, name: trans, tontine_id: caise.tontine_id, type: 'CAISSE',
                                logo: 'assets/pesuwallet.jpg', currency: this.currentTontine.tontine.monnaie, country_id: 0
                            });
                        });
                        index++;
                    });
                });
                setTimeout(() => {
                    this.paymentForm.get('checkoutName').setValue(0);
                }, 200);
                // Get the payment method
                this.getAllMethodPaymentType();
            }
        }, error => {
            this.error.manageError(error);
        });
    }
    // get all operator payments method
    getAllMethodPaymentType() {
        this.loadingOperator = true;
        this.userService.getAllMethodPaymentType().subscribe((reponse) => {
            this.loadingOperator = false;
            this.paymentMethods = [];
            if (reponse && reponse.typePayment && reponse.typePayment.length > 0) {
                this.paymentMethods = this.paymentData.formatPaymentMethodRecharge(reponse.typePayment, this.currentTontine);
            }
            const defaultCaisses = [];
            this.typesCaisses.forEach(caisse => {
                defaultCaisses.push(caisse);
            });
            if (defaultCaisses && defaultCaisses.length > 0) {
                this.paymentMethods = defaultCaisses.concat(this.paymentMethods);
            }
            if (this.currentTontine && this.currentTontine.tontine && this.currentTontine.tontine.tontine_payment_type_id === 1) {
                this.translate.get('BANK_TEXT').subscribe(trans => {
                    const defaultMethod = [{
                            id: 0, country_id: 0, logo: 'assets/wallet-icon.svg',
                            currency: this.currentTontine.tontine.monnaie, name: trans, placeholder: '',
                            handling_fees: 0,
                            type_handling_fees: 'valeur',
                            type: 'BANK'
                        }];
                    this.paymentMethods = defaultMethod.concat(this.paymentMethods);
                });
            }
            this.allPaymentMethods = this.paymentMethods;
            this.getCountries(false);
        }, error => {
            this.loadingOperator = false;
            if (this.currentTontine && this.currentTontine.tontine && this.currentTontine.tontine.tontine_payment_type_id === 1) {
                this.translate.get('BANK_TEXT').subscribe(trans => {
                    this.paymentMethods.push({
                        id: 0, country_id: 0, logo: 'assets/wallet-icon.svg',
                        currency: this.currentTontine.tontine.monnaie, name: trans, placeholder: '',
                        handling_fees: 0,
                        type_handling_fees: 'valeur',
                        type: 'BANK'
                    });
                });
            }
            this.typesCaisses.forEach(caisse => {
                this.paymentMethods.push(caisse);
            });
            this.allPaymentMethods = this.paymentMethods;
            this.getCountries(false);
            this.error.manageError(error);
        });
    }
    // Get all countries
    getCountries(refresher) {
        this.location.getAllCountries(refresher).then((countries) => {
            this.states = this.paymentData.formatCountriesData(countries);
            if (this.states && this.states.length > 0) {
                setTimeout(() => {
                    this.states.forEach(country => {
                        if (country.country_key === this.currentTontine.tontine.country_key) {
                            this.updateFormData(country);
                        }
                    });
                }, 200);
            }
        });
    }
    // Update the country info country prfix
    updateCurrencyCountry(countryId) {
        this.zone.run(() => {
            this.paymentMethods = [];
        });
        setTimeout(() => {
            this.states.forEach(state => {
                if (state.country_id === countryId) {
                    this.updateFormData(state);
                }
            });
        }, 300);
    }
    // update the form data
    updateFormData(country) {
        if (country) {
            this.paymentForm.get('country_prefix').setValue(country.country_prefixe);
            this.paymentForm.get('currency_name').setValue(country.device_name);
            this.paymentForm.get('handleFeesType').setValue(country.type_handling_fees);
            this.paymentForm.get('handleFees').setValue(country.handling_fees);
            this.paymentForm.get('currencyLabel').setValue(country.currency_label);
            this.zone.run(() => {
                this.paymentForm.get('country_id').setValue(country.country_id);
            });
            this.updatePaymentsMethods(country.country_id);
        }
    }
    // Get the countries payments methods
    updatePaymentsMethods(countryId) {
        // update the payment method
        const paymentsMethods = [];
        this.paymentMethods = [];
        this.allPaymentMethods.forEach(payment => {
            if (payment.country_id === countryId || payment.country_id === 0) {
                paymentsMethods.push(payment);
            }
        });
        this.paymentMethods = paymentsMethods;
        this.updateCheckout(this.paymentForm.value.checkoutName);
        if (this.paymentMethods && this.paymentMethods.length > 0) {
            this.updatePaymentMethod(0);
        }
    }
    // Update the payment method
    updatePaymentMethod(index) {
        if (this.paymentMethods[index]) {
            this.paymentForm.get('type_payment_id').setValue(this.paymentMethods[index].id);
            this.paymentForm.get('type_payment_name').setValue(this.paymentMethods[index].name);
            this.paymentForm.get('currency_name').setValue(this.paymentMethods[index].currency);
            this.paymentForm.get('handleFeesType').setValue(this.paymentMethods[index].type_handling_fees);
            this.paymentForm.get('handleFees').setValue(this.paymentMethods[index].handling_fees);
            this.zone.run(() => {
                this.paymentForm.get('typePaymentIndex').setValue(index);
            });
        }
        if (this.paymentMethods && this.paymentMethods[index] &&
            this.paymentMethods[index].name === 'PAYPAL') {
            this.paypal_initialized = false;
            this.updatePaypalAmount();
        }
    }
    // Get the payment proofs
    getProof() {
        this.plugin.getPicture().subscribe((picture) => {
            if (picture) {
                setTimeout(() => {
                    this.paymentForm.get('proof').setValue(picture);
                }, 200);
            }
        });
    }
    // Calucalte the payment with handlfees
    getAmountFees(amountShare, devise) {
        return this.paymentData.getHandleFeesWithDevise(amountShare, devise, this.paymentForm.value.handleFees, this.paymentForm.value.handleFeesType);
    }
    // check the operator method to call
    selectOperator(data) {
        const operator = this.paymentMethods[data.typePaymentIndex].name;
        switch (operator) {
            case 'ORANGE MONEY':
                this.updateParametersOrange();
                break;
            case 'OZOW':
                this.updateParametersOzow();
                break;
            case 'MTN MOBILE MONEY':
                this.updateParametersMtn();
                break;
            default:
                break;
        }
    }
    // Check the method to call
    showPayment(data) {
        const type = this.paymentMethods[data.typePaymentIndex].type;
        switch (type) {
            case 'BANK':
                this.showConfirmationMessageOffline('bank', data);
                break;
            case 'CAISSE':
                this.showConfirmationMessageOffline('transfert', data);
                break;
            case 'CASH':
                this.showConfirmationMessageOffline('cash', data);
                break;
            case 'OPERATOR':
                this.selectOperator(data);
                break;
            default:
                break;
        }
    }
    /******************************** END FORM SERVICE *********************************************/
    /******************************** START BANK PAYMENT *********************************************/
    // Make deposit with  traditionnal banking
    rechargeTradionnalBanking(data) {
        this.loading = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        const param = {
            tontine_id: this.currentTontine.tontine.tontine_id,
            currency_name: data.currency_name,
            montant: data.amount,
            type_caisse_tontine_id: this.typesCaisses[data.checkoutName].id,
            reason: data.reason,
            liste_proof: [
                { montant: data.amount, description: data.reason, receipt: data.proof }
            ]
        };
        this.walletTontine.makeDepositWithTraditionnalBanking(param)
            .subscribe((reponse) => {
            this.loading = false;
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                this.translate.get('DEPOSIT_DONE_MSG').subscribe(trans => {
                    this.ui.presentToast(trans);
                });
                this.events.publish('wallet-recharge');
                this.router.navigate(['dashboard', 'my-tontines', this.currentTontine.tontine.tontine_id, 'wallet']);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.error.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.rechargeTradionnalBanking(data);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOfflineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.error.manageError(error);
            }
        });
    }
    /******************************** END BANK PAYMENT *********************************************/
    /******************************** START CAISSE PAYMENT *********************************************/
    // transfert the money to another cashier
    transfertFromCaisseToCaisse(data) {
        this.loading = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        const param = {
            tontine_id: this.currentTontine.tontine.tontine_id,
            currency_name: data.currency_name,
            amount: data.amount,
            type_caisse_depart_id: this.paymentMethods[this.paymentForm.value.typePaymentIndex].id,
            type_caisse_arrivee_id: this.typesCaisses[data.checkoutName].id,
            offline: data.checkoutType === 'offline' ? 1 : 0,
            online: data.checkoutType === 'online' ? 1 : 0,
            reason: data.reason
        };
        this.walletTontine.transfertFromCashierToCashier(param)
            .subscribe((reponse) => {
            this.ui.dismissLoading();
            this.loading = false;
            if (reponse && reponse.message === 'success') {
                this.translate.get('DEPOSIT_DONE_MSG').subscribe(trans => {
                    this.ui.presentToast(trans);
                });
                this.events.publish('wallet-recharge');
                this.router.navigate(['dashboard', 'my-tontines', this.currentTontine.tontine.tontine_id, 'wallet']);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.error.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.transfertFromCaisseToCaisse(data);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOfflineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.error.manageError(error);
            }
        });
    }
    /******************************** END CAISSE PAYMENT *********************************************/
    /******************************** START CASH PAYMENT *********************************************/
    // cash paiement
    cashPayment(data) {
        const param = {
            tontine_id: this.currentTontine.tontine.tontine_id,
            currency_name: data.currency_name,
            montant: data.amount,
            type_caisse_tontine_id: this.typesCaisses[data.checkoutName].id,
            reason: '',
            liste_proof: [
                { montant: data.amount, description: '', receipt: '' }
            ]
        };
        this.loading = true;
        this.translate.get('TOPUP_TEXT1').subscribe(value => {
            this.ui.presentLoading(value);
        });
        this.walletTontine.makeDepositWithCash(param).subscribe((reponse) => {
            this.loading = false;
            this.ui.dismissLoading();
            if (reponse && reponse.message === 'success') {
                this.translate.get('DEPOSIT_DONE_MSG').subscribe(trans => {
                    this.ui.presentToast(trans);
                });
                this.events.publish('wallet-recharge');
                this.router.navigate(['dashboard', 'my-tontines', this.currentTontine.tontine.tontine_id, 'wallet']);
            }
        }, error => {
            if (error && error.error) {
                if (error.error.user_not_found) {
                    this.error.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.cashPayment(data);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOfflineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.error.manageError(error);
            }
        });
    }
    /******************************** END CASH PAYMENT *********************************************/
    // ==================== START MTM PAYMENT =========================
    updateParametersMtn() {
        const amount = this.getAmountFees(this.paymentForm.value.amount, this.currentTontine.tontine.monnaie);
        this.paymentForm.get('montantFees').setValue(amount);
        if (this.currentTontine.tontine.monnaie !== this.paymentForm.value.currency_name) {
            this.currency.convert(this.currentTontine.tontine.monnaie, this.paymentForm.value.currency_name, this.paymentForm.value.amount).then((montantSansFees) => {
                if (montantSansFees) {
                    const params = {
                        device_depart_name: this.paymentForm.value.currency_name,
                        device_arrivee_name: this.currentTontine.tontine.monnaie,
                        montant_depart_avec_handling_fees: this.getAmountFees(montantSansFees, this.paymentForm.value.currency_name),
                        montant_depart_sans_handling_fees: montantSansFees ? montantSansFees : 0,
                        montant_arrivee_avec_handling_fees: this.paymentForm.value.montantFees,
                        montant_arrivee_sans_handling_fees: this.paymentForm.value.amount,
                        typepaiement_id: this.paymentForm.value.type_payment_id,
                        numero: this.paymentForm.value.numero,
                        country_id: this.paymentForm.value.country_id,
                        tontine_id: this.currentTontine.tontine.tontine_id,
                        type_caisse_tontine_id: this.typesCaisses[this.paymentForm.value.checkoutName].id,
                        operator: 'MTN'
                    };
                    const messageConfirmation = { amount: params.montant_depart_avec_handling_fees, currency: this.paymentForm.value.currency_name, type: 'converted' };
                    this.showConfirmationMessageOperator(messageConfirmation, params);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const params = {
                tontine_id: this.currentTontine.tontine.tontine_id,
                currency_name: this.paymentForm.value.currency_name,
                type_caisse_tontine_id: this.typesCaisses[this.paymentForm.value.checkoutName].id,
                typepaiement_id: this.paymentForm.value.type_payment_id,
                country_id: this.paymentForm.value.country_id,
                montant_avec_handling_fees: this.paymentForm.value.montantFees,
                montant_sans_handling_fees: this.paymentForm.value.amount,
                numero: this.paymentForm.value.numero,
                operator: 'MTN'
            };
            const messageConfirmation = { amount: this.paymentForm.value.montantFees, currency: this.currentTontine.tontine.monnaie, type: 'notconverted' };
            this.showConfirmationMessageOperator(messageConfirmation, params);
        }
    }
    // ==================== END MTM PAYMENT =========================
    // ==================== START ORANGE PAYMENT ======================
    updateParametersOrange() {
        const amount = this.getAmountFees(this.paymentForm.value.amount, this.currentTontine.tontine.monnaie);
        this.paymentForm.get('montantFees').setValue(amount);
        if (this.currentTontine.tontine.monnaie !== this.paymentForm.value.currency_name) {
            this.currency.convert(this.currentTontine.tontine.monnaie, this.paymentForm.value.currency_name, this.paymentForm.value.amount).then((montantSansFees) => {
                if (montantSansFees) {
                    const params = {
                        device_depart_name: this.paymentForm.value.currency_name,
                        device_arrivee_name: this.currentTontine.tontine.monnaie,
                        montant_depart_avec_handling_fees: this.getAmountFees(montantSansFees, this.paymentForm.value.currency_name),
                        montant_depart_sans_handling_fees: montantSansFees ? montantSansFees : 0,
                        montant_arrivee_avec_handling_fees: this.paymentForm.value.montantFees,
                        montant_arrivee_sans_handling_fees: this.paymentForm.value.amount,
                        typepaiement_id: this.paymentForm.value.type_payment_id,
                        numero: this.paymentForm.value.numero,
                        country_id: this.paymentForm.value.country_id,
                        tontine_id: this.currentTontine.tontine.tontine_id,
                        type_caisse_tontine_id: this.typesCaisses[this.paymentForm.value.checkoutName].id,
                        operator: 'orange'
                    };
                    const messageConfirmation = { amount: params.montant_depart_avec_handling_fees, currency: this.paymentForm.value.currency_name, type: 'converted' };
                    this.showConfirmationMessageOperator(messageConfirmation, params);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const params = {
                tontine_id: this.currentTontine.tontine.tontine_id,
                currency_name: this.paymentForm.value.currency_name,
                type_caisse_tontine_id: this.typesCaisses[this.paymentForm.value.checkoutName].id,
                typepaiement_id: this.paymentForm.value.type_payment_id,
                country_id: this.paymentForm.value.country_id,
                montant_avec_handling_fees: this.paymentForm.value.montantFees,
                montant_sans_handling_fees: this.paymentForm.value.amount,
                numero: this.paymentForm.value.numero,
                operator: 'orange'
            };
            const messageConfirmation = { amount: this.paymentForm.value.montantFees, currency: this.currentTontine.tontine.monnaie, type: 'notconverted' };
            this.showConfirmationMessageOperator(messageConfirmation, params);
        }
    }
    // ==================== END ORANGE PAYMENT ======================
    // ==================== START OZOW PAYMENT  ========================
    updateParametersOzow() {
        const amount = this.getAmountFees(this.paymentForm.value.amount, this.currentTontine.tontine.monnaie);
        this.paymentForm.get('montantFees').setValue(amount);
        if (this.currentTontine.tontine.monnaie !== this.paymentForm.value.currency_name) {
            this.currency.convert(this.currentTontine.tontine.monnaie, this.paymentForm.value.currency_name, this.paymentForm.value.amount).then((montantSansFees) => {
                if (montantSansFees) {
                    const params = {
                        device_depart_name: this.paymentForm.value.currency_name,
                        device_arrivee_name: this.currentTontine.tontine.monnaie,
                        montant_depart_avec_handling_fees: this.getAmountFees(montantSansFees, this.paymentForm.value.currency_name),
                        montant_depart_sans_handling_fees: montantSansFees ? montantSansFees : 0,
                        montant_arrivee_avec_handling_fees: this.paymentForm.value.montantFees,
                        montant_arrivee_sans_handling_fees: this.paymentForm.value.amount,
                        typepaiement_id: this.paymentForm.value.type_payment_id,
                        country_id: this.paymentForm.value.country_id,
                        tontine_id: this.currentTontine.tontine.tontine_id,
                        type_caisse_tontine_id: this.typesCaisses[this.paymentForm.value.checkoutName].id,
                        operator: 'ozow'
                    };
                    const messageConfirmation = { amount: params.montant_depart_avec_handling_fees, currency: this.paymentForm.value.currency_name, type: 'converted' };
                    this.showConfirmationMessageOperator(messageConfirmation, params);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
        else {
            const params = {
                tontine_id: this.currentTontine.tontine.tontine_id,
                currency_name: this.paymentForm.value.currency_name,
                type_caisse_tontine_id: this.typesCaisses[this.paymentForm.value.checkoutName].id,
                typepaiement_id: this.paymentForm.value.type_payment_id,
                country_id: this.paymentForm.value.country_id,
                montant_avec_handling_fees: this.paymentForm.value.montantFees,
                montant_sans_handling_fees: this.paymentForm.value.amount,
                operator: 'ozow'
            };
            const messageConfirmation = { amount: this.paymentForm.value.montantFees, currency: this.currentTontine.tontine.monnaie, type: 'notconverted' };
            this.showConfirmationMessageOperator(messageConfirmation, params);
        }
    }
    // ==================== END OZOW PAYMENT  ========================================================= /
    /******************************** START PAYPAL PAYMENT *********************************************/
    // Update parameters PAYPAL
    updateParametersPaypal(payToken) {
        if (this.currentTontine.tontine.monnaie === this.paymentForm.value.currency_name) {
            const params = {
                tontine_id: this.currentTontine.tontine.tontine_id,
                currency_name: this.paymentForm.value.currency_name,
                type_caisse_tontine_id: this.typesCaisses[this.paymentForm.value.checkoutName].id,
                typepaiement_id: this.paymentForm.value.type_payment_id,
                country_id: this.paymentForm.value.country_id,
                montant_avec_handling_fees: this.paymentForm.value.montantFees,
                montant_sans_handling_fees: this.paymentForm.value.amount,
                pay_token: payToken,
                operator: 'paypal'
            };
            this.makeDepositOperatorWithoutConversion(params);
        }
        else {
            this.currency.convert(this.currentTontine.tontine.monnaie, this.paymentForm.value.currency_name, this.paymentForm.value.amount).then(montantSansFees => {
                if (montantSansFees) {
                    const params = {
                        device_depart_name: this.paymentForm.value.currency_name,
                        device_arrivee_name: this.currentTontine.tontine.monnaie,
                        montant_depart_avec_handling_fees: this.getAmountFees(montantSansFees, this.paymentForm.value.currency_name),
                        montant_depart_sans_handling_fees: montantSansFees ? montantSansFees : 0,
                        montant_arrivee_avec_handling_fees: this.paymentForm.value.montantFees,
                        montant_arrivee_sans_handling_fees: this.paymentForm.value.amount,
                        typepaiement_id: this.paymentForm.value.type_payment_id,
                        country_id: this.paymentForm.value.country_id,
                        tontine_id: this.currentTontine.tontine.tontine_id,
                        type_caisse_tontine_id: this.typesCaisses[this.paymentForm.value.checkoutName].id,
                        pay_token: payToken,
                        operator: 'paypal'
                    };
                    this.makeDepositOperatorWithConversion(params);
                }
                else {
                    this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(value => {
                        this.ui.presentToast(value);
                    });
                }
            });
        }
    }
    updatePaypalAmount() {
        if (this.paymentForm.value.amount) {
            if (this.paymentForm.value.type_payment_name === 'PAYPAL') {
                const amount = this.getAmountFees(this.paymentForm.value.amount, this.currentTontine.tontine.monnaie);
                this.paymentForm.get('montantFees').setValue(amount);
                if (this.currentTontine.tontine.monnaie !== this.paymentForm.value.currency_name) {
                    this.currency.convert(this.currentTontine.tontine.monnaie, this.paymentForm.value.currency_name, this.paymentForm.value.amount).then(montantSansFees => {
                        if (montantSansFees) {
                            const amountFees = this.getAmountFees(montantSansFees, this.paymentForm.value.currency_name);
                            this.paymentForm.get('montantFinal').setValue(amountFees);
                            this.translate.get('PAIDMODE_MSG2').subscribe(trans => {
                                this.paypalMessage = `${trans} ${this.paymentForm.value.montantFees}
               ${this.currentTontine.tontine.monnaie} =
              ${this.paymentForm.value.montantFinal}
              ${this.paymentForm.value.currency_name}`;
                                this.setupPayPay();
                            });
                        }
                        else {
                            this.translate.get('CURRENCY_CONVERT_ERROR').subscribe(trans => {
                                this.paypalMessage = trans;
                            });
                        }
                    });
                }
                else {
                    this.paymentForm.get('montantFinal').setValue(this.paymentForm.value.montantFees);
                    this.translate.get('PAIDMODE_MSG2').subscribe(trans => {
                        this.paypalMessage = `${trans}  ${this.paymentForm.value.montantFinal}
          ${this.paymentForm.value.currency_name}`;
                        this.setupPayPay();
                    });
                }
            }
        }
    }
    initPayPal() {
        if (this.paymentForm.value.montantFinal > 0) {
            this.paypalLoading = true;
            this.paypal_initialized = true;
            let paypalbuttoncontainer = this.paypalbuttoncontainer.nativeElement;
            let _this = this;
            paypal.Button.render({
                env: 'production',
                style: {
                    size: 'responsive',
                    color: 'gold',
                    shape: 'pill',
                    label: 'checkout',
                    tagline: false
                },
                client: {
                    sandbox: 'ARIMcMamksC74CLp7Zavgn62RsKK0XDfjePxjU9gsWmcdzyI3AYz3PwADIktvUgCdhAwWCXPaBzCckOC',
                    production: 'AVdCN0ymBsPer15VtLbeNoZ3vkjkhap6vXoxwsWF3B0H4GM_mVQ5GVpJ2h4-G_AlVVIsBYWx4JpVVxLT'
                },
                // Show the buyer a 'Pay Now' button in the checkout flow
                commit: true,
                payment: function (data, actions) {
                    return actions.payment.create({
                        payment: {
                            transactions: [
                                {
                                    amount: {
                                        total: _this.paymentForm.value.montantFinal,
                                        currency: _this.paymentForm.value.currency_name
                                    },
                                    description: 'Toupesu'
                                }
                            ]
                        }
                    });
                },
                // onAuthorize() is called when the buyer approves the payment
                onAuthorize: function (data, actions, error) {
                    if (error) {
                        _this.exitPayment();
                    }
                    if (error === 'INSTRUMENT_DECLINED') {
                        _this.exitPayment();
                    }
                    // Make a call to the REST ui to execute the payment
                    return actions.payment.execute().then(function () {
                        const params = {
                            refID: _this.reference,
                            amount: _this.paymentForm.value.montantFinal,
                            moneyCode: _this.paymentForm.value.currency_name,
                            product: 'Toupesu',
                            paypalID: data.paymentToken.split('-')[1]
                        };
                        // Save and check the payment result
                        _this.api.post('livepaygateway/paypal/savePayRequest', JSON.stringify(params)).subscribe((ans) => {
                            if (ans && ans.success) {
                                _this.updateParametersPaypal(data.paymentToken.split('-')[1]);
                            }
                        }, error => {
                            _this.updateParametersPaypal(data.paymentToken.split('-')[1]);
                        });
                    });
                },
                onCancel: function (data, actions) {
                    _this.exitPayment();
                },
                onClick: (data, actions) => {
                    _this.translate.get('TOPUP_TEXT1').subscribe(value => {
                        _this.ui.presentToast(value);
                    });
                }
            }, paypalbuttoncontainer);
            setTimeout(() => {
                this.paypalLoading = false;
            }, 2000);
        }
    }
    // Setup the paypal payment 
    setupPayPay() {
        if (!this.paypal_initialized) {
            this.initPayPal();
        }
    }
    /******************************** END PAYPAL PAYMENT *********************************************/
    /******************************** START PAYMENT SERVICES *********************************************/
    // Show confirmation message operator
    showConfirmationMessageOperator(messageData, params) {
        this.translate.get(['DEPOSIT_TITLE', 'PAIDMODE_MSG2', 'CONFIRM_PAY_CONTRIBUTION_SUBTEXT2', 'CANCEL_TEXT', 'YES_TEXT']).subscribe(trans => {
            const translation = [];
            translation.push(trans.PAIDMODE_MSG2);
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT2);
            translation.push(trans.CANCEL_TEXT);
            translation.push(trans.YES_TEXT);
            const messageConfirmation = {
                title: trans.DEPOSIT_TITLE, contribution: messageData.amount,
                device_name: messageData.currency, type: messageData.type
            };
            this.paymentConfirm(messageConfirmation, params, translation);
        });
    }
    // Show confirmation message offline method
    showConfirmationMessageOffline(type, data) {
        const translation = [];
        this.translate.get(['DEPOSIT_TITLE', 'PAIDMODE_MSG2', 'CONFIRM_PAY_CONTRIBUTION_SUBTEXT2', 'CANCEL_TEXT', 'YES_TEXT']).subscribe(trans => {
            const messageConfirmation = {
                title: trans.DEPOSIT_TITLE, contribution: data.amount,
                device_name: data.currency_name, type: type
            };
            translation.push(trans.PAIDMODE_MSG2);
            translation.push(trans.CONFIRM_PAY_CONTRIBUTION_SUBTEXT2);
            translation.push(trans.CANCEL_TEXT);
            translation.push(trans.YES_TEXT);
            this.paymentConfirm(messageConfirmation, data, translation);
        });
    }
    paymentConfirm(dataMessage, contributionDataParams, translation) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const alert = yield this.alertController.create({
                header: `${dataMessage.title}`,
                message: `${translation[0]} ${dataMessage.contribution}
    ${dataMessage.device_name} ${translation[1]} `,
                buttons: [
                    {
                        text: `${translation[2]} `,
                        role: 'cancel',
                        cssClass: 'secondary',
                        handler: () => {
                        }
                    }, {
                        text: `${translation[3]}`,
                        handler: () => {
                            if (dataMessage.type === 'converted') {
                                this.makeDepositOperatorWithConversion(contributionDataParams);
                            }
                            else if (dataMessage.type === 'notconverted') {
                                this.makeDepositOperatorWithoutConversion(contributionDataParams);
                            }
                            else if (dataMessage.type === 'transfert') {
                                this.transfertFromCaisseToCaisse(contributionDataParams);
                            }
                            else if (dataMessage.type === 'bank') {
                                this.rechargeTradionnalBanking(contributionDataParams);
                            }
                            else if (dataMessage.type === 'cash') {
                                this.cashPayment(contributionDataParams);
                            }
                        }
                    }
                ]
            });
            yield alert.present();
        });
    }
    // make deposit  with operator and conversion
    makeDepositOperatorWithConversion(data) {
        this.loading = true;
        this.showLoadingMessage(data);
        this.walletTontine.makeDepositWithMobileMoneyWithConversion(data)
            .subscribe((reponse) => {
            this.loading = false;
            if (reponse && reponse.message === 'success') {
                // Send the reponse per operator
                this.sendResponsePerOperator(reponse, data.operator);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.error.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.makeDepositOperatorWithConversion(data);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.error.manageError(error);
            }
        });
    }
    // make deposit  with operator without conversion
    makeDepositOperatorWithoutConversion(data) {
        this.loading = true;
        this.showLoadingMessage(data);
        this.walletTontine.makeDepositWithMobileMoneyWithoutConversion(data)
            .subscribe((reponse) => {
            this.loading = false;
            if (reponse && reponse.message === 'success') {
                // Send the reponse per operator
                this.sendResponsePerOperator(reponse, data.operator);
            }
        }, error => {
            if (error && error.error && error.error.message === 'error') {
                if (error.error.user_not_found) {
                    this.error.renewSession().then((data) => {
                        if (data && data.result === "OK") {
                            this.ui.dismissLoading();
                            this.makeDepositOperatorWithoutConversion(data);
                        }
                        else {
                            this.exitPayment();
                        }
                    });
                }
                else {
                    this.loading = false;
                    this.ui.dismissLoading();
                    this.paymentError.managePaymentOnlineError(error);
                }
            }
            else {
                this.loading = false;
                this.ui.dismissLoading();
                this.error.manageError(error);
            }
        });
    }
    // Send message per operator
    sendResponsePerOperator(data, operator) {
        this.checkPaymentStatus(data.pay_token, operator);
        const reference = data && data.refID ? data.refID : '';
        this.refernceId = reference;
        this.cancelPaymentResult(reference);
        switch (operator) {
            case 'ozow':
                window.open(data.url, '_blank');
                break;
            default:
                break;
        }
    }
    // show the loading message
    showLoadingMessage(data) {
        switch (data.operator) {
            case 'orange':
                this.translate.get('ORANGE_PAYMENT_MESSAGE').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'MTN':
                this.translate.get('MTN_PAYMENT_MESSAGE').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'paypal':
                this.translate.get('TOPUP_TEXT1').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            case 'ozow':
                this.translate.get('TOPUP_TEXT1').subscribe(value => {
                    this.ui.presentLoading(value);
                });
                break;
            default:
                break;
        }
    }
    // Check the status througth operator
    checkPaymentStatus(payToken, operator) {
        this.cron = setInterval(() => {
            this.checkPaymentStatusServer(payToken, operator);
        }, 30000);
    }
    // Check the payment Status
    checkPaymentStatusServer(payToken, operator) {
        this.wallet.getStatusPaymentOperator(payToken, operator).subscribe((reponse) => {
            if (reponse && reponse.message === 'OK') {
                this.showPaymentResult();
                this.translate.get('DEPOSIT_DONE_MSG').subscribe(value => {
                    this.ui.presentToast(value);
                });
            }
        }, error => {
            if (error && error.error && error.error.message === 'FAIL') {
                this.exitPayment();
                this.translate.get('ERROR_PAY_CONTRIBUTION_MSG').subscribe(value => {
                    this.ui.presentToast(value);
                });
            }
            else {
                this.exitPayment();
                this.translate.get('ERROR_PAY_CONTRIBUTION_MSG').subscribe(value => {
                    this.ui.presentToast(value);
                });
                this.error.manageError(error);
            }
        });
    }
    // clear the time out
    clearTimeoutData() {
        if (this.timeOut) {
            clearTimeout(this.timeOut);
            this.timeOut = null;
        }
    }
    // clear the set interval
    clearSetIntervalData() {
        if (this.cron) {
            clearInterval(this.cron);
        }
        this.cron = null;
        for (let i = 0; i < 1000; i++) {
            clearInterval(i);
        }
    }
    // Show payment result
    showPaymentResult() {
        this.loading = false;
        this.ui.dismissLoading();
        this.getAllcashers();
        this.initPaymentForm();
        this.validationMessage();
        this.clearTimeoutData();
        this.clearSetIntervalData();
        this.navController.setDirection('root');
        this.events.publish('wallet-recharge');
        this.router.navigate(['dashboard', 'my-tontines', this.currentTontine.tontine.tontine_id, 'wallet']);
    }
    // Cancel the payment
    cancelPaymentResult(refence) {
        this.timeOut = setTimeout(() => {
            this.exitPayment();
            this.translate.get(['TRANSACTION_CANCEL', 'TOPUP_MSG9']).subscribe(trans => {
                this.ui.presentAlert(`${trans.TRANSACTION_CANCEL}`, `${trans.TOPUP_MSG9} ${refence}`);
            });
        }, 300000);
    }
    // exit the payment directly
    exitPayment() {
        this.loading = false;
        this.ui.dismissLoading();
        this.getAllcashers();
        this.initPaymentForm();
        this.validationMessage();
        this.clearTimeoutData();
        this.clearSetIntervalData();
    }
    // Leave the page
    ionicViewDidLeave() {
        if (this.loading) {
            this.exitPayment();
        }
    }
    // listen to back button
    hardwareBackButton() {
        this.platform.backButton.subscribe(() => {
            const url = this.router.url;
            if (url === '/dashboard/my-tontines/' + this.currentTontine.tontine.tontine_id + '/wallet/top-up') {
                if (this.refernceId) {
                    this.cancelPaymentResult(this.refernceId);
                }
                else {
                    this.exitPayment();
                }
            }
        });
    }
};
PaidmodeTontineComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"] },
    { type: src_app_dashboard_my_tontines_tontine_detail_wallet_services_wallet_tontine_service__WEBPACK_IMPORTED_MODULE_5__["WalletTontineService"] },
    { type: src_app_dashboard_my_wallet_service_wallet_service__WEBPACK_IMPORTED_MODULE_14__["WalletService"] },
    { type: _service_events_service__WEBPACK_IMPORTED_MODULE_19__["EventService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_10__["Platform"] },
    { type: _service_form_utils_service__WEBPACK_IMPORTED_MODULE_15__["FormUtilsService"] },
    { type: _service_payment_global_data_service__WEBPACK_IMPORTED_MODULE_17__["PaymentGlobalDataService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"] },
    { type: src_app_dashboard_my_tontines_services_tontine_service__WEBPACK_IMPORTED_MODULE_6__["TontineService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_13__["Router"] },
    { type: src_app_dashboard_user_service_user_service__WEBPACK_IMPORTED_MODULE_18__["UserService"] },
    { type: _service_location_service__WEBPACK_IMPORTED_MODULE_12__["LocationService"] },
    { type: _service_error_service__WEBPACK_IMPORTED_MODULE_7__["ErrorService"] },
    { type: _service_api_service__WEBPACK_IMPORTED_MODULE_8__["ApiService"] },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_9__["TranslateService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_10__["AlertController"] },
    { type: _service_currency_service__WEBPACK_IMPORTED_MODULE_11__["CurrencyService"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_10__["NavController"] },
    { type: _service_payment_error_service__WEBPACK_IMPORTED_MODULE_16__["PaymentErrorService"] },
    { type: _service_ui_service__WEBPACK_IMPORTED_MODULE_20__["UiService"] },
    { type: _service_plugin_service__WEBPACK_IMPORTED_MODULE_21__["PluginService"] }
];
PaidmodeTontineComponent.propDecorators = {
    amountPay: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    balance: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }],
    paypalbuttoncontainer: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: ['paypalbuttoncontainer', { static: false },] }]
};
PaidmodeTontineComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-paidmode-tontine',
        template: _raw_loader_paidmode_tontine_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_paidmode_tontine_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], PaidmodeTontineComponent);



/***/ }),

/***/ "vY5A":
/*!***************************************!*\
  !*** ./src/app/app-routing.module.ts ***!
  \***************************************/
/*! exports provided: AppRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppRoutingModule", function() { return AppRoutingModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "tyNb");
/* harmony import */ var _auth_auth_guard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./auth/auth.guard */ "P+IX");




const routes = [
    { path: '', redirectTo: 'dashboard', pathMatch: 'full' },
    { path: 'auth', loadChildren: () => __webpack_require__.e(/*! import() | auth-auth-module */ "auth-auth-module").then(__webpack_require__.bind(null, /*! ./auth/auth.module */ "Yj9t")).then(m => m.AuthPageModule) },
    { path: 'dashboard', loadChildren: () => __webpack_require__.e(/*! import() | dashboard-dashboard-module */ "dashboard-dashboard-module").then(__webpack_require__.bind(null, /*! ./dashboard/dashboard.module */ "TDBs")).then(m => m.DashboardPageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_3__["AuthGuard"]] }
];
let AppRoutingModule = class AppRoutingModule {
};
AppRoutingModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forRoot(routes, { preloadingStrategy: _angular_router__WEBPACK_IMPORTED_MODULE_2__["PreloadAllModules"] })
        ],
        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]]
    })
], AppRoutingModule);



/***/ }),

/***/ "vfiw":
/*!*******************************************************************!*\
  !*** ./src/app/shared/paidmode-loan/paidmode-loan.component.scss ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwYWlkbW9kZS1sb2FuLmNvbXBvbmVudC5zY3NzIn0= */");

/***/ }),

/***/ "w2ex":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/initiate-pay/initiate-pay.component.html ***!
  \*******************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header>\r\n  <ion-toolbar>\r\n    <ion-title class=\"ion-text-center\">{{type ==='new' ? ('NEW_PAYMENT' | translate) : ('INITIATE_PAIEMENT' | translate)\r\n      }}</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"initiate-pay\">\r\n  <p class=\"ion-text-center\" *ngIf=\"loading\">\r\n    <ion-spinner name=\"circles\"></ion-spinner>\r\n  </p>\r\n  <ion-grid>\r\n    <form [formGroup]=\"formPayment\">\r\n      <ion-row *ngIf=\"type ==='new'\">\r\n        <ion-col>\r\n          <h4><small>{{ 'INIT_PAY_TEXT_1' | translate }} {{(currentPaymentData.argent_a_bouffer_avant_toute_coupure |\r\n              commadumper)}} {{currentPaymentData.device_name}} {{ 'INIT_PAY_TEXT_2' | translate }}.</small></h4>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row  *ngIf=\"listCaisse && listCaisse.length > 0\">\r\n        <ion-col>\r\n          <ion-item>\r\n            <ion-label position=\"floating\">{{'REASON_TEXT' | translate}}</ion-label>\r\n            <ion-textarea placeholder=\"{{ 'ENTER_TEXT' | translate }}\" formControlName=\"reason\"></ion-textarea>\r\n          </ion-item>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row *ngIf=\"listCaisse && listCaisse.length > 0\">\r\n        <ion-col>\r\n          <ion-item>\r\n            <ion-label position=\"floating\">{{'CHECKOUT_SELECT_MSG' | translate}}</ion-label>\r\n            <ion-select formControlName=\"chechoutList\" (ionChange)=\"updateChoice(formPayment.value.chechoutList)\"\r\n              multiple=\"true\" placeholder=\"\">\r\n              <ion-select-option *ngFor=\"let chechoutItem of listCaisse\" [value]=\"chechoutItem.choice_name\">\r\n                {{(chechoutItem.type_caisse_tontine_name | translate)}}</ion-select-option>\r\n            </ion-select>\r\n          </ion-item>\r\n          <div class=\"validation-errors\">\r\n            <ng-container *ngFor=\"let validation of validationMessages.chechoutList\">\r\n              <div class=\"error-message\"\r\n                *ngIf=\"chechoutList.hasError(validation.type) && (chechoutList.dirty || chechoutList.touched)\">\r\n                <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n                {{ validation.message }}\r\n              </div>\r\n            </ng-container>\r\n          </div>\r\n        </ion-col>\r\n      </ion-row>\r\n    </form>\r\n    <ion-row *ngFor=\"let chechoutItem of listCaisse; let i = index\">\r\n      <ion-col *ngIf=\"chechoutItem.choice\">\r\n        <ion-row class=\"ion-align-items-center checkout-list\">\r\n          <ion-col size=\"4\">\r\n            <h6>\r\n              <ion-text color=\"primary\">{{(chechoutItem.type_caisse_tontine_name | translate)}}\r\n                ({{chechoutItem.currency_name}})</ion-text>\r\n            </h6>\r\n          </ion-col>\r\n          <ion-col size=\"8\">\r\n            <ion-row>\r\n              <ion-col *ngIf=\"chechoutItem.current_montant_online > 0\">\r\n                <ion-text color=\"primary\">{{ 'ONLINE_TEXT' | translate }}: {{chechoutItem.current_montant_online -\r\n                  listCaisse[i].montant_online }}</ion-text>\r\n                <ion-item>\r\n                  <ion-input type=\"number\"\r\n                    (ionChange)=\"validateAmount(chechoutItem.current_montant_online, listCaisse[i].montant_online, i, 'online'); updateChoice(formPayment.value.chechoutList)\"\r\n                    [(ngModel)]=\"listCaisse[i].montant_online\" [ngModelOptions]=\"{standalone: true}\"></ion-input>\r\n                </ion-item>\r\n              </ion-col>\r\n            </ion-row>\r\n            <ion-row>\r\n              <ion-col *ngIf=\"chechoutItem.current_montant_offline > 0\">\r\n                <ion-text color=\"primary\">{{ 'OFFLINE_TEXT' | translate }}: {{ chechoutItem.current_montant_offline -\r\n                  listCaisse[i].montant_offline}}</ion-text>\r\n                <ion-item>\r\n                  <ion-input type=\"number\"\r\n                    (ionChange)=\"validateAmount(chechoutItem.current_montant_offline, listCaisse[i].montant_offline, i, 'offline'); updateChoice(formPayment.value.chechoutList)\"\r\n                    (ionChange)=\"validateAmount()\" [(ngModel)]=\"listCaisse[i].montant_offline\"\r\n                    [ngModelOptions]=\"{standalone: true}\"></ion-input>\r\n                </ion-item>\r\n              </ion-col>\r\n            </ion-row>\r\n          </ion-col>\r\n        </ion-row>\r\n\r\n        <div class=\"validation-errors\" *ngIf=\"listCaisse[i].online_error\">\r\n          <div class=\"error-message\">\r\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n            <span>{{(chechoutItem.type_caisse_tontine_name | translate)}} {{ 'ONLINE_TEXT' | translate }}\r\n              {{ 'INITIATE_ERROR_MSG' | translate }} {{chechoutItem.current_montant_online}}\r\n              {{chechoutItem.currency_name}} </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"validation-errors\" *ngIf=\"listCaisse[i].offline_error\">\r\n          <div class=\"error-message\">\r\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n            <span>{{(chechoutItem.type_caisse_tontine_name | translate)}} {{ 'OFFLINE_TEXT' | translate }}\r\n              {{ 'INITIATE_ERROR_MSG' | translate }} {{ chechoutItem.current_montant_offline}}\r\n              {{chechoutItem.currency_name}} </span>\r\n          </div>\r\n        </div>\r\n      </ion-col>\r\n    </ion-row>\r\n\r\n    <ion-row *ngIf=\"formPayment.valid && currentPaymentData.somme !== totalAmount\">\r\n      <div class=\"validation-errors\">\r\n        <div class=\"error-message\">\r\n          <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n          {{ 'BOUFFE_AMOUNT_ERROR' | translate }} {{currentPaymentData.somme}} {{currentPaymentData.device_name}}\r\n        </div>\r\n      </div>\r\n    </ion-row>\r\n\r\n    <ion-row *ngIf=\"currentPaymentData.somme > 0 && !loading && listCaisse && listCaisse.length > 0\">\r\n      <ion-col>\r\n        <p>\r\n          <ion-text class=\"ion-float-right\" color=\"danger\"><strong>{{ 'TOTAL_TEXT' | translate }} <sup>*</sup>:\r\n              {{currentPaymentData.somme}} {{currentPaymentData.device_name}}</strong></ion-text>\r\n        </p>\r\n      </ion-col>\r\n    </ion-row>\r\n\r\n    <ion-row *ngIf=\"!loading && listCaisse && listCaisse.length > 0\">\r\n      <ion-col>\r\n        <ion-button expand=\"full\" [disabled]=\"hasError() || formPayment.invalid  \r\n            || (currentPaymentData.somme !== totalAmount) || totalAmount === 0\" color=\"warning\"\r\n          class=\"ion-text-uppercase\" shape=\"round\" (click)=\"iniatePayment()\">\r\n          {{ 'SUBMIT_TEXT' | translate }}\r\n        </ion-button>\r\n      </ion-col>\r\n    </ion-row>\r\n  </ion-grid>\r\n\r\n  \r\n  <ion-row *ngIf=\"!loading && listCaisse && listCaisse.length === 0\">\r\n    <ion-col>\r\n      <p class=\"ion-text-center\">\r\n          {{ 'RECHARGE_CAISSE_MSG' | translate }}\r\n      </p>\r\n    </ion-col>\r\n  </ion-row>\r\n\r\n</ion-content>\r\n\r\n<ion-footer class=\"ion-padding ion-text-center\">\r\n  <ion-grid>\r\n    <ion-row>\r\n      <ion-col>\r\n        <ion-button expand=\"full\" fill=\"outline\" color=\"warning\" class=\"ion-text-uppercase\" shape=\"round\"\r\n          (click)=\"closeContribute()\">\r\n          {{ 'CANCEL_TEXT' | translate }}\r\n        </ion-button>\r\n      </ion-col>\r\n    </ion-row>\r\n  </ion-grid>\r\n</ion-footer>");

/***/ }),

/***/ "xGVp":
/*!***********************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/shared/bankmode/bankmode.component.html ***!
  \***********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<form [formGroup]=\"paymentForm\">\r\n  <ion-grid>\r\n    <ion-row>\r\n      <ion-col size=\"12\">        \r\n        <ion-card class=\"paidmode\">\r\n          <ion-card-content class=\"ion-text-center\">\r\n              <ion-row class=\"ion-padding-bottom\">\r\n                <ion-col size=\"12\">\r\n                  <ion-item>\r\n                    <ion-label position=\"floating\">{{ 'AMOUNT_PAY_TEXT' | translate }}</ion-label>\r\n                    <ion-input type=\"number\" formControlName=\"amount\"></ion-input>\r\n                    <span slot=\"end\" class=\"slot-prefix ion-no-margin\"> {{ paymentForm.value.currency }} </span>\r\n                  </ion-item> \r\n                  <div class=\"validation-errors\">\r\n                    <ng-container *ngFor=\"let validation of validationMessages.amount\">\r\n                      <div class=\"error-message\" *ngIf=\"amount.hasError(validation.type) && (amount.dirty || amount.touched)\">\r\n                        <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                        {{ validation.message }}\r\n                      </div>\r\n                    </ng-container>\r\n                  </div>          \r\n                </ion-col>\r\n                <ion-col size=\"12\">\r\n                  <ion-item>\r\n                    <ion-label position=\"floating\">{{ 'LEAVE_COMMENT' | translate }}</ion-label>\r\n                    <ion-textarea  type=\"text\"  formControlName=\"proofMessage\"></ion-textarea>\r\n                  </ion-item> \r\n                  <div class=\"validation-errors\">\r\n                    <ng-container *ngFor=\"let validation of validationMessages.proofMessage\">\r\n                      <div class=\"error-message\" *ngIf=\"proofMessage.hasError(validation.type) && (proofMessage.dirty || proofMessage.touched)\">\r\n                        <ion-icon name=\"information-circle-outline\" ></ion-icon>\r\n                        {{ validation.message }}\r\n                      </div>\r\n                    </ng-container>\r\n                  </div>          \r\n                </ion-col>\r\n                <ion-col  *ngIf=\"paymentForm.value.receipt\" size=\"12\" class=\"ion-padding\"> \r\n                  <ion-thumbnail>\r\n                    <img src=\"{{paymentForm.value.receipt}}\">\r\n                  </ion-thumbnail>\r\n                </ion-col>\r\n                <ion-col size=\"12\" class=\"ion-padding\">\r\n                  <ion-button  color=\"primary\" size=\"medium\" class=\"ion-text-capitalize\" (click)=\"getProof()\">\r\n                    <ion-icon name=\"add\"></ion-icon>\r\n                    {{ 'PROF_PAYMENT' | translate }}\r\n                 </ion-button>\r\n                </ion-col>\r\n              </ion-row>                            \r\n          </ion-card-content>\r\n        </ion-card>\r\n      </ion-col>      \r\n    </ion-row>\r\n    <ion-row class=\"ion-justify-content-center\">\r\n      <ion-col size=\"auto\">\r\n        <ion-button expand=\"full\" [disabled]=\"paymentForm.invalid || loadingPay\"\r\n              (click)=\"makePayment()\"\r\n              color=\"warning\" \r\n              class=\"ion-text-uppercase\"\r\n              shape=\"round\"\r\n              [class.ion-hide]=\"balance - paymentForm.value.amount === 0\"\r\n              >\r\n         {{ 'SAVE_PARTIAL_PAYMENT' | translate }}\r\n        </ion-button>\r\n        <ion-button expand=\"full\" [disabled]=\"paymentForm.invalid || loadingPay\"\r\n              (click)=\"makePayment()\"\r\n              color=\"warning\" \r\n              class=\"ion-text-uppercase\"\r\n              shape=\"round\"\r\n              [class.ion-hide]=\"balance - paymentForm.value.amount  !== 0\"\r\n              >\r\n         {{ 'SUBMIT_FOR_APPROVAL' | translate }}\r\n        </ion-button>\r\n      </ion-col>\r\n      <p class=\"ion-text-center\" *ngIf=\"loadingPay\">\r\n        <ion-spinner  name=\"circles\"></ion-spinner> \r\n      </p>\r\n    </ion-row>  \r\n  </ion-grid>\r\n  </form> \r\n  ");

/***/ }),

/***/ "xVFS":
/*!***********************************************************!*\
  !*** ./src/app/shared/view-proof/view-proof.component.ts ***!
  \***********************************************************/
/*! exports provided: ViewProofComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewProofComponent", function() { return ViewProofComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_view_proof_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./view-proof.component.html */ "RMs+");
/* harmony import */ var _view_proof_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./view-proof.component.scss */ "m9Q8");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ "TEn/");





let ViewProofComponent = class ViewProofComponent {
    constructor(modatCtrl) {
        this.modatCtrl = modatCtrl;
    }
    ngOnInit() {
    }
    closeContribute() {
        this.modatCtrl.dismiss(null, 'cancel');
    }
};
ViewProofComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["ModalController"] }
];
ViewProofComponent.propDecorators = {
    proof: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"] }]
};
ViewProofComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'app-view-proof',
        template: _raw_loader_view_proof_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_view_proof_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    })
], ViewProofComponent);



/***/ }),

/***/ "y7ii":
/*!*********************************************************!*\
  !*** ./src/app/shared/service/local-storage.service.ts ***!
  \*********************************************************/
/*! exports provided: LocalStorageService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocalStorageService", function() { return LocalStorageService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "fXoL");


const APP_PREFIX = 'TOUPESU-V1-';
let LocalStorageService = class LocalStorageService {
    constructor() { }
    setItem(key, value) {
        localStorage.setItem(`${APP_PREFIX}${key}`, JSON.stringify(value));
    }
    getItem(key) {
        const data = localStorage.getItem(`${APP_PREFIX}${key}`);
        return data ? JSON.parse(data) : null;
    }
    removeItem(key) {
        localStorage.removeItem(`${APP_PREFIX}${key}`);
    }
    // get item secure
    getItemSecure(key) {
        const data = localStorage.getItem(`${APP_PREFIX}${key}`);
        return data && atob(data) ? JSON.parse(atob(data)) : null;
    }
    // Set item secure
    setItemSecure(key, value) {
        localStorage.setItem(`${APP_PREFIX}${key}`, btoa(JSON.stringify(value)));
    }
};
LocalStorageService.ctorParameters = () => [];
LocalStorageService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], LocalStorageService);



/***/ }),

/***/ "ynWL":
/*!************************************!*\
  !*** ./src/app/app.component.scss ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LnNjc3MifQ== */");

/***/ }),

/***/ "zIBB":
/*!*****************************************************************!*\
  !*** ./src/app/shared/contribution/contribution.component.scss ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjb250cmlidXRpb24uY29tcG9uZW50LnNjc3MifQ== */");

/***/ }),

/***/ "zUnb":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "fXoL");
/* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ "a3Wg");
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/app.module */ "ZAI4");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environments/environment */ "AytR");




if (_environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].production) {
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["enableProdMode"])();
}
Object(_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__["platformBrowserDynamic"])().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_2__["AppModule"])
    .catch(err => console.log(err));


/***/ }),

/***/ "zn8P":
/*!******************************************************!*\
  !*** ./$$_lazy_route_resource lazy namespace object ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(function() {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = function() { return []; };
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
module.exports = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = "zn8P";

/***/ })

},[[0,"runtime","vendor"]]]);
//# sourceMappingURL=main.js.map