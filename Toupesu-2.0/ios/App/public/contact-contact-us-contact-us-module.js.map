{"version":3,"sources":["./src/app/dashboard/contact/contact-us/contact-us.page.ts","./src/app/dashboard/contact/contact-us/contact-us.module.ts","./src/app/dashboard/contact/contact-us/contact-us.page.html","./src/app/dashboard/contact/contact-us/contact-us.page.scss"],"names":[],"mappings":"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","file":"contact-contact-us-contact-us-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { ErrorService } from 'src/app/shared/service/error.service';\r\nimport { ContactService } from '../service/contact.service';\r\nimport { LocationService } from 'src/app/shared/service/location.service';\r\nimport { PrefixComponent } from 'src/app/shared/prefix/prefix.component';\r\nimport { ModalController } from '@ionic/angular';\r\nimport { FormUtilsService } from 'src/app/shared/service/form-utils.service';\r\nimport { UiService } from 'src/app/shared/service/ui.service';\r\n\r\n@Component({\r\n  selector: 'app-contact-us',\r\n  templateUrl: './contact-us.page.html',\r\n  styleUrls: ['./contact-us.page.scss'],\r\n})\r\nexport class ContactUsPage implements OnInit {\r\n\r\n  contactForm: FormGroup;\r\n  validationMessages: any;\r\n  loading: boolean;\r\n  states: any[];\r\n\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private translate: TranslateService,\r\n    private modatCtrl: ModalController,\r\n    private formUtil: FormUtilsService,\r\n    private location: LocationService,\r\n    private contact: ContactService,\r\n    private errorService: ErrorService,\r\n    private ui: UiService\r\n  ) {\r\n    this.loading = false;\r\n    this.states = [];\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n    this.initContactForm();\r\n    this.validationMessage();\r\n    this.getWordCountries(false);\r\n  }\r\n\r\n\r\n  // Form getters\r\n  get firstname() {\r\n    return this.contactForm.get('firstname');\r\n  }\r\n\r\n  get lastname() {\r\n    return this.contactForm.get('lastname');\r\n  }\r\n\r\n  get email() {\r\n    return this.contactForm.get('email');\r\n  }\r\n\r\n  get phone() {\r\n    return this.contactForm.get('phone');\r\n  }\r\n\r\n  get message() {\r\n    return this.contactForm.get('message');\r\n  }\r\n\r\n\r\n  // Validation message\r\n  validationMessage() {\r\n    this.translate.get(['REQUIRED_FIELD_INVALID', 'REQUIRED_FIELD_TEXT']).subscribe(trans => {\r\n      this.validationMessages = {\r\n        firstname: [\r\n          { type: 'required', message: trans.REQUIRED_FIELD_TEXT },\r\n          { type: 'invalid', message: trans.REQUIRED_FIELD_INVALID }\r\n        ],\r\n        lastname: [\r\n          { type: 'required', message: trans.REQUIRED_FIELD_TEXT },\r\n          { type: 'invalid', message: trans.REQUIRED_FIELD_INVALID }\r\n        ],\r\n        message: [\r\n          { type: 'required', message: trans.REQUIRED_FIELD_TEXT },\r\n          { type: 'invalid', message: trans.REQUIRED_FIELD_INVALID }\r\n        ],\r\n        phone: [\r\n          { type: 'required', message: trans.REQUIRED_FIELD_TEXT },\r\n          { type: 'invalid', message: trans.REQUIRED_FIELD_INVALID }\r\n        ],\r\n        email: [\r\n          { type: 'required', message: trans.REQUIRED_FIELD_TEXT },\r\n          { type: 'invalid', message: trans.REQUIRED_FIELD_INVALID }\r\n        ]\r\n      };\r\n    });\r\n\r\n  }\r\n\r\n\r\n  // Init the user form with his data\r\n  initContactForm() {\r\n    this.contactForm = this.fb.group({\r\n      firstname: ['', Validators.compose([Validators.maxLength(100), Validators.required])],\r\n      lastname: ['', Validators.compose([Validators.maxLength(100), Validators.required])],\r\n      prefix: [''],\r\n      country: [''],\r\n      email: ['', Validators.compose([Validators.pattern('^[a-zA-Z0-9._-]+@[a-z0-9._-]{2,}[.][a-z]{2,4}$'), Validators.required])],\r\n      phone: ['', Validators.compose([Validators.pattern('^[0-9]{7,10}$'), Validators.required])],\r\n      message: ['', Validators.compose([Validators.maxLength(1000), Validators.required])]\r\n    });\r\n  }\r\n\r\n\r\n  // Get all the word countries\r\n  getWordCountries(refresh) {\r\n    this.location.getWordCountries(refresh).then((countries: any) => {\r\n      if (countries && countries.length > 0) {\r\n        this.states = countries;\r\n        this.getCurrentCountry(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Set the default country\r\n  getCurrentCountry(refresher: boolean) {\r\n    this.location.getCurrentWordCountryInfo(refresher).then((country: any) => {\r\n      if (country) {\r\n        this.contactForm.get('prefix').setValue(country.country_prefixe);\r\n        this.contactForm.get('country').setValue(country.code_country);\r\n      }\r\n    }).catch(error => {\r\n    });\r\n  }\r\n\r\n\r\n  // Update the phone value\r\n  updatePhoneFormat(phone: string) {\r\n    if (this.formUtil.validatePhone(phone)) {\r\n      this.contactForm.get('phone').setValue(this.contactForm.value.prefix + this.contactForm.value.phone);\r\n    }\r\n  }\r\n\r\n  // Open the prfix  modal\r\n  showPrefix() {\r\n    this.modatCtrl\r\n      .create({\r\n        component: PrefixComponent\r\n      })\r\n      .then(modalEl => {\r\n        modalEl.present();\r\n        modalEl.onDidDismiss().then((ans) => {\r\n          if (ans && ans.role === 'select') {\r\n            this.states.forEach(country => {\r\n              if (country.code_country === ans.data) {\r\n                this.contactForm.get('prefix').setValue(country.country_prefixe);\r\n                this.contactForm.get('country').setValue(country.code_country);\r\n              }\r\n            });\r\n          }\r\n        });\r\n      });\r\n  }\r\n\r\n\r\n  // Save the contact\r\n  saveContact() {\r\n    this.loading = true;\r\n    this.updatePhoneFormat(this.contactForm.value.phone);\r\n    this.contact.sendContact(this.contactForm.value).subscribe(\r\n      (reponse: any) => {\r\n        this.loading = false;\r\n        if (reponse && reponse.message === 'success') {\r\n          this.translate.get('CONTACT_MSG_SENT_TEXT').subscribe(value => {\r\n            this.ui.presentToast(value);\r\n          });\r\n          this.initContactForm();\r\n          this.getWordCountries(false);\r\n        }\r\n      }, error => {\r\n        this.loading = false;\r\n        if (error && error.error && error.error.remplir_tous_les_champs) {\r\n          this.translate.get('TOPUP_MSG2').subscribe(value => {\r\n            this.ui.presentToast(value);\r\n          });\r\n        } else {\r\n          this.errorService.manageError(error);\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ContactUsPage } from './contact-us.page';\nimport { ContactService } from '../service/contact.service';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ContactUsPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SharedModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ContactUsPage],\n  providers:[ContactService]\n})\nexport class ContactUsPageModule {}\n","export default \"<ion-header>\\n  <ion-toolbar class=\\\"with-logo2\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button color=\\\"primary\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-title class=\\\"ion-text-center title-md-right\\\">\\n      <ion-img class=\\\"logo\\\" [src]=\\\"'assets/logo-toupesu.svg'\\\"></ion-img>\\n    </ion-title>\\n  </ion-toolbar>\\n  <ion-toolbar class=\\\"ion-text-center subtitle\\\">\\n    <ion-title>{{ 'CONTACT_PAGE_TITLE' | translate }}</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"user-profil\\\">\\n  <form [formGroup]=\\\"contactForm\\\">\\n    <ion-grid>\\n      <ion-row>\\n        <ion-col class=\\\"ion-padding\\\">\\n          <ion-label color=\\\"dark\\\">\\n            <span [innerHTML]=\\\"'CONTACT_MSG1' | translate\\\"></span>\\n            <span [innerHTML]=\\\"'CONTACT_MSG2' | translate\\\"></span>\\n            <span [innerHTML]=\\\"'CONTACT_MSG3' | translate\\\"></span>\\n          </ion-label>\\n        </ion-col>\\n      </ion-row>\\n      <ion-row>\\n        <ion-col>\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">{{ 'FIRSTNAME_TEXT' | translate }}</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"firstname\\\"></ion-input>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validationMessages.firstname\\\">\\n              <div class=\\\"error-message\\\"\\n                *ngIf=\\\"firstname.hasError(validation.type) && (firstname.dirty || firstname.touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n                <span [innerHTML]=\\\"validation.message\\\"></span>\\n              </div>\\n            </ng-container>\\n          </div>\\n        </ion-col>\\n      </ion-row>\\n      <ion-row>\\n        <ion-col>\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">{{'LASTNAME_TEXT' | translate }}</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"lastname\\\"></ion-input>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validationMessages.lastname\\\">\\n              <div class=\\\"error-message\\\"\\n                *ngIf=\\\"lastname.hasError(validation.type) && (lastname.dirty || lastname.touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n                <span [innerHTML]=\\\"validation.message\\\"></span>\\n              </div>\\n            </ng-container>\\n          </div>\\n        </ion-col>\\n      </ion-row>\\n\\n      <ion-row>\\n        <ion-col>\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">{{'EMAIL_TEXT' | translate }}</ion-label>\\n            <ion-input type=\\\"email\\\" formControlName=\\\"email\\\"></ion-input>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validationMessages.email\\\">\\n              <div class=\\\"error-message\\\" *ngIf=\\\"email.hasError(validation.type) && (email.dirty || email.touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n                <span [innerHTML]=\\\"validation.message\\\"></span>\\n              </div>\\n            </ng-container>\\n          </div>\\n          <ion-row>\\n            <ion-col size=\\\"4\\\">\\n              <ion-item (click)=\\\"showPrefix()\\\">\\n                <ion-label position=\\\"floating\\\">+</ion-label>\\n                <ion-input type=\\\"text\\\" placeholder=\\\"{{contactForm.value.prefix}}\\\"></ion-input>\\n              </ion-item>\\n            </ion-col>\\n            <ion-col>\\n              <ion-item>\\n                <ion-label position=\\\"floating\\\">{{'PHONE_TEXT' | translate }}</ion-label>\\n                <ion-input type=\\\"tel\\\" formControlName=\\\"phone\\\"></ion-input>\\n              </ion-item>\\n            </ion-col>\\n          </ion-row>\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validationMessages.phone\\\">\\n              <div class=\\\"error-message\\\" *ngIf=\\\"phone.hasError(validation.type) && (phone.dirty || phone.touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n                <span [innerHTML]=\\\"validation.message\\\"></span>\\n              </div>\\n            </ng-container>\\n          </div>\\n        </ion-col>\\n      </ion-row>\\n      <ion-row>\\n        <ion-col>\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">{{ 'M_MESSAGE' | translate }}</ion-label>\\n            <ion-textarea type=\\\"text\\\" formControlName=\\\"message\\\"></ion-textarea>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validationMessages.message\\\">\\n              <div class=\\\"error-message\\\"\\n                *ngIf=\\\"message.hasError(validation.type) && (message.dirty || message.touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n                <span [innerHTML]=\\\"validation.message\\\"></span>\\n              </div>\\n            </ng-container>\\n          </div>\\n        </ion-col>\\n      </ion-row>\\n\\n    </ion-grid>\\n  </form>\\n\\n</ion-content>\\n\\n<ion-footer class=\\\"ion-padding ion-text-center\\\">\\n  <ion-button expand=\\\"full\\\" [disabled]=\\\"loading || contactForm.invalid\\\" (click)=\\\"saveContact()\\\" color=\\\"warning\\\"\\n    class=\\\"ion-text-uppercase\\\" shape=\\\"round\\\">\\n    {{'SEND_TEXT' | translate}}\\n  </ion-button>\\n  <ion-spinner *ngIf=\\\"loading\\\" name=\\\"circles\\\"></ion-spinner>\\n</ion-footer>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjb250YWN0LXVzLnBhZ2Uuc2NzcyJ9 */\";"],"sourceRoot":"webpack:///"}